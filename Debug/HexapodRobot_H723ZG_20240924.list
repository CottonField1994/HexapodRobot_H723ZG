
HexapodRobot_H723ZG_20240924.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cc0c  080002d0  080002d0  000012d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000039c  0800cedc  0800cedc  0000dedc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800d278  0800d278  0000e278  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800d280  0800d280  0000e280  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800d284  0800d284  0000e284  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000090  24000000  0800d288  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  24000090  0800d318  0000f090  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  240000f0  0800d378  0000f0f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .mtk_exctbl   00000a60  24000200  0800d3d8  0000f200  2**8
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          000006a8  24000c60  0800de38  0000fc60  2**2
                  ALLOC
 11 .noinit       000022d8  24001308  0800de38  00010308  2**3
                  ALLOC
 12 ._user_heap_stack 00000600  240035e0  0800de38  000105e0  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  0000fc60  2**0
                  CONTENTS, READONLY
 14 .debug_info   0002b13c  00000000  00000000  0000fc8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00006f71  00000000  00000000  0003adca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00002118  00000000  00000000  00041d40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000191d  00000000  00000000  00043e58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00039764  00000000  00000000  00045775  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0003c3e2  00000000  00000000  0007eed9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0015b0c8  00000000  00000000  000bb2bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  00216383  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00008b7c  00000000  00000000  002163c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 000000b5  00000000  00000000  0021ef44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000c60 	.word	0x24000c60
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0800cec4 	.word	0x0800cec4

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000c64 	.word	0x24000c64
 800030c:	0800cec4 	.word	0x0800cec4

08000310 <knl_dispatch_entry>:
	.thumb_func
	.globl Csym(knl_dispatch_entry)

Csym(knl_dispatch_entry):	
/*----------------- Start dispatch processing. -----------------*/
	ldr	r0, =Csym(knl_dispatch_disabled)
 8000310:	4828      	ldr	r0, [pc, #160]	@ (80003b4 <l_dispatch_200+0x16>)
	ldr	r1, =1
 8000312:	f04f 0101 	mov.w	r1, #1
	str	r1, [r0]			// Dispatch disable
 8000316:	6001      	str	r1, [r0, #0]

	ldr	r0, =Csym(knl_ctxtsk)
 8000318:	4827      	ldr	r0, [pc, #156]	@ (80003b8 <l_dispatch_200+0x1a>)
	ldr	r1, [r0]			// R1 = ctxtsk
 800031a:	6801      	ldr	r1, [r0, #0]
	cmp	r1, #0
 800031c:	2900      	cmp	r1, #0
	bne	l_dispatch_000
 800031e:	d102      	bne.n	8000326 <l_dispatch_000>

	ldr	sp, =(Csym(knl_tmp_stack) + TMP_STACK_SIZE)	// Set temporal stack
 8000320:	f8df d098 	ldr.w	sp, [pc, #152]	@ 80003bc <l_dispatch_200+0x1e>
	b	l_dispatch_100
 8000324:	e011      	b.n	800034a <l_dispatch_100>

08000326 <l_dispatch_000>:

/*----------------- Save "ctxtsk" context. -----------------*/
l_dispatch_000: 
	push	{r4-r11}
 8000326:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
	push	{lr}
 800032a:	b500      	push	{lr}

#if USE_FPU			// Save FPU register
	ldr	r2, [r1, #TCB_tskatr]
 800032c:	690a      	ldr	r2, [r1, #16]
	ands	r2, r2, #TA_FPU
 800032e:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
	beq	l_dispatch_010			// ctxtsk is not a TA_FPU attribute.
 8000332:	d005      	beq.n	8000340 <l_dispatch_010>

	ands	r3,lr, #EXPRN_NO_FPU
 8000334:	f01e 0310 	ands.w	r3, lr, #16
	bne	l_dispatch_010			// ctxtsk does not execute FPU instructions.
 8000338:	d102      	bne.n	8000340 <l_dispatch_010>

	vpush	{s16-s31}			// Push FPU register (S16-S31)
 800033a:	ed2d 8a10 	vpush	{s16-s31}
	push	{r3}				//FPU usage flag
 800033e:	b408      	push	{r3}

08000340 <l_dispatch_010>:

l_dispatch_010:			// End of FPU register save process
#endif /* USE_FPU */

	str	sp, [r1, #TCB_tskctxb + CTXB_ssp]	// Save 'ssp' to TCB
 8000340:	f8c1 d018 	str.w	sp, [r1, #24]

	ldr	r2, =0
 8000344:	f04f 0200 	mov.w	r2, #0
	str	r2, [r0]			// ctxtsk = NULL
 8000348:	6002      	str	r2, [r0, #0]

0800034a <l_dispatch_100>:


/*----------------- Dispatch from "ctxtsk" to "schedtsk" -----------------*/
l_dispatch_100:
	ldr	r4, =Csym(knl_ctxtsk)
 800034a:	4c1b      	ldr	r4, [pc, #108]	@ (80003b8 <l_dispatch_200+0x1a>)
	ldr	r5, =Csym(knl_schedtsk)		// R5 = &schedtsk
 800034c:	4d1c      	ldr	r5, [pc, #112]	@ (80003c0 <l_dispatch_200+0x22>)
	ldr	r6, =Csym(knl_lowpow_discnt)	// R6 = &lowpow_discnt
 800034e:	4e1d      	ldr	r6, [pc, #116]	@ (80003c4 <l_dispatch_200+0x26>)

08000350 <l_dispatch_110>:

l_dispatch_110:
	ldr	r2, =INTPRI_VAL(INTPRI_MAX_EXTINT_PRI)	// Disable interruput
 8000350:	f04f 0210 	mov.w	r2, #16
	msr	basepri, r2
 8000354:	f382 8811 	msr	BASEPRI, r2

	ldr	r8, [r5]			// R8 = schedtsk
 8000358:	f8d5 8000 	ldr.w	r8, [r5]
	cmp	r8, #0				// Is there 'schedtsk'?
 800035c:	f1b8 0f00 	cmp.w	r8, #0
	bne	l_dispatch_120
 8000360:	d10d      	bne.n	800037e <l_dispatch_120>

	/* Moves to power saving mode because there are no tasks that can be run. */
	ldr	ip, [r6]			// Is 'low_pow' disabled?
 8000362:	f8d6 c000 	ldr.w	ip, [r6]
	cmp	ip, #0
 8000366:	f1bc 0f00 	cmp.w	ip, #0
	it	eq
 800036a:	bf08      	it	eq
	bleq	Csym(low_pow)			// call low_pow()
 800036c:	f00c f876 	bleq	800c45c <low_pow>

	ldr	r2, =0
 8000370:	f04f 0200 	mov.w	r2, #0
	msr	basepri, r2			// Enable interruput
 8000374:	f382 8811 	msr	BASEPRI, r2
	isb
 8000378:	f3bf 8f6f 	isb	sy

	b	l_dispatch_110
 800037c:	e7e8      	b.n	8000350 <l_dispatch_110>

0800037e <l_dispatch_120>:

l_dispatch_120:			// Switch to 'schedtsk'
	str	r8, [r4]			// ctxtsk = schedtsk
 800037e:	f8c4 8000 	str.w	r8, [r4]
	ldr	sp, [r8, #TCB_tskctxb + CTXB_ssp]	// Restore 'ssp' from TCB
 8000382:	f8d8 d018 	ldr.w	sp, [r8, #24]


/*----------------- Restore "schedtsk" context. -----------------*/

#if USE_FPU			// Restore FPU context
	ldr	r0, [r8, #TCB_tskatr]
 8000386:	f8d8 0010 	ldr.w	r0, [r8, #16]
	ands	r0, r0, #TA_FPU
 800038a:	f410 5080 	ands.w	r0, r0, #4096	@ 0x1000
	beq	l_dispatch_200			// schedtsk is not a TA_FPU attribute.
 800038e:	d006      	beq.n	800039e <l_dispatch_200>

	ldr	r3,[sp]				// load FPU usage flag
 8000390:	9b00      	ldr	r3, [sp, #0]
	ands	r3, r3, #EXPRN_NO_FPU
 8000392:	f013 0310 	ands.w	r3, r3, #16
	bne	l_dispatch_200			// schedtsk does not execute FPU instructions.
 8000396:	d102      	bne.n	800039e <l_dispatch_200>

	pop	{r3}
 8000398:	bc08      	pop	{r3}
	vpop	{s16-s31}			// Pop FPU register (S16-S31)
 800039a:	ecbd 8a10 	vpop	{s16-s31}

0800039e <l_dispatch_200>:

l_dispatch_200:			//  End of FPU register restore process
#endif	/* USE_FPU */

	pop	{lr}
 800039e:	f85d eb04 	ldr.w	lr, [sp], #4
	pop	{r4-r11}
 80003a2:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}

	ldr	r0, =Csym(knl_dispatch_disabled)
 80003a6:	4803      	ldr	r0, [pc, #12]	@ (80003b4 <l_dispatch_200+0x16>)
	ldr	r1, =0
 80003a8:	f04f 0100 	mov.w	r1, #0
	str	r1, [r0]			// Dispatch enable
 80003ac:	6001      	str	r1, [r0, #0]

	msr	basepri, r1			// Enable inperrupt
 80003ae:	f381 8811 	msr	BASEPRI, r1

	bx	lr
 80003b2:	4770      	bx	lr
	ldr	r0, =Csym(knl_dispatch_disabled)
 80003b4:	240025d4 	.word	0x240025d4
	ldr	r0, =Csym(knl_ctxtsk)
 80003b8:	240025d8 	.word	0x240025d8
	ldr	sp, =(Csym(knl_tmp_stack) + TMP_STACK_SIZE)	// Set temporal stack
 80003bc:	240011a4 	.word	0x240011a4
	ldr	r5, =Csym(knl_schedtsk)		// R5 = &schedtsk
 80003c0:	240025dc 	.word	0x240025dc
	ldr	r6, =Csym(knl_lowpow_discnt)	// R6 = &lowpow_discnt
 80003c4:	24001068 	.word	0x24001068

080003c8 <strlen>:
 80003c8:	4603      	mov	r3, r0
 80003ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	d1fb      	bne.n	80003ca <strlen+0x2>
 80003d2:	1a18      	subs	r0, r3, r0
 80003d4:	3801      	subs	r0, #1
 80003d6:	4770      	bx	lr
	...

080003e0 <memchr>:
 80003e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80003e4:	2a10      	cmp	r2, #16
 80003e6:	db2b      	blt.n	8000440 <memchr+0x60>
 80003e8:	f010 0f07 	tst.w	r0, #7
 80003ec:	d008      	beq.n	8000400 <memchr+0x20>
 80003ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80003f2:	3a01      	subs	r2, #1
 80003f4:	428b      	cmp	r3, r1
 80003f6:	d02d      	beq.n	8000454 <memchr+0x74>
 80003f8:	f010 0f07 	tst.w	r0, #7
 80003fc:	b342      	cbz	r2, 8000450 <memchr+0x70>
 80003fe:	d1f6      	bne.n	80003ee <memchr+0xe>
 8000400:	b4f0      	push	{r4, r5, r6, r7}
 8000402:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000406:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800040a:	f022 0407 	bic.w	r4, r2, #7
 800040e:	f07f 0700 	mvns.w	r7, #0
 8000412:	2300      	movs	r3, #0
 8000414:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000418:	3c08      	subs	r4, #8
 800041a:	ea85 0501 	eor.w	r5, r5, r1
 800041e:	ea86 0601 	eor.w	r6, r6, r1
 8000422:	fa85 f547 	uadd8	r5, r5, r7
 8000426:	faa3 f587 	sel	r5, r3, r7
 800042a:	fa86 f647 	uadd8	r6, r6, r7
 800042e:	faa5 f687 	sel	r6, r5, r7
 8000432:	b98e      	cbnz	r6, 8000458 <memchr+0x78>
 8000434:	d1ee      	bne.n	8000414 <memchr+0x34>
 8000436:	bcf0      	pop	{r4, r5, r6, r7}
 8000438:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800043c:	f002 0207 	and.w	r2, r2, #7
 8000440:	b132      	cbz	r2, 8000450 <memchr+0x70>
 8000442:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000446:	3a01      	subs	r2, #1
 8000448:	ea83 0301 	eor.w	r3, r3, r1
 800044c:	b113      	cbz	r3, 8000454 <memchr+0x74>
 800044e:	d1f8      	bne.n	8000442 <memchr+0x62>
 8000450:	2000      	movs	r0, #0
 8000452:	4770      	bx	lr
 8000454:	3801      	subs	r0, #1
 8000456:	4770      	bx	lr
 8000458:	2d00      	cmp	r5, #0
 800045a:	bf06      	itte	eq
 800045c:	4635      	moveq	r5, r6
 800045e:	3803      	subeq	r0, #3
 8000460:	3807      	subne	r0, #7
 8000462:	f015 0f01 	tst.w	r5, #1
 8000466:	d107      	bne.n	8000478 <memchr+0x98>
 8000468:	3001      	adds	r0, #1
 800046a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800046e:	bf02      	ittt	eq
 8000470:	3001      	addeq	r0, #1
 8000472:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000476:	3001      	addeq	r0, #1
 8000478:	bcf0      	pop	{r4, r5, r6, r7}
 800047a:	3801      	subs	r0, #1
 800047c:	4770      	bx	lr
 800047e:	bf00      	nop

08000480 <__aeabi_uldivmod>:
 8000480:	b953      	cbnz	r3, 8000498 <__aeabi_uldivmod+0x18>
 8000482:	b94a      	cbnz	r2, 8000498 <__aeabi_uldivmod+0x18>
 8000484:	2900      	cmp	r1, #0
 8000486:	bf08      	it	eq
 8000488:	2800      	cmpeq	r0, #0
 800048a:	bf1c      	itt	ne
 800048c:	f04f 31ff 	movne.w	r1, #4294967295
 8000490:	f04f 30ff 	movne.w	r0, #4294967295
 8000494:	f000 b96a 	b.w	800076c <__aeabi_idiv0>
 8000498:	f1ad 0c08 	sub.w	ip, sp, #8
 800049c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80004a0:	f000 f806 	bl	80004b0 <__udivmoddi4>
 80004a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80004a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80004ac:	b004      	add	sp, #16
 80004ae:	4770      	bx	lr

080004b0 <__udivmoddi4>:
 80004b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80004b4:	9d08      	ldr	r5, [sp, #32]
 80004b6:	460c      	mov	r4, r1
 80004b8:	2b00      	cmp	r3, #0
 80004ba:	d14e      	bne.n	800055a <__udivmoddi4+0xaa>
 80004bc:	4694      	mov	ip, r2
 80004be:	458c      	cmp	ip, r1
 80004c0:	4686      	mov	lr, r0
 80004c2:	fab2 f282 	clz	r2, r2
 80004c6:	d962      	bls.n	800058e <__udivmoddi4+0xde>
 80004c8:	b14a      	cbz	r2, 80004de <__udivmoddi4+0x2e>
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	4091      	lsls	r1, r2
 80004d0:	fa20 f303 	lsr.w	r3, r0, r3
 80004d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d8:	4319      	orrs	r1, r3
 80004da:	fa00 fe02 	lsl.w	lr, r0, r2
 80004de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e2:	fa1f f68c 	uxth.w	r6, ip
 80004e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80004ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004ee:	fb07 1114 	mls	r1, r7, r4, r1
 80004f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004f6:	fb04 f106 	mul.w	r1, r4, r6
 80004fa:	4299      	cmp	r1, r3
 80004fc:	d90a      	bls.n	8000514 <__udivmoddi4+0x64>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f104 30ff 	add.w	r0, r4, #4294967295
 8000506:	f080 8112 	bcs.w	800072e <__udivmoddi4+0x27e>
 800050a:	4299      	cmp	r1, r3
 800050c:	f240 810f 	bls.w	800072e <__udivmoddi4+0x27e>
 8000510:	3c02      	subs	r4, #2
 8000512:	4463      	add	r3, ip
 8000514:	1a59      	subs	r1, r3, r1
 8000516:	fa1f f38e 	uxth.w	r3, lr
 800051a:	fbb1 f0f7 	udiv	r0, r1, r7
 800051e:	fb07 1110 	mls	r1, r7, r0, r1
 8000522:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000526:	fb00 f606 	mul.w	r6, r0, r6
 800052a:	429e      	cmp	r6, r3
 800052c:	d90a      	bls.n	8000544 <__udivmoddi4+0x94>
 800052e:	eb1c 0303 	adds.w	r3, ip, r3
 8000532:	f100 31ff 	add.w	r1, r0, #4294967295
 8000536:	f080 80fc 	bcs.w	8000732 <__udivmoddi4+0x282>
 800053a:	429e      	cmp	r6, r3
 800053c:	f240 80f9 	bls.w	8000732 <__udivmoddi4+0x282>
 8000540:	4463      	add	r3, ip
 8000542:	3802      	subs	r0, #2
 8000544:	1b9b      	subs	r3, r3, r6
 8000546:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800054a:	2100      	movs	r1, #0
 800054c:	b11d      	cbz	r5, 8000556 <__udivmoddi4+0xa6>
 800054e:	40d3      	lsrs	r3, r2
 8000550:	2200      	movs	r2, #0
 8000552:	e9c5 3200 	strd	r3, r2, [r5]
 8000556:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800055a:	428b      	cmp	r3, r1
 800055c:	d905      	bls.n	800056a <__udivmoddi4+0xba>
 800055e:	b10d      	cbz	r5, 8000564 <__udivmoddi4+0xb4>
 8000560:	e9c5 0100 	strd	r0, r1, [r5]
 8000564:	2100      	movs	r1, #0
 8000566:	4608      	mov	r0, r1
 8000568:	e7f5      	b.n	8000556 <__udivmoddi4+0xa6>
 800056a:	fab3 f183 	clz	r1, r3
 800056e:	2900      	cmp	r1, #0
 8000570:	d146      	bne.n	8000600 <__udivmoddi4+0x150>
 8000572:	42a3      	cmp	r3, r4
 8000574:	d302      	bcc.n	800057c <__udivmoddi4+0xcc>
 8000576:	4290      	cmp	r0, r2
 8000578:	f0c0 80f0 	bcc.w	800075c <__udivmoddi4+0x2ac>
 800057c:	1a86      	subs	r6, r0, r2
 800057e:	eb64 0303 	sbc.w	r3, r4, r3
 8000582:	2001      	movs	r0, #1
 8000584:	2d00      	cmp	r5, #0
 8000586:	d0e6      	beq.n	8000556 <__udivmoddi4+0xa6>
 8000588:	e9c5 6300 	strd	r6, r3, [r5]
 800058c:	e7e3      	b.n	8000556 <__udivmoddi4+0xa6>
 800058e:	2a00      	cmp	r2, #0
 8000590:	f040 8090 	bne.w	80006b4 <__udivmoddi4+0x204>
 8000594:	eba1 040c 	sub.w	r4, r1, ip
 8000598:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800059c:	fa1f f78c 	uxth.w	r7, ip
 80005a0:	2101      	movs	r1, #1
 80005a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80005a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80005aa:	fb08 4416 	mls	r4, r8, r6, r4
 80005ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80005b2:	fb07 f006 	mul.w	r0, r7, r6
 80005b6:	4298      	cmp	r0, r3
 80005b8:	d908      	bls.n	80005cc <__udivmoddi4+0x11c>
 80005ba:	eb1c 0303 	adds.w	r3, ip, r3
 80005be:	f106 34ff 	add.w	r4, r6, #4294967295
 80005c2:	d202      	bcs.n	80005ca <__udivmoddi4+0x11a>
 80005c4:	4298      	cmp	r0, r3
 80005c6:	f200 80cd 	bhi.w	8000764 <__udivmoddi4+0x2b4>
 80005ca:	4626      	mov	r6, r4
 80005cc:	1a1c      	subs	r4, r3, r0
 80005ce:	fa1f f38e 	uxth.w	r3, lr
 80005d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80005d6:	fb08 4410 	mls	r4, r8, r0, r4
 80005da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80005de:	fb00 f707 	mul.w	r7, r0, r7
 80005e2:	429f      	cmp	r7, r3
 80005e4:	d908      	bls.n	80005f8 <__udivmoddi4+0x148>
 80005e6:	eb1c 0303 	adds.w	r3, ip, r3
 80005ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80005ee:	d202      	bcs.n	80005f6 <__udivmoddi4+0x146>
 80005f0:	429f      	cmp	r7, r3
 80005f2:	f200 80b0 	bhi.w	8000756 <__udivmoddi4+0x2a6>
 80005f6:	4620      	mov	r0, r4
 80005f8:	1bdb      	subs	r3, r3, r7
 80005fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80005fe:	e7a5      	b.n	800054c <__udivmoddi4+0x9c>
 8000600:	f1c1 0620 	rsb	r6, r1, #32
 8000604:	408b      	lsls	r3, r1
 8000606:	fa22 f706 	lsr.w	r7, r2, r6
 800060a:	431f      	orrs	r7, r3
 800060c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000610:	fa04 f301 	lsl.w	r3, r4, r1
 8000614:	ea43 030c 	orr.w	r3, r3, ip
 8000618:	40f4      	lsrs	r4, r6
 800061a:	fa00 f801 	lsl.w	r8, r0, r1
 800061e:	0c38      	lsrs	r0, r7, #16
 8000620:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000624:	fbb4 fef0 	udiv	lr, r4, r0
 8000628:	fa1f fc87 	uxth.w	ip, r7
 800062c:	fb00 441e 	mls	r4, r0, lr, r4
 8000630:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000634:	fb0e f90c 	mul.w	r9, lr, ip
 8000638:	45a1      	cmp	r9, r4
 800063a:	fa02 f201 	lsl.w	r2, r2, r1
 800063e:	d90a      	bls.n	8000656 <__udivmoddi4+0x1a6>
 8000640:	193c      	adds	r4, r7, r4
 8000642:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000646:	f080 8084 	bcs.w	8000752 <__udivmoddi4+0x2a2>
 800064a:	45a1      	cmp	r9, r4
 800064c:	f240 8081 	bls.w	8000752 <__udivmoddi4+0x2a2>
 8000650:	f1ae 0e02 	sub.w	lr, lr, #2
 8000654:	443c      	add	r4, r7
 8000656:	eba4 0409 	sub.w	r4, r4, r9
 800065a:	fa1f f983 	uxth.w	r9, r3
 800065e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000662:	fb00 4413 	mls	r4, r0, r3, r4
 8000666:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800066a:	fb03 fc0c 	mul.w	ip, r3, ip
 800066e:	45a4      	cmp	ip, r4
 8000670:	d907      	bls.n	8000682 <__udivmoddi4+0x1d2>
 8000672:	193c      	adds	r4, r7, r4
 8000674:	f103 30ff 	add.w	r0, r3, #4294967295
 8000678:	d267      	bcs.n	800074a <__udivmoddi4+0x29a>
 800067a:	45a4      	cmp	ip, r4
 800067c:	d965      	bls.n	800074a <__udivmoddi4+0x29a>
 800067e:	3b02      	subs	r3, #2
 8000680:	443c      	add	r4, r7
 8000682:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000686:	fba0 9302 	umull	r9, r3, r0, r2
 800068a:	eba4 040c 	sub.w	r4, r4, ip
 800068e:	429c      	cmp	r4, r3
 8000690:	46ce      	mov	lr, r9
 8000692:	469c      	mov	ip, r3
 8000694:	d351      	bcc.n	800073a <__udivmoddi4+0x28a>
 8000696:	d04e      	beq.n	8000736 <__udivmoddi4+0x286>
 8000698:	b155      	cbz	r5, 80006b0 <__udivmoddi4+0x200>
 800069a:	ebb8 030e 	subs.w	r3, r8, lr
 800069e:	eb64 040c 	sbc.w	r4, r4, ip
 80006a2:	fa04 f606 	lsl.w	r6, r4, r6
 80006a6:	40cb      	lsrs	r3, r1
 80006a8:	431e      	orrs	r6, r3
 80006aa:	40cc      	lsrs	r4, r1
 80006ac:	e9c5 6400 	strd	r6, r4, [r5]
 80006b0:	2100      	movs	r1, #0
 80006b2:	e750      	b.n	8000556 <__udivmoddi4+0xa6>
 80006b4:	f1c2 0320 	rsb	r3, r2, #32
 80006b8:	fa20 f103 	lsr.w	r1, r0, r3
 80006bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80006c0:	fa24 f303 	lsr.w	r3, r4, r3
 80006c4:	4094      	lsls	r4, r2
 80006c6:	430c      	orrs	r4, r1
 80006c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80006cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80006d0:	fa1f f78c 	uxth.w	r7, ip
 80006d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80006d8:	fb08 3110 	mls	r1, r8, r0, r3
 80006dc:	0c23      	lsrs	r3, r4, #16
 80006de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80006e2:	fb00 f107 	mul.w	r1, r0, r7
 80006e6:	4299      	cmp	r1, r3
 80006e8:	d908      	bls.n	80006fc <__udivmoddi4+0x24c>
 80006ea:	eb1c 0303 	adds.w	r3, ip, r3
 80006ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80006f2:	d22c      	bcs.n	800074e <__udivmoddi4+0x29e>
 80006f4:	4299      	cmp	r1, r3
 80006f6:	d92a      	bls.n	800074e <__udivmoddi4+0x29e>
 80006f8:	3802      	subs	r0, #2
 80006fa:	4463      	add	r3, ip
 80006fc:	1a5b      	subs	r3, r3, r1
 80006fe:	b2a4      	uxth	r4, r4
 8000700:	fbb3 f1f8 	udiv	r1, r3, r8
 8000704:	fb08 3311 	mls	r3, r8, r1, r3
 8000708:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800070c:	fb01 f307 	mul.w	r3, r1, r7
 8000710:	42a3      	cmp	r3, r4
 8000712:	d908      	bls.n	8000726 <__udivmoddi4+0x276>
 8000714:	eb1c 0404 	adds.w	r4, ip, r4
 8000718:	f101 36ff 	add.w	r6, r1, #4294967295
 800071c:	d213      	bcs.n	8000746 <__udivmoddi4+0x296>
 800071e:	42a3      	cmp	r3, r4
 8000720:	d911      	bls.n	8000746 <__udivmoddi4+0x296>
 8000722:	3902      	subs	r1, #2
 8000724:	4464      	add	r4, ip
 8000726:	1ae4      	subs	r4, r4, r3
 8000728:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800072c:	e739      	b.n	80005a2 <__udivmoddi4+0xf2>
 800072e:	4604      	mov	r4, r0
 8000730:	e6f0      	b.n	8000514 <__udivmoddi4+0x64>
 8000732:	4608      	mov	r0, r1
 8000734:	e706      	b.n	8000544 <__udivmoddi4+0x94>
 8000736:	45c8      	cmp	r8, r9
 8000738:	d2ae      	bcs.n	8000698 <__udivmoddi4+0x1e8>
 800073a:	ebb9 0e02 	subs.w	lr, r9, r2
 800073e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000742:	3801      	subs	r0, #1
 8000744:	e7a8      	b.n	8000698 <__udivmoddi4+0x1e8>
 8000746:	4631      	mov	r1, r6
 8000748:	e7ed      	b.n	8000726 <__udivmoddi4+0x276>
 800074a:	4603      	mov	r3, r0
 800074c:	e799      	b.n	8000682 <__udivmoddi4+0x1d2>
 800074e:	4630      	mov	r0, r6
 8000750:	e7d4      	b.n	80006fc <__udivmoddi4+0x24c>
 8000752:	46d6      	mov	lr, sl
 8000754:	e77f      	b.n	8000656 <__udivmoddi4+0x1a6>
 8000756:	4463      	add	r3, ip
 8000758:	3802      	subs	r0, #2
 800075a:	e74d      	b.n	80005f8 <__udivmoddi4+0x148>
 800075c:	4606      	mov	r6, r0
 800075e:	4623      	mov	r3, r4
 8000760:	4608      	mov	r0, r1
 8000762:	e70f      	b.n	8000584 <__udivmoddi4+0xd4>
 8000764:	3e02      	subs	r6, #2
 8000766:	4463      	add	r3, ip
 8000768:	e730      	b.n	80005cc <__udivmoddi4+0x11c>
 800076a:	bf00      	nop

0800076c <__aeabi_idiv0>:
 800076c:	4770      	bx	lr
 800076e:	bf00      	nop

08000770 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000774:	f001 fb38 	bl	8001de8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000778:	f000 f86e 	bl	8000858 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800077c:	f000 fd8e 	bl	800129c <MX_GPIO_Init>
  MX_ETH_Init();
 8000780:	f000 f8da 	bl	8000938 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000784:	f000 fd36 	bl	80011f4 <MX_USART3_UART_Init>
  MX_USB_OTG_HS_USB_Init();
 8000788:	f000 fd80 	bl	800128c <MX_USB_OTG_HS_USB_Init>
  MX_TIM1_Init();
 800078c:	f000 f920 	bl	80009d0 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000790:	f000 f9f0 	bl	8000b74 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000794:	f000 fa7c 	bl	8000c90 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000798:	f000 fb14 	bl	8000dc4 <MX_TIM4_Init>
  MX_TIM8_Init();
 800079c:	f000 fbac 	bl	8000ef8 <MX_TIM8_Init>
  MX_TIM12_Init();
 80007a0:	f000 fc64 	bl	800106c <MX_TIM12_Init>
  MX_UART4_Init();
 80007a4:	f000 fcda 	bl	800115c <MX_UART4_Init>
  /* USER CODE BEGIN 2 */

	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80007a8:	2100      	movs	r1, #0
 80007aa:	4825      	ldr	r0, [pc, #148]	@ (8000840 <main+0xd0>)
 80007ac:	f005 f8b6 	bl	800591c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80007b0:	2104      	movs	r1, #4
 80007b2:	4823      	ldr	r0, [pc, #140]	@ (8000840 <main+0xd0>)
 80007b4:	f005 f8b2 	bl	800591c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 80007b8:	2108      	movs	r1, #8
 80007ba:	4821      	ldr	r0, [pc, #132]	@ (8000840 <main+0xd0>)
 80007bc:	f005 f8ae 	bl	800591c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 80007c0:	210c      	movs	r1, #12
 80007c2:	481f      	ldr	r0, [pc, #124]	@ (8000840 <main+0xd0>)
 80007c4:	f005 f8aa 	bl	800591c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80007c8:	2100      	movs	r1, #0
 80007ca:	481e      	ldr	r0, [pc, #120]	@ (8000844 <main+0xd4>)
 80007cc:	f005 f8a6 	bl	800591c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 80007d0:	2108      	movs	r1, #8
 80007d2:	481c      	ldr	r0, [pc, #112]	@ (8000844 <main+0xd4>)
 80007d4:	f005 f8a2 	bl	800591c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 80007d8:	210c      	movs	r1, #12
 80007da:	481a      	ldr	r0, [pc, #104]	@ (8000844 <main+0xd4>)
 80007dc:	f005 f89e 	bl	800591c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80007e0:	2100      	movs	r1, #0
 80007e2:	4819      	ldr	r0, [pc, #100]	@ (8000848 <main+0xd8>)
 80007e4:	f005 f89a 	bl	800591c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80007e8:	2104      	movs	r1, #4
 80007ea:	4817      	ldr	r0, [pc, #92]	@ (8000848 <main+0xd8>)
 80007ec:	f005 f896 	bl	800591c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 80007f0:	2108      	movs	r1, #8
 80007f2:	4815      	ldr	r0, [pc, #84]	@ (8000848 <main+0xd8>)
 80007f4:	f005 f892 	bl	800591c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 80007f8:	210c      	movs	r1, #12
 80007fa:	4813      	ldr	r0, [pc, #76]	@ (8000848 <main+0xd8>)
 80007fc:	f005 f88e 	bl	800591c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8000800:	2100      	movs	r1, #0
 8000802:	4812      	ldr	r0, [pc, #72]	@ (800084c <main+0xdc>)
 8000804:	f005 f88a 	bl	800591c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8000808:	2104      	movs	r1, #4
 800080a:	4810      	ldr	r0, [pc, #64]	@ (800084c <main+0xdc>)
 800080c:	f005 f886 	bl	800591c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8000810:	2108      	movs	r1, #8
 8000812:	480e      	ldr	r0, [pc, #56]	@ (800084c <main+0xdc>)
 8000814:	f005 f882 	bl	800591c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8000818:	210c      	movs	r1, #12
 800081a:	480c      	ldr	r0, [pc, #48]	@ (800084c <main+0xdc>)
 800081c:	f005 f87e 	bl	800591c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 8000820:	2100      	movs	r1, #0
 8000822:	480b      	ldr	r0, [pc, #44]	@ (8000850 <main+0xe0>)
 8000824:	f005 f87a 	bl	800591c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_4);
 8000828:	210c      	movs	r1, #12
 800082a:	4809      	ldr	r0, [pc, #36]	@ (8000850 <main+0xe0>)
 800082c:	f005 f876 	bl	800591c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim12, TIM_CHANNEL_2);
 8000830:	2104      	movs	r1, #4
 8000832:	4808      	ldr	r0, [pc, #32]	@ (8000854 <main+0xe4>)
 8000834:	f005 f872 	bl	800591c <HAL_TIM_PWM_Start>

	void knl_start_mtkernel(void);
	knl_start_mtkernel();
 8000838:	f00b fd36 	bl	800c2a8 <knl_start_mtkernel>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 800083c:	bf00      	nop
 800083e:	e7fd      	b.n	800083c <main+0xcc>
 8000840:	24000d64 	.word	0x24000d64
 8000844:	24000db0 	.word	0x24000db0
 8000848:	24000dfc 	.word	0x24000dfc
 800084c:	24000e48 	.word	0x24000e48
 8000850:	24000e94 	.word	0x24000e94
 8000854:	24000ee0 	.word	0x24000ee0

08000858 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b09c      	sub	sp, #112	@ 0x70
 800085c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800085e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000862:	224c      	movs	r2, #76	@ 0x4c
 8000864:	2100      	movs	r1, #0
 8000866:	4618      	mov	r0, r3
 8000868:	f00b feac 	bl	800c5c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800086c:	1d3b      	adds	r3, r7, #4
 800086e:	2220      	movs	r2, #32
 8000870:	2100      	movs	r1, #0
 8000872:	4618      	mov	r0, r3
 8000874:	f00b fea6 	bl	800c5c4 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000878:	2002      	movs	r0, #2
 800087a:	f002 fa35 	bl	8002ce8 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800087e:	2300      	movs	r3, #0
 8000880:	603b      	str	r3, [r7, #0]
 8000882:	4b2c      	ldr	r3, [pc, #176]	@ (8000934 <SystemClock_Config+0xdc>)
 8000884:	699b      	ldr	r3, [r3, #24]
 8000886:	4a2b      	ldr	r2, [pc, #172]	@ (8000934 <SystemClock_Config+0xdc>)
 8000888:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800088c:	6193      	str	r3, [r2, #24]
 800088e:	4b29      	ldr	r3, [pc, #164]	@ (8000934 <SystemClock_Config+0xdc>)
 8000890:	699b      	ldr	r3, [r3, #24]
 8000892:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000896:	603b      	str	r3, [r7, #0]
 8000898:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800089a:	bf00      	nop
 800089c:	4b25      	ldr	r3, [pc, #148]	@ (8000934 <SystemClock_Config+0xdc>)
 800089e:	699b      	ldr	r3, [r3, #24]
 80008a0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80008a4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80008a8:	d1f8      	bne.n	800089c <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 80008aa:	2321      	movs	r3, #33	@ 0x21
 80008ac:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80008ae:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 80008b2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80008b4:	2301      	movs	r3, #1
 80008b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008b8:	2302      	movs	r3, #2
 80008ba:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008bc:	2302      	movs	r3, #2
 80008be:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80008c0:	2304      	movs	r3, #4
 80008c2:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 275;
 80008c4:	f240 1313 	movw	r3, #275	@ 0x113
 80008c8:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 80008ca:	2301      	movs	r3, #1
 80008cc:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80008ce:	2304      	movs	r3, #4
 80008d0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80008d2:	2302      	movs	r3, #2
 80008d4:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 80008d6:	2304      	movs	r3, #4
 80008d8:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80008da:	2300      	movs	r3, #0
 80008dc:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80008de:	2300      	movs	r3, #0
 80008e0:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008e2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008e6:	4618      	mov	r0, r3
 80008e8:	f002 fa38 	bl	8002d5c <HAL_RCC_OscConfig>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d001      	beq.n	80008f6 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80008f2:	f000 fdcf 	bl	8001494 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008f6:	233f      	movs	r3, #63	@ 0x3f
 80008f8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008fa:	2303      	movs	r3, #3
 80008fc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80008fe:	2300      	movs	r3, #0
 8000900:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000902:	2308      	movs	r3, #8
 8000904:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000906:	2340      	movs	r3, #64	@ 0x40
 8000908:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800090a:	2340      	movs	r3, #64	@ 0x40
 800090c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800090e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000912:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000914:	2340      	movs	r3, #64	@ 0x40
 8000916:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000918:	1d3b      	adds	r3, r7, #4
 800091a:	2103      	movs	r1, #3
 800091c:	4618      	mov	r0, r3
 800091e:	f002 fdf7 	bl	8003510 <HAL_RCC_ClockConfig>
 8000922:	4603      	mov	r3, r0
 8000924:	2b00      	cmp	r3, #0
 8000926:	d001      	beq.n	800092c <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000928:	f000 fdb4 	bl	8001494 <Error_Handler>
  }
}
 800092c:	bf00      	nop
 800092e:	3770      	adds	r7, #112	@ 0x70
 8000930:	46bd      	mov	sp, r7
 8000932:	bd80      	pop	{r7, pc}
 8000934:	58024800 	.word	0x58024800

08000938 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 800093c:	4b1e      	ldr	r3, [pc, #120]	@ (80009b8 <MX_ETH_Init+0x80>)
 800093e:	4a1f      	ldr	r2, [pc, #124]	@ (80009bc <MX_ETH_Init+0x84>)
 8000940:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000942:	4b1f      	ldr	r3, [pc, #124]	@ (80009c0 <MX_ETH_Init+0x88>)
 8000944:	2200      	movs	r2, #0
 8000946:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000948:	4b1d      	ldr	r3, [pc, #116]	@ (80009c0 <MX_ETH_Init+0x88>)
 800094a:	2280      	movs	r2, #128	@ 0x80
 800094c:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 800094e:	4b1c      	ldr	r3, [pc, #112]	@ (80009c0 <MX_ETH_Init+0x88>)
 8000950:	22e1      	movs	r2, #225	@ 0xe1
 8000952:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000954:	4b1a      	ldr	r3, [pc, #104]	@ (80009c0 <MX_ETH_Init+0x88>)
 8000956:	2200      	movs	r2, #0
 8000958:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 800095a:	4b19      	ldr	r3, [pc, #100]	@ (80009c0 <MX_ETH_Init+0x88>)
 800095c:	2200      	movs	r2, #0
 800095e:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000960:	4b17      	ldr	r3, [pc, #92]	@ (80009c0 <MX_ETH_Init+0x88>)
 8000962:	2200      	movs	r2, #0
 8000964:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000966:	4b14      	ldr	r3, [pc, #80]	@ (80009b8 <MX_ETH_Init+0x80>)
 8000968:	4a15      	ldr	r2, [pc, #84]	@ (80009c0 <MX_ETH_Init+0x88>)
 800096a:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800096c:	4b12      	ldr	r3, [pc, #72]	@ (80009b8 <MX_ETH_Init+0x80>)
 800096e:	2201      	movs	r2, #1
 8000970:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000972:	4b11      	ldr	r3, [pc, #68]	@ (80009b8 <MX_ETH_Init+0x80>)
 8000974:	4a13      	ldr	r2, [pc, #76]	@ (80009c4 <MX_ETH_Init+0x8c>)
 8000976:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000978:	4b0f      	ldr	r3, [pc, #60]	@ (80009b8 <MX_ETH_Init+0x80>)
 800097a:	4a13      	ldr	r2, [pc, #76]	@ (80009c8 <MX_ETH_Init+0x90>)
 800097c:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 800097e:	4b0e      	ldr	r3, [pc, #56]	@ (80009b8 <MX_ETH_Init+0x80>)
 8000980:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 8000984:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000986:	480c      	ldr	r0, [pc, #48]	@ (80009b8 <MX_ETH_Init+0x80>)
 8000988:	f001 fbb8 	bl	80020fc <HAL_ETH_Init>
 800098c:	4603      	mov	r3, r0
 800098e:	2b00      	cmp	r3, #0
 8000990:	d001      	beq.n	8000996 <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 8000992:	f000 fd7f 	bl	8001494 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000996:	2238      	movs	r2, #56	@ 0x38
 8000998:	2100      	movs	r1, #0
 800099a:	480c      	ldr	r0, [pc, #48]	@ (80009cc <MX_ETH_Init+0x94>)
 800099c:	f00b fe12 	bl	800c5c4 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80009a0:	4b0a      	ldr	r3, [pc, #40]	@ (80009cc <MX_ETH_Init+0x94>)
 80009a2:	2221      	movs	r2, #33	@ 0x21
 80009a4:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80009a6:	4b09      	ldr	r3, [pc, #36]	@ (80009cc <MX_ETH_Init+0x94>)
 80009a8:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80009ac:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80009ae:	4b07      	ldr	r3, [pc, #28]	@ (80009cc <MX_ETH_Init+0x94>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80009b4:	bf00      	nop
 80009b6:	bd80      	pop	{r7, pc}
 80009b8:	24000cb4 	.word	0x24000cb4
 80009bc:	40028000 	.word	0x40028000
 80009c0:	24001054 	.word	0x24001054
 80009c4:	240000f0 	.word	0x240000f0
 80009c8:	24000090 	.word	0x24000090
 80009cc:	24000c7c 	.word	0x24000c7c

080009d0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b09c      	sub	sp, #112	@ 0x70
 80009d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009d6:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80009da:	2200      	movs	r2, #0
 80009dc:	601a      	str	r2, [r3, #0]
 80009de:	605a      	str	r2, [r3, #4]
 80009e0:	609a      	str	r2, [r3, #8]
 80009e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009e4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80009e8:	2200      	movs	r2, #0
 80009ea:	601a      	str	r2, [r3, #0]
 80009ec:	605a      	str	r2, [r3, #4]
 80009ee:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80009f0:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80009f4:	2200      	movs	r2, #0
 80009f6:	601a      	str	r2, [r3, #0]
 80009f8:	605a      	str	r2, [r3, #4]
 80009fa:	609a      	str	r2, [r3, #8]
 80009fc:	60da      	str	r2, [r3, #12]
 80009fe:	611a      	str	r2, [r3, #16]
 8000a00:	615a      	str	r2, [r3, #20]
 8000a02:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000a04:	1d3b      	adds	r3, r7, #4
 8000a06:	2234      	movs	r2, #52	@ 0x34
 8000a08:	2100      	movs	r1, #0
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	f00b fdda 	bl	800c5c4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000a10:	4b56      	ldr	r3, [pc, #344]	@ (8000b6c <MX_TIM1_Init+0x19c>)
 8000a12:	4a57      	ldr	r2, [pc, #348]	@ (8000b70 <MX_TIM1_Init+0x1a0>)
 8000a14:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 274;
 8000a16:	4b55      	ldr	r3, [pc, #340]	@ (8000b6c <MX_TIM1_Init+0x19c>)
 8000a18:	f44f 7289 	mov.w	r2, #274	@ 0x112
 8000a1c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a1e:	4b53      	ldr	r3, [pc, #332]	@ (8000b6c <MX_TIM1_Init+0x19c>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 20000;
 8000a24:	4b51      	ldr	r3, [pc, #324]	@ (8000b6c <MX_TIM1_Init+0x19c>)
 8000a26:	f644 6220 	movw	r2, #20000	@ 0x4e20
 8000a2a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a2c:	4b4f      	ldr	r3, [pc, #316]	@ (8000b6c <MX_TIM1_Init+0x19c>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000a32:	4b4e      	ldr	r3, [pc, #312]	@ (8000b6c <MX_TIM1_Init+0x19c>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a38:	4b4c      	ldr	r3, [pc, #304]	@ (8000b6c <MX_TIM1_Init+0x19c>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000a3e:	484b      	ldr	r0, [pc, #300]	@ (8000b6c <MX_TIM1_Init+0x19c>)
 8000a40:	f004 feb4 	bl	80057ac <HAL_TIM_Base_Init>
 8000a44:	4603      	mov	r3, r0
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d001      	beq.n	8000a4e <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 8000a4a:	f000 fd23 	bl	8001494 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a4e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a52:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000a54:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8000a58:	4619      	mov	r1, r3
 8000a5a:	4844      	ldr	r0, [pc, #272]	@ (8000b6c <MX_TIM1_Init+0x19c>)
 8000a5c:	f005 f98e 	bl	8005d7c <HAL_TIM_ConfigClockSource>
 8000a60:	4603      	mov	r3, r0
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d001      	beq.n	8000a6a <MX_TIM1_Init+0x9a>
  {
    Error_Handler();
 8000a66:	f000 fd15 	bl	8001494 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000a6a:	4840      	ldr	r0, [pc, #256]	@ (8000b6c <MX_TIM1_Init+0x19c>)
 8000a6c:	f004 fef5 	bl	800585a <HAL_TIM_PWM_Init>
 8000a70:	4603      	mov	r3, r0
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d001      	beq.n	8000a7a <MX_TIM1_Init+0xaa>
  {
    Error_Handler();
 8000a76:	f000 fd0d 	bl	8001494 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a82:	2300      	movs	r3, #0
 8000a84:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000a86:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000a8a:	4619      	mov	r1, r3
 8000a8c:	4837      	ldr	r0, [pc, #220]	@ (8000b6c <MX_TIM1_Init+0x19c>)
 8000a8e:	f005 feb9 	bl	8006804 <HAL_TIMEx_MasterConfigSynchronization>
 8000a92:	4603      	mov	r3, r0
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d001      	beq.n	8000a9c <MX_TIM1_Init+0xcc>
  {
    Error_Handler();
 8000a98:	f000 fcfc 	bl	8001494 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a9c:	2360      	movs	r3, #96	@ 0x60
 8000a9e:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000aac:	2300      	movs	r3, #0
 8000aae:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ab8:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000abc:	2200      	movs	r2, #0
 8000abe:	4619      	mov	r1, r3
 8000ac0:	482a      	ldr	r0, [pc, #168]	@ (8000b6c <MX_TIM1_Init+0x19c>)
 8000ac2:	f005 f847 	bl	8005b54 <HAL_TIM_PWM_ConfigChannel>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d001      	beq.n	8000ad0 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 8000acc:	f000 fce2 	bl	8001494 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000ad0:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000ad4:	2204      	movs	r2, #4
 8000ad6:	4619      	mov	r1, r3
 8000ad8:	4824      	ldr	r0, [pc, #144]	@ (8000b6c <MX_TIM1_Init+0x19c>)
 8000ada:	f005 f83b 	bl	8005b54 <HAL_TIM_PWM_ConfigChannel>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d001      	beq.n	8000ae8 <MX_TIM1_Init+0x118>
  {
    Error_Handler();
 8000ae4:	f000 fcd6 	bl	8001494 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000ae8:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000aec:	2208      	movs	r2, #8
 8000aee:	4619      	mov	r1, r3
 8000af0:	481e      	ldr	r0, [pc, #120]	@ (8000b6c <MX_TIM1_Init+0x19c>)
 8000af2:	f005 f82f 	bl	8005b54 <HAL_TIM_PWM_ConfigChannel>
 8000af6:	4603      	mov	r3, r0
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d001      	beq.n	8000b00 <MX_TIM1_Init+0x130>
  {
    Error_Handler();
 8000afc:	f000 fcca 	bl	8001494 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000b00:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000b04:	220c      	movs	r2, #12
 8000b06:	4619      	mov	r1, r3
 8000b08:	4818      	ldr	r0, [pc, #96]	@ (8000b6c <MX_TIM1_Init+0x19c>)
 8000b0a:	f005 f823 	bl	8005b54 <HAL_TIM_PWM_ConfigChannel>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d001      	beq.n	8000b18 <MX_TIM1_Init+0x148>
  {
    Error_Handler();
 8000b14:	f000 fcbe 	bl	8001494 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000b20:	2300      	movs	r3, #0
 8000b22:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000b24:	2300      	movs	r3, #0
 8000b26:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000b2c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000b30:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000b32:	2300      	movs	r3, #0
 8000b34:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000b36:	2300      	movs	r3, #0
 8000b38:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000b3a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000b3e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000b40:	2300      	movs	r3, #0
 8000b42:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000b44:	2300      	movs	r3, #0
 8000b46:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000b48:	1d3b      	adds	r3, r7, #4
 8000b4a:	4619      	mov	r1, r3
 8000b4c:	4807      	ldr	r0, [pc, #28]	@ (8000b6c <MX_TIM1_Init+0x19c>)
 8000b4e:	f005 fef5 	bl	800693c <HAL_TIMEx_ConfigBreakDeadTime>
 8000b52:	4603      	mov	r3, r0
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d001      	beq.n	8000b5c <MX_TIM1_Init+0x18c>
  {
    Error_Handler();
 8000b58:	f000 fc9c 	bl	8001494 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000b5c:	4803      	ldr	r0, [pc, #12]	@ (8000b6c <MX_TIM1_Init+0x19c>)
 8000b5e:	f000 fe1b 	bl	8001798 <HAL_TIM_MspPostInit>

}
 8000b62:	bf00      	nop
 8000b64:	3770      	adds	r7, #112	@ 0x70
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	24000d64 	.word	0x24000d64
 8000b70:	40010000 	.word	0x40010000

08000b74 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b08e      	sub	sp, #56	@ 0x38
 8000b78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b7a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000b7e:	2200      	movs	r2, #0
 8000b80:	601a      	str	r2, [r3, #0]
 8000b82:	605a      	str	r2, [r3, #4]
 8000b84:	609a      	str	r2, [r3, #8]
 8000b86:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b88:	f107 031c 	add.w	r3, r7, #28
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	601a      	str	r2, [r3, #0]
 8000b90:	605a      	str	r2, [r3, #4]
 8000b92:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b94:	463b      	mov	r3, r7
 8000b96:	2200      	movs	r2, #0
 8000b98:	601a      	str	r2, [r3, #0]
 8000b9a:	605a      	str	r2, [r3, #4]
 8000b9c:	609a      	str	r2, [r3, #8]
 8000b9e:	60da      	str	r2, [r3, #12]
 8000ba0:	611a      	str	r2, [r3, #16]
 8000ba2:	615a      	str	r2, [r3, #20]
 8000ba4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000ba6:	4b39      	ldr	r3, [pc, #228]	@ (8000c8c <MX_TIM2_Init+0x118>)
 8000ba8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000bac:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 274;
 8000bae:	4b37      	ldr	r3, [pc, #220]	@ (8000c8c <MX_TIM2_Init+0x118>)
 8000bb0:	f44f 7289 	mov.w	r2, #274	@ 0x112
 8000bb4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bb6:	4b35      	ldr	r3, [pc, #212]	@ (8000c8c <MX_TIM2_Init+0x118>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 20000;
 8000bbc:	4b33      	ldr	r3, [pc, #204]	@ (8000c8c <MX_TIM2_Init+0x118>)
 8000bbe:	f644 6220 	movw	r2, #20000	@ 0x4e20
 8000bc2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bc4:	4b31      	ldr	r3, [pc, #196]	@ (8000c8c <MX_TIM2_Init+0x118>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bca:	4b30      	ldr	r3, [pc, #192]	@ (8000c8c <MX_TIM2_Init+0x118>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000bd0:	482e      	ldr	r0, [pc, #184]	@ (8000c8c <MX_TIM2_Init+0x118>)
 8000bd2:	f004 fdeb 	bl	80057ac <HAL_TIM_Base_Init>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d001      	beq.n	8000be0 <MX_TIM2_Init+0x6c>
  {
    Error_Handler();
 8000bdc:	f000 fc5a 	bl	8001494 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000be0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000be4:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000be6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000bea:	4619      	mov	r1, r3
 8000bec:	4827      	ldr	r0, [pc, #156]	@ (8000c8c <MX_TIM2_Init+0x118>)
 8000bee:	f005 f8c5 	bl	8005d7c <HAL_TIM_ConfigClockSource>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d001      	beq.n	8000bfc <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 8000bf8:	f000 fc4c 	bl	8001494 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000bfc:	4823      	ldr	r0, [pc, #140]	@ (8000c8c <MX_TIM2_Init+0x118>)
 8000bfe:	f004 fe2c 	bl	800585a <HAL_TIM_PWM_Init>
 8000c02:	4603      	mov	r3, r0
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d001      	beq.n	8000c0c <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8000c08:	f000 fc44 	bl	8001494 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c10:	2300      	movs	r3, #0
 8000c12:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000c14:	f107 031c 	add.w	r3, r7, #28
 8000c18:	4619      	mov	r1, r3
 8000c1a:	481c      	ldr	r0, [pc, #112]	@ (8000c8c <MX_TIM2_Init+0x118>)
 8000c1c:	f005 fdf2 	bl	8006804 <HAL_TIMEx_MasterConfigSynchronization>
 8000c20:	4603      	mov	r3, r0
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d001      	beq.n	8000c2a <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 8000c26:	f000 fc35 	bl	8001494 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c2a:	2360      	movs	r3, #96	@ 0x60
 8000c2c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c32:	2300      	movs	r3, #0
 8000c34:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c36:	2300      	movs	r3, #0
 8000c38:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000c3a:	463b      	mov	r3, r7
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	4619      	mov	r1, r3
 8000c40:	4812      	ldr	r0, [pc, #72]	@ (8000c8c <MX_TIM2_Init+0x118>)
 8000c42:	f004 ff87 	bl	8005b54 <HAL_TIM_PWM_ConfigChannel>
 8000c46:	4603      	mov	r3, r0
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d001      	beq.n	8000c50 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 8000c4c:	f000 fc22 	bl	8001494 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000c50:	463b      	mov	r3, r7
 8000c52:	2208      	movs	r2, #8
 8000c54:	4619      	mov	r1, r3
 8000c56:	480d      	ldr	r0, [pc, #52]	@ (8000c8c <MX_TIM2_Init+0x118>)
 8000c58:	f004 ff7c 	bl	8005b54 <HAL_TIM_PWM_ConfigChannel>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d001      	beq.n	8000c66 <MX_TIM2_Init+0xf2>
  {
    Error_Handler();
 8000c62:	f000 fc17 	bl	8001494 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000c66:	463b      	mov	r3, r7
 8000c68:	220c      	movs	r2, #12
 8000c6a:	4619      	mov	r1, r3
 8000c6c:	4807      	ldr	r0, [pc, #28]	@ (8000c8c <MX_TIM2_Init+0x118>)
 8000c6e:	f004 ff71 	bl	8005b54 <HAL_TIM_PWM_ConfigChannel>
 8000c72:	4603      	mov	r3, r0
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d001      	beq.n	8000c7c <MX_TIM2_Init+0x108>
  {
    Error_Handler();
 8000c78:	f000 fc0c 	bl	8001494 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000c7c:	4803      	ldr	r0, [pc, #12]	@ (8000c8c <MX_TIM2_Init+0x118>)
 8000c7e:	f000 fd8b 	bl	8001798 <HAL_TIM_MspPostInit>

}
 8000c82:	bf00      	nop
 8000c84:	3738      	adds	r7, #56	@ 0x38
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	bf00      	nop
 8000c8c:	24000db0 	.word	0x24000db0

08000c90 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b08e      	sub	sp, #56	@ 0x38
 8000c94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c96:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	601a      	str	r2, [r3, #0]
 8000c9e:	605a      	str	r2, [r3, #4]
 8000ca0:	609a      	str	r2, [r3, #8]
 8000ca2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ca4:	f107 031c 	add.w	r3, r7, #28
 8000ca8:	2200      	movs	r2, #0
 8000caa:	601a      	str	r2, [r3, #0]
 8000cac:	605a      	str	r2, [r3, #4]
 8000cae:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000cb0:	463b      	mov	r3, r7
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	601a      	str	r2, [r3, #0]
 8000cb6:	605a      	str	r2, [r3, #4]
 8000cb8:	609a      	str	r2, [r3, #8]
 8000cba:	60da      	str	r2, [r3, #12]
 8000cbc:	611a      	str	r2, [r3, #16]
 8000cbe:	615a      	str	r2, [r3, #20]
 8000cc0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000cc2:	4b3e      	ldr	r3, [pc, #248]	@ (8000dbc <MX_TIM3_Init+0x12c>)
 8000cc4:	4a3e      	ldr	r2, [pc, #248]	@ (8000dc0 <MX_TIM3_Init+0x130>)
 8000cc6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 274;
 8000cc8:	4b3c      	ldr	r3, [pc, #240]	@ (8000dbc <MX_TIM3_Init+0x12c>)
 8000cca:	f44f 7289 	mov.w	r2, #274	@ 0x112
 8000cce:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cd0:	4b3a      	ldr	r3, [pc, #232]	@ (8000dbc <MX_TIM3_Init+0x12c>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 20000;
 8000cd6:	4b39      	ldr	r3, [pc, #228]	@ (8000dbc <MX_TIM3_Init+0x12c>)
 8000cd8:	f644 6220 	movw	r2, #20000	@ 0x4e20
 8000cdc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cde:	4b37      	ldr	r3, [pc, #220]	@ (8000dbc <MX_TIM3_Init+0x12c>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ce4:	4b35      	ldr	r3, [pc, #212]	@ (8000dbc <MX_TIM3_Init+0x12c>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000cea:	4834      	ldr	r0, [pc, #208]	@ (8000dbc <MX_TIM3_Init+0x12c>)
 8000cec:	f004 fd5e 	bl	80057ac <HAL_TIM_Base_Init>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d001      	beq.n	8000cfa <MX_TIM3_Init+0x6a>
  {
    Error_Handler();
 8000cf6:	f000 fbcd 	bl	8001494 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000cfa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000cfe:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000d00:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000d04:	4619      	mov	r1, r3
 8000d06:	482d      	ldr	r0, [pc, #180]	@ (8000dbc <MX_TIM3_Init+0x12c>)
 8000d08:	f005 f838 	bl	8005d7c <HAL_TIM_ConfigClockSource>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d001      	beq.n	8000d16 <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 8000d12:	f000 fbbf 	bl	8001494 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000d16:	4829      	ldr	r0, [pc, #164]	@ (8000dbc <MX_TIM3_Init+0x12c>)
 8000d18:	f004 fd9f 	bl	800585a <HAL_TIM_PWM_Init>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d001      	beq.n	8000d26 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8000d22:	f000 fbb7 	bl	8001494 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d26:	2300      	movs	r3, #0
 8000d28:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000d2e:	f107 031c 	add.w	r3, r7, #28
 8000d32:	4619      	mov	r1, r3
 8000d34:	4821      	ldr	r0, [pc, #132]	@ (8000dbc <MX_TIM3_Init+0x12c>)
 8000d36:	f005 fd65 	bl	8006804 <HAL_TIMEx_MasterConfigSynchronization>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d001      	beq.n	8000d44 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8000d40:	f000 fba8 	bl	8001494 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d44:	2360      	movs	r3, #96	@ 0x60
 8000d46:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d50:	2300      	movs	r3, #0
 8000d52:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d54:	463b      	mov	r3, r7
 8000d56:	2200      	movs	r2, #0
 8000d58:	4619      	mov	r1, r3
 8000d5a:	4818      	ldr	r0, [pc, #96]	@ (8000dbc <MX_TIM3_Init+0x12c>)
 8000d5c:	f004 fefa 	bl	8005b54 <HAL_TIM_PWM_ConfigChannel>
 8000d60:	4603      	mov	r3, r0
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d001      	beq.n	8000d6a <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 8000d66:	f000 fb95 	bl	8001494 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000d6a:	463b      	mov	r3, r7
 8000d6c:	2204      	movs	r2, #4
 8000d6e:	4619      	mov	r1, r3
 8000d70:	4812      	ldr	r0, [pc, #72]	@ (8000dbc <MX_TIM3_Init+0x12c>)
 8000d72:	f004 feef 	bl	8005b54 <HAL_TIM_PWM_ConfigChannel>
 8000d76:	4603      	mov	r3, r0
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d001      	beq.n	8000d80 <MX_TIM3_Init+0xf0>
  {
    Error_Handler();
 8000d7c:	f000 fb8a 	bl	8001494 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000d80:	463b      	mov	r3, r7
 8000d82:	2208      	movs	r2, #8
 8000d84:	4619      	mov	r1, r3
 8000d86:	480d      	ldr	r0, [pc, #52]	@ (8000dbc <MX_TIM3_Init+0x12c>)
 8000d88:	f004 fee4 	bl	8005b54 <HAL_TIM_PWM_ConfigChannel>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d001      	beq.n	8000d96 <MX_TIM3_Init+0x106>
  {
    Error_Handler();
 8000d92:	f000 fb7f 	bl	8001494 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000d96:	463b      	mov	r3, r7
 8000d98:	220c      	movs	r2, #12
 8000d9a:	4619      	mov	r1, r3
 8000d9c:	4807      	ldr	r0, [pc, #28]	@ (8000dbc <MX_TIM3_Init+0x12c>)
 8000d9e:	f004 fed9 	bl	8005b54 <HAL_TIM_PWM_ConfigChannel>
 8000da2:	4603      	mov	r3, r0
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d001      	beq.n	8000dac <MX_TIM3_Init+0x11c>
  {
    Error_Handler();
 8000da8:	f000 fb74 	bl	8001494 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000dac:	4803      	ldr	r0, [pc, #12]	@ (8000dbc <MX_TIM3_Init+0x12c>)
 8000dae:	f000 fcf3 	bl	8001798 <HAL_TIM_MspPostInit>

}
 8000db2:	bf00      	nop
 8000db4:	3738      	adds	r7, #56	@ 0x38
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	bf00      	nop
 8000dbc:	24000dfc 	.word	0x24000dfc
 8000dc0:	40000400 	.word	0x40000400

08000dc4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b08e      	sub	sp, #56	@ 0x38
 8000dc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000dca:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000dce:	2200      	movs	r2, #0
 8000dd0:	601a      	str	r2, [r3, #0]
 8000dd2:	605a      	str	r2, [r3, #4]
 8000dd4:	609a      	str	r2, [r3, #8]
 8000dd6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dd8:	f107 031c 	add.w	r3, r7, #28
 8000ddc:	2200      	movs	r2, #0
 8000dde:	601a      	str	r2, [r3, #0]
 8000de0:	605a      	str	r2, [r3, #4]
 8000de2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000de4:	463b      	mov	r3, r7
 8000de6:	2200      	movs	r2, #0
 8000de8:	601a      	str	r2, [r3, #0]
 8000dea:	605a      	str	r2, [r3, #4]
 8000dec:	609a      	str	r2, [r3, #8]
 8000dee:	60da      	str	r2, [r3, #12]
 8000df0:	611a      	str	r2, [r3, #16]
 8000df2:	615a      	str	r2, [r3, #20]
 8000df4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000df6:	4b3e      	ldr	r3, [pc, #248]	@ (8000ef0 <MX_TIM4_Init+0x12c>)
 8000df8:	4a3e      	ldr	r2, [pc, #248]	@ (8000ef4 <MX_TIM4_Init+0x130>)
 8000dfa:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 274;
 8000dfc:	4b3c      	ldr	r3, [pc, #240]	@ (8000ef0 <MX_TIM4_Init+0x12c>)
 8000dfe:	f44f 7289 	mov.w	r2, #274	@ 0x112
 8000e02:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e04:	4b3a      	ldr	r3, [pc, #232]	@ (8000ef0 <MX_TIM4_Init+0x12c>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 20000;
 8000e0a:	4b39      	ldr	r3, [pc, #228]	@ (8000ef0 <MX_TIM4_Init+0x12c>)
 8000e0c:	f644 6220 	movw	r2, #20000	@ 0x4e20
 8000e10:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e12:	4b37      	ldr	r3, [pc, #220]	@ (8000ef0 <MX_TIM4_Init+0x12c>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e18:	4b35      	ldr	r3, [pc, #212]	@ (8000ef0 <MX_TIM4_Init+0x12c>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000e1e:	4834      	ldr	r0, [pc, #208]	@ (8000ef0 <MX_TIM4_Init+0x12c>)
 8000e20:	f004 fcc4 	bl	80057ac <HAL_TIM_Base_Init>
 8000e24:	4603      	mov	r3, r0
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d001      	beq.n	8000e2e <MX_TIM4_Init+0x6a>
  {
    Error_Handler();
 8000e2a:	f000 fb33 	bl	8001494 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e2e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e32:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000e34:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000e38:	4619      	mov	r1, r3
 8000e3a:	482d      	ldr	r0, [pc, #180]	@ (8000ef0 <MX_TIM4_Init+0x12c>)
 8000e3c:	f004 ff9e 	bl	8005d7c <HAL_TIM_ConfigClockSource>
 8000e40:	4603      	mov	r3, r0
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d001      	beq.n	8000e4a <MX_TIM4_Init+0x86>
  {
    Error_Handler();
 8000e46:	f000 fb25 	bl	8001494 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000e4a:	4829      	ldr	r0, [pc, #164]	@ (8000ef0 <MX_TIM4_Init+0x12c>)
 8000e4c:	f004 fd05 	bl	800585a <HAL_TIM_PWM_Init>
 8000e50:	4603      	mov	r3, r0
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d001      	beq.n	8000e5a <MX_TIM4_Init+0x96>
  {
    Error_Handler();
 8000e56:	f000 fb1d 	bl	8001494 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000e62:	f107 031c 	add.w	r3, r7, #28
 8000e66:	4619      	mov	r1, r3
 8000e68:	4821      	ldr	r0, [pc, #132]	@ (8000ef0 <MX_TIM4_Init+0x12c>)
 8000e6a:	f005 fccb 	bl	8006804 <HAL_TIMEx_MasterConfigSynchronization>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d001      	beq.n	8000e78 <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 8000e74:	f000 fb0e 	bl	8001494 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e78:	2360      	movs	r3, #96	@ 0x60
 8000e7a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e80:	2300      	movs	r3, #0
 8000e82:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e84:	2300      	movs	r3, #0
 8000e86:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e88:	463b      	mov	r3, r7
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	4619      	mov	r1, r3
 8000e8e:	4818      	ldr	r0, [pc, #96]	@ (8000ef0 <MX_TIM4_Init+0x12c>)
 8000e90:	f004 fe60 	bl	8005b54 <HAL_TIM_PWM_ConfigChannel>
 8000e94:	4603      	mov	r3, r0
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d001      	beq.n	8000e9e <MX_TIM4_Init+0xda>
  {
    Error_Handler();
 8000e9a:	f000 fafb 	bl	8001494 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000e9e:	463b      	mov	r3, r7
 8000ea0:	2204      	movs	r2, #4
 8000ea2:	4619      	mov	r1, r3
 8000ea4:	4812      	ldr	r0, [pc, #72]	@ (8000ef0 <MX_TIM4_Init+0x12c>)
 8000ea6:	f004 fe55 	bl	8005b54 <HAL_TIM_PWM_ConfigChannel>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d001      	beq.n	8000eb4 <MX_TIM4_Init+0xf0>
  {
    Error_Handler();
 8000eb0:	f000 faf0 	bl	8001494 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000eb4:	463b      	mov	r3, r7
 8000eb6:	2208      	movs	r2, #8
 8000eb8:	4619      	mov	r1, r3
 8000eba:	480d      	ldr	r0, [pc, #52]	@ (8000ef0 <MX_TIM4_Init+0x12c>)
 8000ebc:	f004 fe4a 	bl	8005b54 <HAL_TIM_PWM_ConfigChannel>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d001      	beq.n	8000eca <MX_TIM4_Init+0x106>
  {
    Error_Handler();
 8000ec6:	f000 fae5 	bl	8001494 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000eca:	463b      	mov	r3, r7
 8000ecc:	220c      	movs	r2, #12
 8000ece:	4619      	mov	r1, r3
 8000ed0:	4807      	ldr	r0, [pc, #28]	@ (8000ef0 <MX_TIM4_Init+0x12c>)
 8000ed2:	f004 fe3f 	bl	8005b54 <HAL_TIM_PWM_ConfigChannel>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d001      	beq.n	8000ee0 <MX_TIM4_Init+0x11c>
  {
    Error_Handler();
 8000edc:	f000 fada 	bl	8001494 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000ee0:	4803      	ldr	r0, [pc, #12]	@ (8000ef0 <MX_TIM4_Init+0x12c>)
 8000ee2:	f000 fc59 	bl	8001798 <HAL_TIM_MspPostInit>

}
 8000ee6:	bf00      	nop
 8000ee8:	3738      	adds	r7, #56	@ 0x38
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bd80      	pop	{r7, pc}
 8000eee:	bf00      	nop
 8000ef0:	24000e48 	.word	0x24000e48
 8000ef4:	40000800 	.word	0x40000800

08000ef8 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b09c      	sub	sp, #112	@ 0x70
 8000efc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000efe:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8000f02:	2200      	movs	r2, #0
 8000f04:	601a      	str	r2, [r3, #0]
 8000f06:	605a      	str	r2, [r3, #4]
 8000f08:	609a      	str	r2, [r3, #8]
 8000f0a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f0c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000f10:	2200      	movs	r2, #0
 8000f12:	601a      	str	r2, [r3, #0]
 8000f14:	605a      	str	r2, [r3, #4]
 8000f16:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f18:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	601a      	str	r2, [r3, #0]
 8000f20:	605a      	str	r2, [r3, #4]
 8000f22:	609a      	str	r2, [r3, #8]
 8000f24:	60da      	str	r2, [r3, #12]
 8000f26:	611a      	str	r2, [r3, #16]
 8000f28:	615a      	str	r2, [r3, #20]
 8000f2a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000f2c:	1d3b      	adds	r3, r7, #4
 8000f2e:	2234      	movs	r2, #52	@ 0x34
 8000f30:	2100      	movs	r1, #0
 8000f32:	4618      	mov	r0, r3
 8000f34:	f00b fb46 	bl	800c5c4 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000f38:	4b4a      	ldr	r3, [pc, #296]	@ (8001064 <MX_TIM8_Init+0x16c>)
 8000f3a:	4a4b      	ldr	r2, [pc, #300]	@ (8001068 <MX_TIM8_Init+0x170>)
 8000f3c:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 274;
 8000f3e:	4b49      	ldr	r3, [pc, #292]	@ (8001064 <MX_TIM8_Init+0x16c>)
 8000f40:	f44f 7289 	mov.w	r2, #274	@ 0x112
 8000f44:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f46:	4b47      	ldr	r3, [pc, #284]	@ (8001064 <MX_TIM8_Init+0x16c>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 20000;
 8000f4c:	4b45      	ldr	r3, [pc, #276]	@ (8001064 <MX_TIM8_Init+0x16c>)
 8000f4e:	f644 6220 	movw	r2, #20000	@ 0x4e20
 8000f52:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f54:	4b43      	ldr	r3, [pc, #268]	@ (8001064 <MX_TIM8_Init+0x16c>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000f5a:	4b42      	ldr	r3, [pc, #264]	@ (8001064 <MX_TIM8_Init+0x16c>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f60:	4b40      	ldr	r3, [pc, #256]	@ (8001064 <MX_TIM8_Init+0x16c>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8000f66:	483f      	ldr	r0, [pc, #252]	@ (8001064 <MX_TIM8_Init+0x16c>)
 8000f68:	f004 fc20 	bl	80057ac <HAL_TIM_Base_Init>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d001      	beq.n	8000f76 <MX_TIM8_Init+0x7e>
  {
    Error_Handler();
 8000f72:	f000 fa8f 	bl	8001494 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f76:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f7a:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8000f7c:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8000f80:	4619      	mov	r1, r3
 8000f82:	4838      	ldr	r0, [pc, #224]	@ (8001064 <MX_TIM8_Init+0x16c>)
 8000f84:	f004 fefa 	bl	8005d7c <HAL_TIM_ConfigClockSource>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d001      	beq.n	8000f92 <MX_TIM8_Init+0x9a>
  {
    Error_Handler();
 8000f8e:	f000 fa81 	bl	8001494 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8000f92:	4834      	ldr	r0, [pc, #208]	@ (8001064 <MX_TIM8_Init+0x16c>)
 8000f94:	f004 fc61 	bl	800585a <HAL_TIM_PWM_Init>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d001      	beq.n	8000fa2 <MX_TIM8_Init+0xaa>
  {
    Error_Handler();
 8000f9e:	f000 fa79 	bl	8001494 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000faa:	2300      	movs	r3, #0
 8000fac:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000fae:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000fb2:	4619      	mov	r1, r3
 8000fb4:	482b      	ldr	r0, [pc, #172]	@ (8001064 <MX_TIM8_Init+0x16c>)
 8000fb6:	f005 fc25 	bl	8006804 <HAL_TIMEx_MasterConfigSynchronization>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d001      	beq.n	8000fc4 <MX_TIM8_Init+0xcc>
  {
    Error_Handler();
 8000fc0:	f000 fa68 	bl	8001494 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000fc4:	2360      	movs	r3, #96	@ 0x60
 8000fc6:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000fe0:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	4619      	mov	r1, r3
 8000fe8:	481e      	ldr	r0, [pc, #120]	@ (8001064 <MX_TIM8_Init+0x16c>)
 8000fea:	f004 fdb3 	bl	8005b54 <HAL_TIM_PWM_ConfigChannel>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d001      	beq.n	8000ff8 <MX_TIM8_Init+0x100>
  {
    Error_Handler();
 8000ff4:	f000 fa4e 	bl	8001494 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000ff8:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000ffc:	220c      	movs	r2, #12
 8000ffe:	4619      	mov	r1, r3
 8001000:	4818      	ldr	r0, [pc, #96]	@ (8001064 <MX_TIM8_Init+0x16c>)
 8001002:	f004 fda7 	bl	8005b54 <HAL_TIM_PWM_ConfigChannel>
 8001006:	4603      	mov	r3, r0
 8001008:	2b00      	cmp	r3, #0
 800100a:	d001      	beq.n	8001010 <MX_TIM8_Init+0x118>
  {
    Error_Handler();
 800100c:	f000 fa42 	bl	8001494 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001010:	2300      	movs	r3, #0
 8001012:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001014:	2300      	movs	r3, #0
 8001016:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001018:	2300      	movs	r3, #0
 800101a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800101c:	2300      	movs	r3, #0
 800101e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001020:	2300      	movs	r3, #0
 8001022:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001024:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001028:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800102a:	2300      	movs	r3, #0
 800102c:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800102e:	2300      	movs	r3, #0
 8001030:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001032:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001036:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001038:	2300      	movs	r3, #0
 800103a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800103c:	2300      	movs	r3, #0
 800103e:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001040:	1d3b      	adds	r3, r7, #4
 8001042:	4619      	mov	r1, r3
 8001044:	4807      	ldr	r0, [pc, #28]	@ (8001064 <MX_TIM8_Init+0x16c>)
 8001046:	f005 fc79 	bl	800693c <HAL_TIMEx_ConfigBreakDeadTime>
 800104a:	4603      	mov	r3, r0
 800104c:	2b00      	cmp	r3, #0
 800104e:	d001      	beq.n	8001054 <MX_TIM8_Init+0x15c>
  {
    Error_Handler();
 8001050:	f000 fa20 	bl	8001494 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8001054:	4803      	ldr	r0, [pc, #12]	@ (8001064 <MX_TIM8_Init+0x16c>)
 8001056:	f000 fb9f 	bl	8001798 <HAL_TIM_MspPostInit>

}
 800105a:	bf00      	nop
 800105c:	3770      	adds	r7, #112	@ 0x70
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	24000e94 	.word	0x24000e94
 8001068:	40010400 	.word	0x40010400

0800106c <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b08e      	sub	sp, #56	@ 0x38
 8001070:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001072:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001076:	2200      	movs	r2, #0
 8001078:	601a      	str	r2, [r3, #0]
 800107a:	605a      	str	r2, [r3, #4]
 800107c:	609a      	str	r2, [r3, #8]
 800107e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001080:	f107 031c 	add.w	r3, r7, #28
 8001084:	2200      	movs	r2, #0
 8001086:	601a      	str	r2, [r3, #0]
 8001088:	605a      	str	r2, [r3, #4]
 800108a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800108c:	463b      	mov	r3, r7
 800108e:	2200      	movs	r2, #0
 8001090:	601a      	str	r2, [r3, #0]
 8001092:	605a      	str	r2, [r3, #4]
 8001094:	609a      	str	r2, [r3, #8]
 8001096:	60da      	str	r2, [r3, #12]
 8001098:	611a      	str	r2, [r3, #16]
 800109a:	615a      	str	r2, [r3, #20]
 800109c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 800109e:	4b2d      	ldr	r3, [pc, #180]	@ (8001154 <MX_TIM12_Init+0xe8>)
 80010a0:	4a2d      	ldr	r2, [pc, #180]	@ (8001158 <MX_TIM12_Init+0xec>)
 80010a2:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 274;
 80010a4:	4b2b      	ldr	r3, [pc, #172]	@ (8001154 <MX_TIM12_Init+0xe8>)
 80010a6:	f44f 7289 	mov.w	r2, #274	@ 0x112
 80010aa:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010ac:	4b29      	ldr	r3, [pc, #164]	@ (8001154 <MX_TIM12_Init+0xe8>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 20000;
 80010b2:	4b28      	ldr	r3, [pc, #160]	@ (8001154 <MX_TIM12_Init+0xe8>)
 80010b4:	f644 6220 	movw	r2, #20000	@ 0x4e20
 80010b8:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010ba:	4b26      	ldr	r3, [pc, #152]	@ (8001154 <MX_TIM12_Init+0xe8>)
 80010bc:	2200      	movs	r2, #0
 80010be:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010c0:	4b24      	ldr	r3, [pc, #144]	@ (8001154 <MX_TIM12_Init+0xe8>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 80010c6:	4823      	ldr	r0, [pc, #140]	@ (8001154 <MX_TIM12_Init+0xe8>)
 80010c8:	f004 fb70 	bl	80057ac <HAL_TIM_Base_Init>
 80010cc:	4603      	mov	r3, r0
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d001      	beq.n	80010d6 <MX_TIM12_Init+0x6a>
  {
    Error_Handler();
 80010d2:	f000 f9df 	bl	8001494 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010d6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80010da:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 80010dc:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80010e0:	4619      	mov	r1, r3
 80010e2:	481c      	ldr	r0, [pc, #112]	@ (8001154 <MX_TIM12_Init+0xe8>)
 80010e4:	f004 fe4a 	bl	8005d7c <HAL_TIM_ConfigClockSource>
 80010e8:	4603      	mov	r3, r0
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d001      	beq.n	80010f2 <MX_TIM12_Init+0x86>
  {
    Error_Handler();
 80010ee:	f000 f9d1 	bl	8001494 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 80010f2:	4818      	ldr	r0, [pc, #96]	@ (8001154 <MX_TIM12_Init+0xe8>)
 80010f4:	f004 fbb1 	bl	800585a <HAL_TIM_PWM_Init>
 80010f8:	4603      	mov	r3, r0
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d001      	beq.n	8001102 <MX_TIM12_Init+0x96>
  {
    Error_Handler();
 80010fe:	f000 f9c9 	bl	8001494 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001102:	2300      	movs	r3, #0
 8001104:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001106:	2300      	movs	r3, #0
 8001108:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim12, &sMasterConfig) != HAL_OK)
 800110a:	f107 031c 	add.w	r3, r7, #28
 800110e:	4619      	mov	r1, r3
 8001110:	4810      	ldr	r0, [pc, #64]	@ (8001154 <MX_TIM12_Init+0xe8>)
 8001112:	f005 fb77 	bl	8006804 <HAL_TIMEx_MasterConfigSynchronization>
 8001116:	4603      	mov	r3, r0
 8001118:	2b00      	cmp	r3, #0
 800111a:	d001      	beq.n	8001120 <MX_TIM12_Init+0xb4>
  {
    Error_Handler();
 800111c:	f000 f9ba 	bl	8001494 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001120:	2360      	movs	r3, #96	@ 0x60
 8001122:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001124:	2300      	movs	r3, #0
 8001126:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001128:	2300      	movs	r3, #0
 800112a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800112c:	2300      	movs	r3, #0
 800112e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001130:	463b      	mov	r3, r7
 8001132:	2204      	movs	r2, #4
 8001134:	4619      	mov	r1, r3
 8001136:	4807      	ldr	r0, [pc, #28]	@ (8001154 <MX_TIM12_Init+0xe8>)
 8001138:	f004 fd0c 	bl	8005b54 <HAL_TIM_PWM_ConfigChannel>
 800113c:	4603      	mov	r3, r0
 800113e:	2b00      	cmp	r3, #0
 8001140:	d001      	beq.n	8001146 <MX_TIM12_Init+0xda>
  {
    Error_Handler();
 8001142:	f000 f9a7 	bl	8001494 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8001146:	4803      	ldr	r0, [pc, #12]	@ (8001154 <MX_TIM12_Init+0xe8>)
 8001148:	f000 fb26 	bl	8001798 <HAL_TIM_MspPostInit>

}
 800114c:	bf00      	nop
 800114e:	3738      	adds	r7, #56	@ 0x38
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}
 8001154:	24000ee0 	.word	0x24000ee0
 8001158:	40001800 	.word	0x40001800

0800115c <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001160:	4b22      	ldr	r3, [pc, #136]	@ (80011ec <MX_UART4_Init+0x90>)
 8001162:	4a23      	ldr	r2, [pc, #140]	@ (80011f0 <MX_UART4_Init+0x94>)
 8001164:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8001166:	4b21      	ldr	r3, [pc, #132]	@ (80011ec <MX_UART4_Init+0x90>)
 8001168:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800116c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800116e:	4b1f      	ldr	r3, [pc, #124]	@ (80011ec <MX_UART4_Init+0x90>)
 8001170:	2200      	movs	r2, #0
 8001172:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001174:	4b1d      	ldr	r3, [pc, #116]	@ (80011ec <MX_UART4_Init+0x90>)
 8001176:	2200      	movs	r2, #0
 8001178:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800117a:	4b1c      	ldr	r3, [pc, #112]	@ (80011ec <MX_UART4_Init+0x90>)
 800117c:	2200      	movs	r2, #0
 800117e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001180:	4b1a      	ldr	r3, [pc, #104]	@ (80011ec <MX_UART4_Init+0x90>)
 8001182:	220c      	movs	r2, #12
 8001184:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001186:	4b19      	ldr	r3, [pc, #100]	@ (80011ec <MX_UART4_Init+0x90>)
 8001188:	2200      	movs	r2, #0
 800118a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800118c:	4b17      	ldr	r3, [pc, #92]	@ (80011ec <MX_UART4_Init+0x90>)
 800118e:	2200      	movs	r2, #0
 8001190:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001192:	4b16      	ldr	r3, [pc, #88]	@ (80011ec <MX_UART4_Init+0x90>)
 8001194:	2200      	movs	r2, #0
 8001196:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001198:	4b14      	ldr	r3, [pc, #80]	@ (80011ec <MX_UART4_Init+0x90>)
 800119a:	2200      	movs	r2, #0
 800119c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800119e:	4b13      	ldr	r3, [pc, #76]	@ (80011ec <MX_UART4_Init+0x90>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80011a4:	4811      	ldr	r0, [pc, #68]	@ (80011ec <MX_UART4_Init+0x90>)
 80011a6:	f005 fc55 	bl	8006a54 <HAL_UART_Init>
 80011aa:	4603      	mov	r3, r0
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d001      	beq.n	80011b4 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 80011b0:	f000 f970 	bl	8001494 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80011b4:	2100      	movs	r1, #0
 80011b6:	480d      	ldr	r0, [pc, #52]	@ (80011ec <MX_UART4_Init+0x90>)
 80011b8:	f006 feb7 	bl	8007f2a <HAL_UARTEx_SetTxFifoThreshold>
 80011bc:	4603      	mov	r3, r0
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d001      	beq.n	80011c6 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 80011c2:	f000 f967 	bl	8001494 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80011c6:	2100      	movs	r1, #0
 80011c8:	4808      	ldr	r0, [pc, #32]	@ (80011ec <MX_UART4_Init+0x90>)
 80011ca:	f006 feec 	bl	8007fa6 <HAL_UARTEx_SetRxFifoThreshold>
 80011ce:	4603      	mov	r3, r0
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d001      	beq.n	80011d8 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 80011d4:	f000 f95e 	bl	8001494 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 80011d8:	4804      	ldr	r0, [pc, #16]	@ (80011ec <MX_UART4_Init+0x90>)
 80011da:	f006 fe6d 	bl	8007eb8 <HAL_UARTEx_DisableFifoMode>
 80011de:	4603      	mov	r3, r0
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d001      	beq.n	80011e8 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 80011e4:	f000 f956 	bl	8001494 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80011e8:	bf00      	nop
 80011ea:	bd80      	pop	{r7, pc}
 80011ec:	24000f2c 	.word	0x24000f2c
 80011f0:	40004c00 	.word	0x40004c00

080011f4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80011f8:	4b22      	ldr	r3, [pc, #136]	@ (8001284 <MX_USART3_UART_Init+0x90>)
 80011fa:	4a23      	ldr	r2, [pc, #140]	@ (8001288 <MX_USART3_UART_Init+0x94>)
 80011fc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80011fe:	4b21      	ldr	r3, [pc, #132]	@ (8001284 <MX_USART3_UART_Init+0x90>)
 8001200:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001204:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001206:	4b1f      	ldr	r3, [pc, #124]	@ (8001284 <MX_USART3_UART_Init+0x90>)
 8001208:	2200      	movs	r2, #0
 800120a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800120c:	4b1d      	ldr	r3, [pc, #116]	@ (8001284 <MX_USART3_UART_Init+0x90>)
 800120e:	2200      	movs	r2, #0
 8001210:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001212:	4b1c      	ldr	r3, [pc, #112]	@ (8001284 <MX_USART3_UART_Init+0x90>)
 8001214:	2200      	movs	r2, #0
 8001216:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001218:	4b1a      	ldr	r3, [pc, #104]	@ (8001284 <MX_USART3_UART_Init+0x90>)
 800121a:	220c      	movs	r2, #12
 800121c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800121e:	4b19      	ldr	r3, [pc, #100]	@ (8001284 <MX_USART3_UART_Init+0x90>)
 8001220:	2200      	movs	r2, #0
 8001222:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001224:	4b17      	ldr	r3, [pc, #92]	@ (8001284 <MX_USART3_UART_Init+0x90>)
 8001226:	2200      	movs	r2, #0
 8001228:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800122a:	4b16      	ldr	r3, [pc, #88]	@ (8001284 <MX_USART3_UART_Init+0x90>)
 800122c:	2200      	movs	r2, #0
 800122e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001230:	4b14      	ldr	r3, [pc, #80]	@ (8001284 <MX_USART3_UART_Init+0x90>)
 8001232:	2200      	movs	r2, #0
 8001234:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001236:	4b13      	ldr	r3, [pc, #76]	@ (8001284 <MX_USART3_UART_Init+0x90>)
 8001238:	2200      	movs	r2, #0
 800123a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800123c:	4811      	ldr	r0, [pc, #68]	@ (8001284 <MX_USART3_UART_Init+0x90>)
 800123e:	f005 fc09 	bl	8006a54 <HAL_UART_Init>
 8001242:	4603      	mov	r3, r0
 8001244:	2b00      	cmp	r3, #0
 8001246:	d001      	beq.n	800124c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001248:	f000 f924 	bl	8001494 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800124c:	2100      	movs	r1, #0
 800124e:	480d      	ldr	r0, [pc, #52]	@ (8001284 <MX_USART3_UART_Init+0x90>)
 8001250:	f006 fe6b 	bl	8007f2a <HAL_UARTEx_SetTxFifoThreshold>
 8001254:	4603      	mov	r3, r0
 8001256:	2b00      	cmp	r3, #0
 8001258:	d001      	beq.n	800125e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800125a:	f000 f91b 	bl	8001494 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800125e:	2100      	movs	r1, #0
 8001260:	4808      	ldr	r0, [pc, #32]	@ (8001284 <MX_USART3_UART_Init+0x90>)
 8001262:	f006 fea0 	bl	8007fa6 <HAL_UARTEx_SetRxFifoThreshold>
 8001266:	4603      	mov	r3, r0
 8001268:	2b00      	cmp	r3, #0
 800126a:	d001      	beq.n	8001270 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 800126c:	f000 f912 	bl	8001494 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001270:	4804      	ldr	r0, [pc, #16]	@ (8001284 <MX_USART3_UART_Init+0x90>)
 8001272:	f006 fe21 	bl	8007eb8 <HAL_UARTEx_DisableFifoMode>
 8001276:	4603      	mov	r3, r0
 8001278:	2b00      	cmp	r3, #0
 800127a:	d001      	beq.n	8001280 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 800127c:	f000 f90a 	bl	8001494 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001280:	bf00      	nop
 8001282:	bd80      	pop	{r7, pc}
 8001284:	24000fc0 	.word	0x24000fc0
 8001288:	40004800 	.word	0x40004800

0800128c <MX_USB_OTG_HS_USB_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_USB_Init(void)
{
 800128c:	b480      	push	{r7}
 800128e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8001290:	bf00      	nop
 8001292:	46bd      	mov	sp, r7
 8001294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001298:	4770      	bx	lr
	...

0800129c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b08c      	sub	sp, #48	@ 0x30
 80012a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012a2:	f107 031c 	add.w	r3, r7, #28
 80012a6:	2200      	movs	r2, #0
 80012a8:	601a      	str	r2, [r3, #0]
 80012aa:	605a      	str	r2, [r3, #4]
 80012ac:	609a      	str	r2, [r3, #8]
 80012ae:	60da      	str	r2, [r3, #12]
 80012b0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012b2:	4b71      	ldr	r3, [pc, #452]	@ (8001478 <MX_GPIO_Init+0x1dc>)
 80012b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012b8:	4a6f      	ldr	r2, [pc, #444]	@ (8001478 <MX_GPIO_Init+0x1dc>)
 80012ba:	f043 0304 	orr.w	r3, r3, #4
 80012be:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80012c2:	4b6d      	ldr	r3, [pc, #436]	@ (8001478 <MX_GPIO_Init+0x1dc>)
 80012c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012c8:	f003 0304 	and.w	r3, r3, #4
 80012cc:	61bb      	str	r3, [r7, #24]
 80012ce:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80012d0:	4b69      	ldr	r3, [pc, #420]	@ (8001478 <MX_GPIO_Init+0x1dc>)
 80012d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012d6:	4a68      	ldr	r2, [pc, #416]	@ (8001478 <MX_GPIO_Init+0x1dc>)
 80012d8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80012dc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80012e0:	4b65      	ldr	r3, [pc, #404]	@ (8001478 <MX_GPIO_Init+0x1dc>)
 80012e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80012ea:	617b      	str	r3, [r7, #20]
 80012ec:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012ee:	4b62      	ldr	r3, [pc, #392]	@ (8001478 <MX_GPIO_Init+0x1dc>)
 80012f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012f4:	4a60      	ldr	r2, [pc, #384]	@ (8001478 <MX_GPIO_Init+0x1dc>)
 80012f6:	f043 0301 	orr.w	r3, r3, #1
 80012fa:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80012fe:	4b5e      	ldr	r3, [pc, #376]	@ (8001478 <MX_GPIO_Init+0x1dc>)
 8001300:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001304:	f003 0301 	and.w	r3, r3, #1
 8001308:	613b      	str	r3, [r7, #16]
 800130a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800130c:	4b5a      	ldr	r3, [pc, #360]	@ (8001478 <MX_GPIO_Init+0x1dc>)
 800130e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001312:	4a59      	ldr	r2, [pc, #356]	@ (8001478 <MX_GPIO_Init+0x1dc>)
 8001314:	f043 0302 	orr.w	r3, r3, #2
 8001318:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800131c:	4b56      	ldr	r3, [pc, #344]	@ (8001478 <MX_GPIO_Init+0x1dc>)
 800131e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001322:	f003 0302 	and.w	r3, r3, #2
 8001326:	60fb      	str	r3, [r7, #12]
 8001328:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800132a:	4b53      	ldr	r3, [pc, #332]	@ (8001478 <MX_GPIO_Init+0x1dc>)
 800132c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001330:	4a51      	ldr	r2, [pc, #324]	@ (8001478 <MX_GPIO_Init+0x1dc>)
 8001332:	f043 0310 	orr.w	r3, r3, #16
 8001336:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800133a:	4b4f      	ldr	r3, [pc, #316]	@ (8001478 <MX_GPIO_Init+0x1dc>)
 800133c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001340:	f003 0310 	and.w	r3, r3, #16
 8001344:	60bb      	str	r3, [r7, #8]
 8001346:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001348:	4b4b      	ldr	r3, [pc, #300]	@ (8001478 <MX_GPIO_Init+0x1dc>)
 800134a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800134e:	4a4a      	ldr	r2, [pc, #296]	@ (8001478 <MX_GPIO_Init+0x1dc>)
 8001350:	f043 0308 	orr.w	r3, r3, #8
 8001354:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001358:	4b47      	ldr	r3, [pc, #284]	@ (8001478 <MX_GPIO_Init+0x1dc>)
 800135a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800135e:	f003 0308 	and.w	r3, r3, #8
 8001362:	607b      	str	r3, [r7, #4]
 8001364:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001366:	4b44      	ldr	r3, [pc, #272]	@ (8001478 <MX_GPIO_Init+0x1dc>)
 8001368:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800136c:	4a42      	ldr	r2, [pc, #264]	@ (8001478 <MX_GPIO_Init+0x1dc>)
 800136e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001372:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001376:	4b40      	ldr	r3, [pc, #256]	@ (8001478 <MX_GPIO_Init+0x1dc>)
 8001378:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800137c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001380:	603b      	str	r3, [r7, #0]
 8001382:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|LED_RED_Pin, GPIO_PIN_RESET);
 8001384:	2200      	movs	r2, #0
 8001386:	f244 0101 	movw	r1, #16385	@ 0x4001
 800138a:	483c      	ldr	r0, [pc, #240]	@ (800147c <MX_GPIO_Init+0x1e0>)
 800138c:	f001 fc92 	bl	8002cb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, GPIO_PIN_RESET);
 8001390:	2200      	movs	r2, #0
 8001392:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001396:	483a      	ldr	r0, [pc, #232]	@ (8001480 <MX_GPIO_Init+0x1e4>)
 8001398:	f001 fc8c 	bl	8002cb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);
 800139c:	2200      	movs	r2, #0
 800139e:	2102      	movs	r1, #2
 80013a0:	4838      	ldr	r0, [pc, #224]	@ (8001484 <MX_GPIO_Init+0x1e8>)
 80013a2:	f001 fc87 	bl	8002cb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80013a6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80013aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013ac:	2300      	movs	r3, #0
 80013ae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b0:	2300      	movs	r3, #0
 80013b2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80013b4:	f107 031c 	add.w	r3, r7, #28
 80013b8:	4619      	mov	r1, r3
 80013ba:	4833      	ldr	r0, [pc, #204]	@ (8001488 <MX_GPIO_Init+0x1ec>)
 80013bc:	f001 fad2 	bl	8002964 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_GREEN_Pin LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_RED_Pin;
 80013c0:	f244 0301 	movw	r3, #16385	@ 0x4001
 80013c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013c6:	2301      	movs	r3, #1
 80013c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ca:	2300      	movs	r3, #0
 80013cc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ce:	2300      	movs	r3, #0
 80013d0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013d2:	f107 031c 	add.w	r3, r7, #28
 80013d6:	4619      	mov	r1, r3
 80013d8:	4828      	ldr	r0, [pc, #160]	@ (800147c <MX_GPIO_Init+0x1e0>)
 80013da:	f001 fac3 	bl	8002964 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80013de:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80013e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013e4:	2301      	movs	r3, #1
 80013e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e8:	2300      	movs	r3, #0
 80013ea:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ec:	2300      	movs	r3, #0
 80013ee:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013f0:	f107 031c 	add.w	r3, r7, #28
 80013f4:	4619      	mov	r1, r3
 80013f6:	4822      	ldr	r0, [pc, #136]	@ (8001480 <MX_GPIO_Init+0x1e4>)
 80013f8:	f001 fab4 	bl	8002964 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 80013fc:	2380      	movs	r3, #128	@ 0x80
 80013fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001400:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001404:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001406:	2300      	movs	r3, #0
 8001408:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 800140a:	f107 031c 	add.w	r3, r7, #28
 800140e:	4619      	mov	r1, r3
 8001410:	481e      	ldr	r0, [pc, #120]	@ (800148c <MX_GPIO_Init+0x1f0>)
 8001412:	f001 faa7 	bl	8002964 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 8001416:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800141a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800141c:	2300      	movs	r3, #0
 800141e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001420:	2300      	movs	r3, #0
 8001422:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001424:	f107 031c 	add.w	r3, r7, #28
 8001428:	4619      	mov	r1, r3
 800142a:	4819      	ldr	r0, [pc, #100]	@ (8001490 <MX_GPIO_Init+0x1f4>)
 800142c:	f001 fa9a 	bl	8002964 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_ID_Pin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 8001430:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001434:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001436:	2302      	movs	r3, #2
 8001438:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800143a:	2300      	movs	r3, #0
 800143c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800143e:	2300      	movs	r3, #0
 8001440:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 8001442:	230a      	movs	r3, #10
 8001444:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 8001446:	f107 031c 	add.w	r3, r7, #28
 800144a:	4619      	mov	r1, r3
 800144c:	4810      	ldr	r0, [pc, #64]	@ (8001490 <MX_GPIO_Init+0x1f4>)
 800144e:	f001 fa89 	bl	8002964 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_YELLOW_Pin */
  GPIO_InitStruct.Pin = LED_YELLOW_Pin;
 8001452:	2302      	movs	r3, #2
 8001454:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001456:	2301      	movs	r3, #1
 8001458:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800145a:	2300      	movs	r3, #0
 800145c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800145e:	2300      	movs	r3, #0
 8001460:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LED_YELLOW_GPIO_Port, &GPIO_InitStruct);
 8001462:	f107 031c 	add.w	r3, r7, #28
 8001466:	4619      	mov	r1, r3
 8001468:	4806      	ldr	r0, [pc, #24]	@ (8001484 <MX_GPIO_Init+0x1e8>)
 800146a:	f001 fa7b 	bl	8002964 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800146e:	bf00      	nop
 8001470:	3730      	adds	r7, #48	@ 0x30
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop
 8001478:	58024400 	.word	0x58024400
 800147c:	58020400 	.word	0x58020400
 8001480:	58020c00 	.word	0x58020c00
 8001484:	58021000 	.word	0x58021000
 8001488:	58020800 	.word	0x58020800
 800148c:	58021800 	.word	0x58021800
 8001490:	58020000 	.word	0x58020000

08001494 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001494:	b480      	push	{r7}
 8001496:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001498:	b672      	cpsid	i
}
 800149a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800149c:	bf00      	nop
 800149e:	e7fd      	b.n	800149c <Error_Handler+0x8>

080014a0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014a0:	b480      	push	{r7}
 80014a2:	b083      	sub	sp, #12
 80014a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014a6:	4b0a      	ldr	r3, [pc, #40]	@ (80014d0 <HAL_MspInit+0x30>)
 80014a8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80014ac:	4a08      	ldr	r2, [pc, #32]	@ (80014d0 <HAL_MspInit+0x30>)
 80014ae:	f043 0302 	orr.w	r3, r3, #2
 80014b2:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80014b6:	4b06      	ldr	r3, [pc, #24]	@ (80014d0 <HAL_MspInit+0x30>)
 80014b8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80014bc:	f003 0302 	and.w	r3, r3, #2
 80014c0:	607b      	str	r3, [r7, #4]
 80014c2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014c4:	bf00      	nop
 80014c6:	370c      	adds	r7, #12
 80014c8:	46bd      	mov	sp, r7
 80014ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ce:	4770      	bx	lr
 80014d0:	58024400 	.word	0x58024400

080014d4 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b08e      	sub	sp, #56	@ 0x38
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014dc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80014e0:	2200      	movs	r2, #0
 80014e2:	601a      	str	r2, [r3, #0]
 80014e4:	605a      	str	r2, [r3, #4]
 80014e6:	609a      	str	r2, [r3, #8]
 80014e8:	60da      	str	r2, [r3, #12]
 80014ea:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	4a59      	ldr	r2, [pc, #356]	@ (8001658 <HAL_ETH_MspInit+0x184>)
 80014f2:	4293      	cmp	r3, r2
 80014f4:	f040 80ab 	bne.w	800164e <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 80014f8:	4b58      	ldr	r3, [pc, #352]	@ (800165c <HAL_ETH_MspInit+0x188>)
 80014fa:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80014fe:	4a57      	ldr	r2, [pc, #348]	@ (800165c <HAL_ETH_MspInit+0x188>)
 8001500:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001504:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8001508:	4b54      	ldr	r3, [pc, #336]	@ (800165c <HAL_ETH_MspInit+0x188>)
 800150a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800150e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001512:	623b      	str	r3, [r7, #32]
 8001514:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8001516:	4b51      	ldr	r3, [pc, #324]	@ (800165c <HAL_ETH_MspInit+0x188>)
 8001518:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800151c:	4a4f      	ldr	r2, [pc, #316]	@ (800165c <HAL_ETH_MspInit+0x188>)
 800151e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001522:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8001526:	4b4d      	ldr	r3, [pc, #308]	@ (800165c <HAL_ETH_MspInit+0x188>)
 8001528:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800152c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001530:	61fb      	str	r3, [r7, #28]
 8001532:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8001534:	4b49      	ldr	r3, [pc, #292]	@ (800165c <HAL_ETH_MspInit+0x188>)
 8001536:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800153a:	4a48      	ldr	r2, [pc, #288]	@ (800165c <HAL_ETH_MspInit+0x188>)
 800153c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001540:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8001544:	4b45      	ldr	r3, [pc, #276]	@ (800165c <HAL_ETH_MspInit+0x188>)
 8001546:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800154a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800154e:	61bb      	str	r3, [r7, #24]
 8001550:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001552:	4b42      	ldr	r3, [pc, #264]	@ (800165c <HAL_ETH_MspInit+0x188>)
 8001554:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001558:	4a40      	ldr	r2, [pc, #256]	@ (800165c <HAL_ETH_MspInit+0x188>)
 800155a:	f043 0304 	orr.w	r3, r3, #4
 800155e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001562:	4b3e      	ldr	r3, [pc, #248]	@ (800165c <HAL_ETH_MspInit+0x188>)
 8001564:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001568:	f003 0304 	and.w	r3, r3, #4
 800156c:	617b      	str	r3, [r7, #20]
 800156e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001570:	4b3a      	ldr	r3, [pc, #232]	@ (800165c <HAL_ETH_MspInit+0x188>)
 8001572:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001576:	4a39      	ldr	r2, [pc, #228]	@ (800165c <HAL_ETH_MspInit+0x188>)
 8001578:	f043 0301 	orr.w	r3, r3, #1
 800157c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001580:	4b36      	ldr	r3, [pc, #216]	@ (800165c <HAL_ETH_MspInit+0x188>)
 8001582:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001586:	f003 0301 	and.w	r3, r3, #1
 800158a:	613b      	str	r3, [r7, #16]
 800158c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800158e:	4b33      	ldr	r3, [pc, #204]	@ (800165c <HAL_ETH_MspInit+0x188>)
 8001590:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001594:	4a31      	ldr	r2, [pc, #196]	@ (800165c <HAL_ETH_MspInit+0x188>)
 8001596:	f043 0302 	orr.w	r3, r3, #2
 800159a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800159e:	4b2f      	ldr	r3, [pc, #188]	@ (800165c <HAL_ETH_MspInit+0x188>)
 80015a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80015a4:	f003 0302 	and.w	r3, r3, #2
 80015a8:	60fb      	str	r3, [r7, #12]
 80015aa:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80015ac:	4b2b      	ldr	r3, [pc, #172]	@ (800165c <HAL_ETH_MspInit+0x188>)
 80015ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80015b2:	4a2a      	ldr	r2, [pc, #168]	@ (800165c <HAL_ETH_MspInit+0x188>)
 80015b4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80015b8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80015bc:	4b27      	ldr	r3, [pc, #156]	@ (800165c <HAL_ETH_MspInit+0x188>)
 80015be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80015c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80015c6:	60bb      	str	r3, [r7, #8]
 80015c8:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80015ca:	2332      	movs	r3, #50	@ 0x32
 80015cc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ce:	2302      	movs	r3, #2
 80015d0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d2:	2300      	movs	r3, #0
 80015d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015d6:	2300      	movs	r3, #0
 80015d8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80015da:	230b      	movs	r3, #11
 80015dc:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015de:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015e2:	4619      	mov	r1, r3
 80015e4:	481e      	ldr	r0, [pc, #120]	@ (8001660 <HAL_ETH_MspInit+0x18c>)
 80015e6:	f001 f9bd 	bl	8002964 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80015ea:	2386      	movs	r3, #134	@ 0x86
 80015ec:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ee:	2302      	movs	r3, #2
 80015f0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f2:	2300      	movs	r3, #0
 80015f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015f6:	2300      	movs	r3, #0
 80015f8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80015fa:	230b      	movs	r3, #11
 80015fc:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015fe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001602:	4619      	mov	r1, r3
 8001604:	4817      	ldr	r0, [pc, #92]	@ (8001664 <HAL_ETH_MspInit+0x190>)
 8001606:	f001 f9ad 	bl	8002964 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800160a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800160e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001610:	2302      	movs	r3, #2
 8001612:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001614:	2300      	movs	r3, #0
 8001616:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001618:	2300      	movs	r3, #0
 800161a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800161c:	230b      	movs	r3, #11
 800161e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001620:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001624:	4619      	mov	r1, r3
 8001626:	4810      	ldr	r0, [pc, #64]	@ (8001668 <HAL_ETH_MspInit+0x194>)
 8001628:	f001 f99c 	bl	8002964 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800162c:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8001630:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001632:	2302      	movs	r3, #2
 8001634:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001636:	2300      	movs	r3, #0
 8001638:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800163a:	2300      	movs	r3, #0
 800163c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800163e:	230b      	movs	r3, #11
 8001640:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001642:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001646:	4619      	mov	r1, r3
 8001648:	4808      	ldr	r0, [pc, #32]	@ (800166c <HAL_ETH_MspInit+0x198>)
 800164a:	f001 f98b 	bl	8002964 <HAL_GPIO_Init>

  /* USER CODE END ETH_MspInit 1 */

  }

}
 800164e:	bf00      	nop
 8001650:	3738      	adds	r7, #56	@ 0x38
 8001652:	46bd      	mov	sp, r7
 8001654:	bd80      	pop	{r7, pc}
 8001656:	bf00      	nop
 8001658:	40028000 	.word	0x40028000
 800165c:	58024400 	.word	0x58024400
 8001660:	58020800 	.word	0x58020800
 8001664:	58020000 	.word	0x58020000
 8001668:	58020400 	.word	0x58020400
 800166c:	58021800 	.word	0x58021800

08001670 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001670:	b480      	push	{r7}
 8001672:	b089      	sub	sp, #36	@ 0x24
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	4a40      	ldr	r2, [pc, #256]	@ (8001780 <HAL_TIM_Base_MspInit+0x110>)
 800167e:	4293      	cmp	r3, r2
 8001680:	d10f      	bne.n	80016a2 <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001682:	4b40      	ldr	r3, [pc, #256]	@ (8001784 <HAL_TIM_Base_MspInit+0x114>)
 8001684:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001688:	4a3e      	ldr	r2, [pc, #248]	@ (8001784 <HAL_TIM_Base_MspInit+0x114>)
 800168a:	f043 0301 	orr.w	r3, r3, #1
 800168e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001692:	4b3c      	ldr	r3, [pc, #240]	@ (8001784 <HAL_TIM_Base_MspInit+0x114>)
 8001694:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001698:	f003 0301 	and.w	r3, r3, #1
 800169c:	61fb      	str	r3, [r7, #28]
 800169e:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 80016a0:	e067      	b.n	8001772 <HAL_TIM_Base_MspInit+0x102>
  else if(htim_base->Instance==TIM2)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80016aa:	d10f      	bne.n	80016cc <HAL_TIM_Base_MspInit+0x5c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80016ac:	4b35      	ldr	r3, [pc, #212]	@ (8001784 <HAL_TIM_Base_MspInit+0x114>)
 80016ae:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80016b2:	4a34      	ldr	r2, [pc, #208]	@ (8001784 <HAL_TIM_Base_MspInit+0x114>)
 80016b4:	f043 0301 	orr.w	r3, r3, #1
 80016b8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80016bc:	4b31      	ldr	r3, [pc, #196]	@ (8001784 <HAL_TIM_Base_MspInit+0x114>)
 80016be:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80016c2:	f003 0301 	and.w	r3, r3, #1
 80016c6:	61bb      	str	r3, [r7, #24]
 80016c8:	69bb      	ldr	r3, [r7, #24]
}
 80016ca:	e052      	b.n	8001772 <HAL_TIM_Base_MspInit+0x102>
  else if(htim_base->Instance==TIM3)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	4a2d      	ldr	r2, [pc, #180]	@ (8001788 <HAL_TIM_Base_MspInit+0x118>)
 80016d2:	4293      	cmp	r3, r2
 80016d4:	d10f      	bne.n	80016f6 <HAL_TIM_Base_MspInit+0x86>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80016d6:	4b2b      	ldr	r3, [pc, #172]	@ (8001784 <HAL_TIM_Base_MspInit+0x114>)
 80016d8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80016dc:	4a29      	ldr	r2, [pc, #164]	@ (8001784 <HAL_TIM_Base_MspInit+0x114>)
 80016de:	f043 0302 	orr.w	r3, r3, #2
 80016e2:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80016e6:	4b27      	ldr	r3, [pc, #156]	@ (8001784 <HAL_TIM_Base_MspInit+0x114>)
 80016e8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80016ec:	f003 0302 	and.w	r3, r3, #2
 80016f0:	617b      	str	r3, [r7, #20]
 80016f2:	697b      	ldr	r3, [r7, #20]
}
 80016f4:	e03d      	b.n	8001772 <HAL_TIM_Base_MspInit+0x102>
  else if(htim_base->Instance==TIM4)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	4a24      	ldr	r2, [pc, #144]	@ (800178c <HAL_TIM_Base_MspInit+0x11c>)
 80016fc:	4293      	cmp	r3, r2
 80016fe:	d10f      	bne.n	8001720 <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001700:	4b20      	ldr	r3, [pc, #128]	@ (8001784 <HAL_TIM_Base_MspInit+0x114>)
 8001702:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001706:	4a1f      	ldr	r2, [pc, #124]	@ (8001784 <HAL_TIM_Base_MspInit+0x114>)
 8001708:	f043 0304 	orr.w	r3, r3, #4
 800170c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001710:	4b1c      	ldr	r3, [pc, #112]	@ (8001784 <HAL_TIM_Base_MspInit+0x114>)
 8001712:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001716:	f003 0304 	and.w	r3, r3, #4
 800171a:	613b      	str	r3, [r7, #16]
 800171c:	693b      	ldr	r3, [r7, #16]
}
 800171e:	e028      	b.n	8001772 <HAL_TIM_Base_MspInit+0x102>
  else if(htim_base->Instance==TIM8)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	4a1a      	ldr	r2, [pc, #104]	@ (8001790 <HAL_TIM_Base_MspInit+0x120>)
 8001726:	4293      	cmp	r3, r2
 8001728:	d10f      	bne.n	800174a <HAL_TIM_Base_MspInit+0xda>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800172a:	4b16      	ldr	r3, [pc, #88]	@ (8001784 <HAL_TIM_Base_MspInit+0x114>)
 800172c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001730:	4a14      	ldr	r2, [pc, #80]	@ (8001784 <HAL_TIM_Base_MspInit+0x114>)
 8001732:	f043 0302 	orr.w	r3, r3, #2
 8001736:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800173a:	4b12      	ldr	r3, [pc, #72]	@ (8001784 <HAL_TIM_Base_MspInit+0x114>)
 800173c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001740:	f003 0302 	and.w	r3, r3, #2
 8001744:	60fb      	str	r3, [r7, #12]
 8001746:	68fb      	ldr	r3, [r7, #12]
}
 8001748:	e013      	b.n	8001772 <HAL_TIM_Base_MspInit+0x102>
  else if(htim_base->Instance==TIM12)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	4a11      	ldr	r2, [pc, #68]	@ (8001794 <HAL_TIM_Base_MspInit+0x124>)
 8001750:	4293      	cmp	r3, r2
 8001752:	d10e      	bne.n	8001772 <HAL_TIM_Base_MspInit+0x102>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8001754:	4b0b      	ldr	r3, [pc, #44]	@ (8001784 <HAL_TIM_Base_MspInit+0x114>)
 8001756:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800175a:	4a0a      	ldr	r2, [pc, #40]	@ (8001784 <HAL_TIM_Base_MspInit+0x114>)
 800175c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001760:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001764:	4b07      	ldr	r3, [pc, #28]	@ (8001784 <HAL_TIM_Base_MspInit+0x114>)
 8001766:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800176a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800176e:	60bb      	str	r3, [r7, #8]
 8001770:	68bb      	ldr	r3, [r7, #8]
}
 8001772:	bf00      	nop
 8001774:	3724      	adds	r7, #36	@ 0x24
 8001776:	46bd      	mov	sp, r7
 8001778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177c:	4770      	bx	lr
 800177e:	bf00      	nop
 8001780:	40010000 	.word	0x40010000
 8001784:	58024400 	.word	0x58024400
 8001788:	40000400 	.word	0x40000400
 800178c:	40000800 	.word	0x40000800
 8001790:	40010400 	.word	0x40010400
 8001794:	40001800 	.word	0x40001800

08001798 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b090      	sub	sp, #64	@ 0x40
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017a0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80017a4:	2200      	movs	r2, #0
 80017a6:	601a      	str	r2, [r3, #0]
 80017a8:	605a      	str	r2, [r3, #4]
 80017aa:	609a      	str	r2, [r3, #8]
 80017ac:	60da      	str	r2, [r3, #12]
 80017ae:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	4aa0      	ldr	r2, [pc, #640]	@ (8001a38 <HAL_TIM_MspPostInit+0x2a0>)
 80017b6:	4293      	cmp	r3, r2
 80017b8:	d120      	bne.n	80017fc <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80017ba:	4ba0      	ldr	r3, [pc, #640]	@ (8001a3c <HAL_TIM_MspPostInit+0x2a4>)
 80017bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80017c0:	4a9e      	ldr	r2, [pc, #632]	@ (8001a3c <HAL_TIM_MspPostInit+0x2a4>)
 80017c2:	f043 0310 	orr.w	r3, r3, #16
 80017c6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80017ca:	4b9c      	ldr	r3, [pc, #624]	@ (8001a3c <HAL_TIM_MspPostInit+0x2a4>)
 80017cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80017d0:	f003 0310 	and.w	r3, r3, #16
 80017d4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80017d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_14;
 80017d8:	f44f 43d4 	mov.w	r3, #27136	@ 0x6a00
 80017dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017de:	2302      	movs	r3, #2
 80017e0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e2:	2300      	movs	r3, #0
 80017e4:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017e6:	2300      	movs	r3, #0
 80017e8:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80017ea:	2301      	movs	r3, #1
 80017ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80017ee:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80017f2:	4619      	mov	r1, r3
 80017f4:	4892      	ldr	r0, [pc, #584]	@ (8001a40 <HAL_TIM_MspPostInit+0x2a8>)
 80017f6:	f001 f8b5 	bl	8002964 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 80017fa:	e119      	b.n	8001a30 <HAL_TIM_MspPostInit+0x298>
  else if(htim->Instance==TIM2)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001804:	d13f      	bne.n	8001886 <HAL_TIM_MspPostInit+0xee>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001806:	4b8d      	ldr	r3, [pc, #564]	@ (8001a3c <HAL_TIM_MspPostInit+0x2a4>)
 8001808:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800180c:	4a8b      	ldr	r2, [pc, #556]	@ (8001a3c <HAL_TIM_MspPostInit+0x2a4>)
 800180e:	f043 0301 	orr.w	r3, r3, #1
 8001812:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001816:	4b89      	ldr	r3, [pc, #548]	@ (8001a3c <HAL_TIM_MspPostInit+0x2a4>)
 8001818:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800181c:	f003 0301 	and.w	r3, r3, #1
 8001820:	627b      	str	r3, [r7, #36]	@ 0x24
 8001822:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001824:	4b85      	ldr	r3, [pc, #532]	@ (8001a3c <HAL_TIM_MspPostInit+0x2a4>)
 8001826:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800182a:	4a84      	ldr	r2, [pc, #528]	@ (8001a3c <HAL_TIM_MspPostInit+0x2a4>)
 800182c:	f043 0302 	orr.w	r3, r3, #2
 8001830:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001834:	4b81      	ldr	r3, [pc, #516]	@ (8001a3c <HAL_TIM_MspPostInit+0x2a4>)
 8001836:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800183a:	f003 0302 	and.w	r3, r3, #2
 800183e:	623b      	str	r3, [r7, #32]
 8001840:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001842:	2320      	movs	r3, #32
 8001844:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001846:	2302      	movs	r3, #2
 8001848:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800184a:	2300      	movs	r3, #0
 800184c:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800184e:	2300      	movs	r3, #0
 8001850:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001852:	2301      	movs	r3, #1
 8001854:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001856:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800185a:	4619      	mov	r1, r3
 800185c:	4879      	ldr	r0, [pc, #484]	@ (8001a44 <HAL_TIM_MspPostInit+0x2ac>)
 800185e:	f001 f881 	bl	8002964 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001862:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001866:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001868:	2302      	movs	r3, #2
 800186a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800186c:	2300      	movs	r3, #0
 800186e:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001870:	2300      	movs	r3, #0
 8001872:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001874:	2301      	movs	r3, #1
 8001876:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001878:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800187c:	4619      	mov	r1, r3
 800187e:	4872      	ldr	r0, [pc, #456]	@ (8001a48 <HAL_TIM_MspPostInit+0x2b0>)
 8001880:	f001 f870 	bl	8002964 <HAL_GPIO_Init>
}
 8001884:	e0d4      	b.n	8001a30 <HAL_TIM_MspPostInit+0x298>
  else if(htim->Instance==TIM3)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	4a70      	ldr	r2, [pc, #448]	@ (8001a4c <HAL_TIM_MspPostInit+0x2b4>)
 800188c:	4293      	cmp	r3, r2
 800188e:	d15e      	bne.n	800194e <HAL_TIM_MspPostInit+0x1b6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001890:	4b6a      	ldr	r3, [pc, #424]	@ (8001a3c <HAL_TIM_MspPostInit+0x2a4>)
 8001892:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001896:	4a69      	ldr	r2, [pc, #420]	@ (8001a3c <HAL_TIM_MspPostInit+0x2a4>)
 8001898:	f043 0301 	orr.w	r3, r3, #1
 800189c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80018a0:	4b66      	ldr	r3, [pc, #408]	@ (8001a3c <HAL_TIM_MspPostInit+0x2a4>)
 80018a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80018a6:	f003 0301 	and.w	r3, r3, #1
 80018aa:	61fb      	str	r3, [r7, #28]
 80018ac:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018ae:	4b63      	ldr	r3, [pc, #396]	@ (8001a3c <HAL_TIM_MspPostInit+0x2a4>)
 80018b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80018b4:	4a61      	ldr	r2, [pc, #388]	@ (8001a3c <HAL_TIM_MspPostInit+0x2a4>)
 80018b6:	f043 0302 	orr.w	r3, r3, #2
 80018ba:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80018be:	4b5f      	ldr	r3, [pc, #380]	@ (8001a3c <HAL_TIM_MspPostInit+0x2a4>)
 80018c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80018c4:	f003 0302 	and.w	r3, r3, #2
 80018c8:	61bb      	str	r3, [r7, #24]
 80018ca:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80018cc:	4b5b      	ldr	r3, [pc, #364]	@ (8001a3c <HAL_TIM_MspPostInit+0x2a4>)
 80018ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80018d2:	4a5a      	ldr	r2, [pc, #360]	@ (8001a3c <HAL_TIM_MspPostInit+0x2a4>)
 80018d4:	f043 0304 	orr.w	r3, r3, #4
 80018d8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80018dc:	4b57      	ldr	r3, [pc, #348]	@ (8001a3c <HAL_TIM_MspPostInit+0x2a4>)
 80018de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80018e2:	f003 0304 	and.w	r3, r3, #4
 80018e6:	617b      	str	r3, [r7, #20]
 80018e8:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80018ea:	2340      	movs	r3, #64	@ 0x40
 80018ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018ee:	2302      	movs	r3, #2
 80018f0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f2:	2300      	movs	r3, #0
 80018f4:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018f6:	2300      	movs	r3, #0
 80018f8:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80018fa:	2302      	movs	r3, #2
 80018fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018fe:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001902:	4619      	mov	r1, r3
 8001904:	484f      	ldr	r0, [pc, #316]	@ (8001a44 <HAL_TIM_MspPostInit+0x2ac>)
 8001906:	f001 f82d 	bl	8002964 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800190a:	2302      	movs	r3, #2
 800190c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800190e:	2302      	movs	r3, #2
 8001910:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001912:	2300      	movs	r3, #0
 8001914:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001916:	2300      	movs	r3, #0
 8001918:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800191a:	2302      	movs	r3, #2
 800191c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800191e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001922:	4619      	mov	r1, r3
 8001924:	4848      	ldr	r0, [pc, #288]	@ (8001a48 <HAL_TIM_MspPostInit+0x2b0>)
 8001926:	f001 f81d 	bl	8002964 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 800192a:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 800192e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001930:	2302      	movs	r3, #2
 8001932:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001934:	2300      	movs	r3, #0
 8001936:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001938:	2300      	movs	r3, #0
 800193a:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800193c:	2302      	movs	r3, #2
 800193e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001940:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001944:	4619      	mov	r1, r3
 8001946:	4842      	ldr	r0, [pc, #264]	@ (8001a50 <HAL_TIM_MspPostInit+0x2b8>)
 8001948:	f001 f80c 	bl	8002964 <HAL_GPIO_Init>
}
 800194c:	e070      	b.n	8001a30 <HAL_TIM_MspPostInit+0x298>
  else if(htim->Instance==TIM4)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	4a40      	ldr	r2, [pc, #256]	@ (8001a54 <HAL_TIM_MspPostInit+0x2bc>)
 8001954:	4293      	cmp	r3, r2
 8001956:	d120      	bne.n	800199a <HAL_TIM_MspPostInit+0x202>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001958:	4b38      	ldr	r3, [pc, #224]	@ (8001a3c <HAL_TIM_MspPostInit+0x2a4>)
 800195a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800195e:	4a37      	ldr	r2, [pc, #220]	@ (8001a3c <HAL_TIM_MspPostInit+0x2a4>)
 8001960:	f043 0308 	orr.w	r3, r3, #8
 8001964:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001968:	4b34      	ldr	r3, [pc, #208]	@ (8001a3c <HAL_TIM_MspPostInit+0x2a4>)
 800196a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800196e:	f003 0308 	and.w	r3, r3, #8
 8001972:	613b      	str	r3, [r7, #16]
 8001974:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001976:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 800197a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800197c:	2302      	movs	r3, #2
 800197e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001980:	2300      	movs	r3, #0
 8001982:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001984:	2300      	movs	r3, #0
 8001986:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001988:	2302      	movs	r3, #2
 800198a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800198c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001990:	4619      	mov	r1, r3
 8001992:	4831      	ldr	r0, [pc, #196]	@ (8001a58 <HAL_TIM_MspPostInit+0x2c0>)
 8001994:	f000 ffe6 	bl	8002964 <HAL_GPIO_Init>
}
 8001998:	e04a      	b.n	8001a30 <HAL_TIM_MspPostInit+0x298>
  else if(htim->Instance==TIM8)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	4a2f      	ldr	r2, [pc, #188]	@ (8001a5c <HAL_TIM_MspPostInit+0x2c4>)
 80019a0:	4293      	cmp	r3, r2
 80019a2:	d120      	bne.n	80019e6 <HAL_TIM_MspPostInit+0x24e>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80019a4:	4b25      	ldr	r3, [pc, #148]	@ (8001a3c <HAL_TIM_MspPostInit+0x2a4>)
 80019a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80019aa:	4a24      	ldr	r2, [pc, #144]	@ (8001a3c <HAL_TIM_MspPostInit+0x2a4>)
 80019ac:	f043 0304 	orr.w	r3, r3, #4
 80019b0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80019b4:	4b21      	ldr	r3, [pc, #132]	@ (8001a3c <HAL_TIM_MspPostInit+0x2a4>)
 80019b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80019ba:	f003 0304 	and.w	r3, r3, #4
 80019be:	60fb      	str	r3, [r7, #12]
 80019c0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 80019c2:	f44f 7310 	mov.w	r3, #576	@ 0x240
 80019c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019c8:	2302      	movs	r3, #2
 80019ca:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019cc:	2300      	movs	r3, #0
 80019ce:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019d0:	2300      	movs	r3, #0
 80019d2:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80019d4:	2303      	movs	r3, #3
 80019d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019d8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80019dc:	4619      	mov	r1, r3
 80019de:	481c      	ldr	r0, [pc, #112]	@ (8001a50 <HAL_TIM_MspPostInit+0x2b8>)
 80019e0:	f000 ffc0 	bl	8002964 <HAL_GPIO_Init>
}
 80019e4:	e024      	b.n	8001a30 <HAL_TIM_MspPostInit+0x298>
  else if(htim->Instance==TIM12)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	4a1d      	ldr	r2, [pc, #116]	@ (8001a60 <HAL_TIM_MspPostInit+0x2c8>)
 80019ec:	4293      	cmp	r3, r2
 80019ee:	d11f      	bne.n	8001a30 <HAL_TIM_MspPostInit+0x298>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019f0:	4b12      	ldr	r3, [pc, #72]	@ (8001a3c <HAL_TIM_MspPostInit+0x2a4>)
 80019f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80019f6:	4a11      	ldr	r2, [pc, #68]	@ (8001a3c <HAL_TIM_MspPostInit+0x2a4>)
 80019f8:	f043 0302 	orr.w	r3, r3, #2
 80019fc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001a00:	4b0e      	ldr	r3, [pc, #56]	@ (8001a3c <HAL_TIM_MspPostInit+0x2a4>)
 8001a02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a06:	f003 0302 	and.w	r3, r3, #2
 8001a0a:	60bb      	str	r3, [r7, #8]
 8001a0c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001a0e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001a12:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a14:	2302      	movs	r3, #2
 8001a16:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM12;
 8001a20:	2302      	movs	r3, #2
 8001a22:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a24:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001a28:	4619      	mov	r1, r3
 8001a2a:	4807      	ldr	r0, [pc, #28]	@ (8001a48 <HAL_TIM_MspPostInit+0x2b0>)
 8001a2c:	f000 ff9a 	bl	8002964 <HAL_GPIO_Init>
}
 8001a30:	bf00      	nop
 8001a32:	3740      	adds	r7, #64	@ 0x40
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bd80      	pop	{r7, pc}
 8001a38:	40010000 	.word	0x40010000
 8001a3c:	58024400 	.word	0x58024400
 8001a40:	58021000 	.word	0x58021000
 8001a44:	58020000 	.word	0x58020000
 8001a48:	58020400 	.word	0x58020400
 8001a4c:	40000400 	.word	0x40000400
 8001a50:	58020800 	.word	0x58020800
 8001a54:	40000800 	.word	0x40000800
 8001a58:	58020c00 	.word	0x58020c00
 8001a5c:	40010400 	.word	0x40010400
 8001a60:	40001800 	.word	0x40001800

08001a64 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b0ba      	sub	sp, #232	@ 0xe8
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a6c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001a70:	2200      	movs	r2, #0
 8001a72:	601a      	str	r2, [r3, #0]
 8001a74:	605a      	str	r2, [r3, #4]
 8001a76:	609a      	str	r2, [r3, #8]
 8001a78:	60da      	str	r2, [r3, #12]
 8001a7a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001a7c:	f107 0318 	add.w	r3, r7, #24
 8001a80:	22b8      	movs	r2, #184	@ 0xb8
 8001a82:	2100      	movs	r1, #0
 8001a84:	4618      	mov	r0, r3
 8001a86:	f00a fd9d 	bl	800c5c4 <memset>
  if(huart->Instance==UART4)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	4a4d      	ldr	r2, [pc, #308]	@ (8001bc4 <HAL_UART_MspInit+0x160>)
 8001a90:	4293      	cmp	r3, r2
 8001a92:	d147      	bne.n	8001b24 <HAL_UART_MspInit+0xc0>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8001a94:	f04f 0202 	mov.w	r2, #2
 8001a98:	f04f 0300 	mov.w	r3, #0
 8001a9c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001aa6:	f107 0318 	add.w	r3, r7, #24
 8001aaa:	4618      	mov	r0, r3
 8001aac:	f002 f8bc 	bl	8003c28 <HAL_RCCEx_PeriphCLKConfig>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d001      	beq.n	8001aba <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8001ab6:	f7ff fced 	bl	8001494 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001aba:	4b43      	ldr	r3, [pc, #268]	@ (8001bc8 <HAL_UART_MspInit+0x164>)
 8001abc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001ac0:	4a41      	ldr	r2, [pc, #260]	@ (8001bc8 <HAL_UART_MspInit+0x164>)
 8001ac2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001ac6:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001aca:	4b3f      	ldr	r3, [pc, #252]	@ (8001bc8 <HAL_UART_MspInit+0x164>)
 8001acc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001ad0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001ad4:	617b      	str	r3, [r7, #20]
 8001ad6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ad8:	4b3b      	ldr	r3, [pc, #236]	@ (8001bc8 <HAL_UART_MspInit+0x164>)
 8001ada:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ade:	4a3a      	ldr	r2, [pc, #232]	@ (8001bc8 <HAL_UART_MspInit+0x164>)
 8001ae0:	f043 0304 	orr.w	r3, r3, #4
 8001ae4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001ae8:	4b37      	ldr	r3, [pc, #220]	@ (8001bc8 <HAL_UART_MspInit+0x164>)
 8001aea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001aee:	f003 0304 	and.w	r3, r3, #4
 8001af2:	613b      	str	r3, [r7, #16]
 8001af4:	693b      	ldr	r3, [r7, #16]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001af6:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001afa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001afe:	2302      	movs	r3, #2
 8001b00:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b04:	2300      	movs	r3, #0
 8001b06:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001b10:	2308      	movs	r3, #8
 8001b12:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b16:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001b1a:	4619      	mov	r1, r3
 8001b1c:	482b      	ldr	r0, [pc, #172]	@ (8001bcc <HAL_UART_MspInit+0x168>)
 8001b1e:	f000 ff21 	bl	8002964 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001b22:	e04b      	b.n	8001bbc <HAL_UART_MspInit+0x158>
  else if(huart->Instance==USART3)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4a29      	ldr	r2, [pc, #164]	@ (8001bd0 <HAL_UART_MspInit+0x16c>)
 8001b2a:	4293      	cmp	r3, r2
 8001b2c:	d146      	bne.n	8001bbc <HAL_UART_MspInit+0x158>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001b2e:	f04f 0202 	mov.w	r2, #2
 8001b32:	f04f 0300 	mov.w	r3, #0
 8001b36:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b40:	f107 0318 	add.w	r3, r7, #24
 8001b44:	4618      	mov	r0, r3
 8001b46:	f002 f86f 	bl	8003c28 <HAL_RCCEx_PeriphCLKConfig>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d001      	beq.n	8001b54 <HAL_UART_MspInit+0xf0>
      Error_Handler();
 8001b50:	f7ff fca0 	bl	8001494 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001b54:	4b1c      	ldr	r3, [pc, #112]	@ (8001bc8 <HAL_UART_MspInit+0x164>)
 8001b56:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001b5a:	4a1b      	ldr	r2, [pc, #108]	@ (8001bc8 <HAL_UART_MspInit+0x164>)
 8001b5c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001b60:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001b64:	4b18      	ldr	r3, [pc, #96]	@ (8001bc8 <HAL_UART_MspInit+0x164>)
 8001b66:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001b6a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001b6e:	60fb      	str	r3, [r7, #12]
 8001b70:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b72:	4b15      	ldr	r3, [pc, #84]	@ (8001bc8 <HAL_UART_MspInit+0x164>)
 8001b74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001b78:	4a13      	ldr	r2, [pc, #76]	@ (8001bc8 <HAL_UART_MspInit+0x164>)
 8001b7a:	f043 0308 	orr.w	r3, r3, #8
 8001b7e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001b82:	4b11      	ldr	r3, [pc, #68]	@ (8001bc8 <HAL_UART_MspInit+0x164>)
 8001b84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001b88:	f003 0308 	and.w	r3, r3, #8
 8001b8c:	60bb      	str	r3, [r7, #8]
 8001b8e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLK_VCP_RX_Pin|STLK_VCP_TX_Pin;
 8001b90:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001b94:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b98:	2302      	movs	r3, #2
 8001b9a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001baa:	2307      	movs	r3, #7
 8001bac:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001bb0:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001bb4:	4619      	mov	r1, r3
 8001bb6:	4807      	ldr	r0, [pc, #28]	@ (8001bd4 <HAL_UART_MspInit+0x170>)
 8001bb8:	f000 fed4 	bl	8002964 <HAL_GPIO_Init>
}
 8001bbc:	bf00      	nop
 8001bbe:	37e8      	adds	r7, #232	@ 0xe8
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	bd80      	pop	{r7, pc}
 8001bc4:	40004c00 	.word	0x40004c00
 8001bc8:	58024400 	.word	0x58024400
 8001bcc:	58020800 	.word	0x58020800
 8001bd0:	40004800 	.word	0x40004800
 8001bd4:	58020c00 	.word	0x58020c00

08001bd8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001bdc:	bf00      	nop
 8001bde:	e7fd      	b.n	8001bdc <NMI_Handler+0x4>

08001be0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001be0:	b480      	push	{r7}
 8001be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001be4:	bf00      	nop
 8001be6:	e7fd      	b.n	8001be4 <HardFault_Handler+0x4>

08001be8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001be8:	b480      	push	{r7}
 8001bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001bec:	bf00      	nop
 8001bee:	e7fd      	b.n	8001bec <MemManage_Handler+0x4>

08001bf0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001bf4:	bf00      	nop
 8001bf6:	e7fd      	b.n	8001bf4 <BusFault_Handler+0x4>

08001bf8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001bfc:	bf00      	nop
 8001bfe:	e7fd      	b.n	8001bfc <UsageFault_Handler+0x4>

08001c00 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c00:	b480      	push	{r7}
 8001c02:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c04:	bf00      	nop
 8001c06:	46bd      	mov	sp, r7
 8001c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0c:	4770      	bx	lr

08001c0e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c0e:	b480      	push	{r7}
 8001c10:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c12:	bf00      	nop
 8001c14:	46bd      	mov	sp, r7
 8001c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1a:	4770      	bx	lr

08001c1c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c20:	bf00      	nop
 8001c22:	46bd      	mov	sp, r7
 8001c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c28:	4770      	bx	lr

08001c2a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c2a:	b580      	push	{r7, lr}
 8001c2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c2e:	f000 f94d 	bl	8001ecc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c32:	bf00      	nop
 8001c34:	bd80      	pop	{r7, pc}
	...

08001c38 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b086      	sub	sp, #24
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c40:	4a14      	ldr	r2, [pc, #80]	@ (8001c94 <_sbrk+0x5c>)
 8001c42:	4b15      	ldr	r3, [pc, #84]	@ (8001c98 <_sbrk+0x60>)
 8001c44:	1ad3      	subs	r3, r2, r3
 8001c46:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c48:	697b      	ldr	r3, [r7, #20]
 8001c4a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c4c:	4b13      	ldr	r3, [pc, #76]	@ (8001c9c <_sbrk+0x64>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d102      	bne.n	8001c5a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c54:	4b11      	ldr	r3, [pc, #68]	@ (8001c9c <_sbrk+0x64>)
 8001c56:	4a12      	ldr	r2, [pc, #72]	@ (8001ca0 <_sbrk+0x68>)
 8001c58:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c5a:	4b10      	ldr	r3, [pc, #64]	@ (8001c9c <_sbrk+0x64>)
 8001c5c:	681a      	ldr	r2, [r3, #0]
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	4413      	add	r3, r2
 8001c62:	693a      	ldr	r2, [r7, #16]
 8001c64:	429a      	cmp	r2, r3
 8001c66:	d207      	bcs.n	8001c78 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c68:	f00a fcb4 	bl	800c5d4 <__errno>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	220c      	movs	r2, #12
 8001c70:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c72:	f04f 33ff 	mov.w	r3, #4294967295
 8001c76:	e009      	b.n	8001c8c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c78:	4b08      	ldr	r3, [pc, #32]	@ (8001c9c <_sbrk+0x64>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c7e:	4b07      	ldr	r3, [pc, #28]	@ (8001c9c <_sbrk+0x64>)
 8001c80:	681a      	ldr	r2, [r3, #0]
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	4413      	add	r3, r2
 8001c86:	4a05      	ldr	r2, [pc, #20]	@ (8001c9c <_sbrk+0x64>)
 8001c88:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c8a:	68fb      	ldr	r3, [r7, #12]
}
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	3718      	adds	r7, #24
 8001c90:	46bd      	mov	sp, r7
 8001c92:	bd80      	pop	{r7, pc}
 8001c94:	24050000 	.word	0x24050000
 8001c98:	00000400 	.word	0x00000400
 8001c9c:	2400105c 	.word	0x2400105c
 8001ca0:	240035e0 	.word	0x240035e0

08001ca4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001ca8:	4b32      	ldr	r3, [pc, #200]	@ (8001d74 <SystemInit+0xd0>)
 8001caa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001cae:	4a31      	ldr	r2, [pc, #196]	@ (8001d74 <SystemInit+0xd0>)
 8001cb0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001cb4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001cb8:	4b2f      	ldr	r3, [pc, #188]	@ (8001d78 <SystemInit+0xd4>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f003 030f 	and.w	r3, r3, #15
 8001cc0:	2b06      	cmp	r3, #6
 8001cc2:	d807      	bhi.n	8001cd4 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001cc4:	4b2c      	ldr	r3, [pc, #176]	@ (8001d78 <SystemInit+0xd4>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f023 030f 	bic.w	r3, r3, #15
 8001ccc:	4a2a      	ldr	r2, [pc, #168]	@ (8001d78 <SystemInit+0xd4>)
 8001cce:	f043 0307 	orr.w	r3, r3, #7
 8001cd2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001cd4:	4b29      	ldr	r3, [pc, #164]	@ (8001d7c <SystemInit+0xd8>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4a28      	ldr	r2, [pc, #160]	@ (8001d7c <SystemInit+0xd8>)
 8001cda:	f043 0301 	orr.w	r3, r3, #1
 8001cde:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001ce0:	4b26      	ldr	r3, [pc, #152]	@ (8001d7c <SystemInit+0xd8>)
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001ce6:	4b25      	ldr	r3, [pc, #148]	@ (8001d7c <SystemInit+0xd8>)
 8001ce8:	681a      	ldr	r2, [r3, #0]
 8001cea:	4924      	ldr	r1, [pc, #144]	@ (8001d7c <SystemInit+0xd8>)
 8001cec:	4b24      	ldr	r3, [pc, #144]	@ (8001d80 <SystemInit+0xdc>)
 8001cee:	4013      	ands	r3, r2
 8001cf0:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001cf2:	4b21      	ldr	r3, [pc, #132]	@ (8001d78 <SystemInit+0xd4>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f003 0308 	and.w	r3, r3, #8
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d007      	beq.n	8001d0e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001cfe:	4b1e      	ldr	r3, [pc, #120]	@ (8001d78 <SystemInit+0xd4>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f023 030f 	bic.w	r3, r3, #15
 8001d06:	4a1c      	ldr	r2, [pc, #112]	@ (8001d78 <SystemInit+0xd4>)
 8001d08:	f043 0307 	orr.w	r3, r3, #7
 8001d0c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001d0e:	4b1b      	ldr	r3, [pc, #108]	@ (8001d7c <SystemInit+0xd8>)
 8001d10:	2200      	movs	r2, #0
 8001d12:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001d14:	4b19      	ldr	r3, [pc, #100]	@ (8001d7c <SystemInit+0xd8>)
 8001d16:	2200      	movs	r2, #0
 8001d18:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001d1a:	4b18      	ldr	r3, [pc, #96]	@ (8001d7c <SystemInit+0xd8>)
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001d20:	4b16      	ldr	r3, [pc, #88]	@ (8001d7c <SystemInit+0xd8>)
 8001d22:	4a18      	ldr	r2, [pc, #96]	@ (8001d84 <SystemInit+0xe0>)
 8001d24:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001d26:	4b15      	ldr	r3, [pc, #84]	@ (8001d7c <SystemInit+0xd8>)
 8001d28:	4a17      	ldr	r2, [pc, #92]	@ (8001d88 <SystemInit+0xe4>)
 8001d2a:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001d2c:	4b13      	ldr	r3, [pc, #76]	@ (8001d7c <SystemInit+0xd8>)
 8001d2e:	4a17      	ldr	r2, [pc, #92]	@ (8001d8c <SystemInit+0xe8>)
 8001d30:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001d32:	4b12      	ldr	r3, [pc, #72]	@ (8001d7c <SystemInit+0xd8>)
 8001d34:	2200      	movs	r2, #0
 8001d36:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001d38:	4b10      	ldr	r3, [pc, #64]	@ (8001d7c <SystemInit+0xd8>)
 8001d3a:	4a14      	ldr	r2, [pc, #80]	@ (8001d8c <SystemInit+0xe8>)
 8001d3c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001d3e:	4b0f      	ldr	r3, [pc, #60]	@ (8001d7c <SystemInit+0xd8>)
 8001d40:	2200      	movs	r2, #0
 8001d42:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001d44:	4b0d      	ldr	r3, [pc, #52]	@ (8001d7c <SystemInit+0xd8>)
 8001d46:	4a11      	ldr	r2, [pc, #68]	@ (8001d8c <SystemInit+0xe8>)
 8001d48:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001d4a:	4b0c      	ldr	r3, [pc, #48]	@ (8001d7c <SystemInit+0xd8>)
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001d50:	4b0a      	ldr	r3, [pc, #40]	@ (8001d7c <SystemInit+0xd8>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	4a09      	ldr	r2, [pc, #36]	@ (8001d7c <SystemInit+0xd8>)
 8001d56:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001d5a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001d5c:	4b07      	ldr	r3, [pc, #28]	@ (8001d7c <SystemInit+0xd8>)
 8001d5e:	2200      	movs	r2, #0
 8001d60:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001d62:	4b0b      	ldr	r3, [pc, #44]	@ (8001d90 <SystemInit+0xec>)
 8001d64:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8001d68:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001d6a:	bf00      	nop
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d72:	4770      	bx	lr
 8001d74:	e000ed00 	.word	0xe000ed00
 8001d78:	52002000 	.word	0x52002000
 8001d7c:	58024400 	.word	0x58024400
 8001d80:	eaf6ed7f 	.word	0xeaf6ed7f
 8001d84:	02020200 	.word	0x02020200
 8001d88:	01ff0000 	.word	0x01ff0000
 8001d8c:	01010280 	.word	0x01010280
 8001d90:	52004000 	.word	0x52004000

08001d94 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001d94:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001dcc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001d98:	f7ff ff84 	bl	8001ca4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001d9c:	480c      	ldr	r0, [pc, #48]	@ (8001dd0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001d9e:	490d      	ldr	r1, [pc, #52]	@ (8001dd4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001da0:	4a0d      	ldr	r2, [pc, #52]	@ (8001dd8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001da2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001da4:	e002      	b.n	8001dac <LoopCopyDataInit>

08001da6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001da6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001da8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001daa:	3304      	adds	r3, #4

08001dac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001dac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001dae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001db0:	d3f9      	bcc.n	8001da6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001db2:	4a0a      	ldr	r2, [pc, #40]	@ (8001ddc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001db4:	4c0a      	ldr	r4, [pc, #40]	@ (8001de0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001db6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001db8:	e001      	b.n	8001dbe <LoopFillZerobss>

08001dba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001dba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001dbc:	3204      	adds	r2, #4

08001dbe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001dbe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001dc0:	d3fb      	bcc.n	8001dba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001dc2:	f00a fc0d 	bl	800c5e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001dc6:	f7fe fcd3 	bl	8000770 <main>
  bx  lr
 8001dca:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001dcc:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8001dd0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001dd4:	24000090 	.word	0x24000090
  ldr r2, =_sidata
 8001dd8:	0800d288 	.word	0x0800d288
  ldr r2, =_sbss
 8001ddc:	24000c60 	.word	0x24000c60
  ldr r4, =_ebss
 8001de0:	24001308 	.word	0x24001308

08001de4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001de4:	e7fe      	b.n	8001de4 <ADC3_IRQHandler>
	...

08001de8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b082      	sub	sp, #8
 8001dec:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001dee:	2003      	movs	r0, #3
 8001df0:	f000 f952 	bl	8002098 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001df4:	f001 fd42 	bl	800387c <HAL_RCC_GetSysClockFreq>
 8001df8:	4602      	mov	r2, r0
 8001dfa:	4b15      	ldr	r3, [pc, #84]	@ (8001e50 <HAL_Init+0x68>)
 8001dfc:	699b      	ldr	r3, [r3, #24]
 8001dfe:	0a1b      	lsrs	r3, r3, #8
 8001e00:	f003 030f 	and.w	r3, r3, #15
 8001e04:	4913      	ldr	r1, [pc, #76]	@ (8001e54 <HAL_Init+0x6c>)
 8001e06:	5ccb      	ldrb	r3, [r1, r3]
 8001e08:	f003 031f 	and.w	r3, r3, #31
 8001e0c:	fa22 f303 	lsr.w	r3, r2, r3
 8001e10:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001e12:	4b0f      	ldr	r3, [pc, #60]	@ (8001e50 <HAL_Init+0x68>)
 8001e14:	699b      	ldr	r3, [r3, #24]
 8001e16:	f003 030f 	and.w	r3, r3, #15
 8001e1a:	4a0e      	ldr	r2, [pc, #56]	@ (8001e54 <HAL_Init+0x6c>)
 8001e1c:	5cd3      	ldrb	r3, [r2, r3]
 8001e1e:	f003 031f 	and.w	r3, r3, #31
 8001e22:	687a      	ldr	r2, [r7, #4]
 8001e24:	fa22 f303 	lsr.w	r3, r2, r3
 8001e28:	4a0b      	ldr	r2, [pc, #44]	@ (8001e58 <HAL_Init+0x70>)
 8001e2a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001e2c:	4a0b      	ldr	r2, [pc, #44]	@ (8001e5c <HAL_Init+0x74>)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001e32:	2000      	movs	r0, #0
 8001e34:	f000 f814 	bl	8001e60 <HAL_InitTick>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d001      	beq.n	8001e42 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001e3e:	2301      	movs	r3, #1
 8001e40:	e002      	b.n	8001e48 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001e42:	f7ff fb2d 	bl	80014a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e46:	2300      	movs	r3, #0
}
 8001e48:	4618      	mov	r0, r3
 8001e4a:	3708      	adds	r7, #8
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	bd80      	pop	{r7, pc}
 8001e50:	58024400 	.word	0x58024400
 8001e54:	0800d188 	.word	0x0800d188
 8001e58:	24000004 	.word	0x24000004
 8001e5c:	24000000 	.word	0x24000000

08001e60 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b082      	sub	sp, #8
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001e68:	4b15      	ldr	r3, [pc, #84]	@ (8001ec0 <HAL_InitTick+0x60>)
 8001e6a:	781b      	ldrb	r3, [r3, #0]
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d101      	bne.n	8001e74 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001e70:	2301      	movs	r3, #1
 8001e72:	e021      	b.n	8001eb8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001e74:	4b13      	ldr	r3, [pc, #76]	@ (8001ec4 <HAL_InitTick+0x64>)
 8001e76:	681a      	ldr	r2, [r3, #0]
 8001e78:	4b11      	ldr	r3, [pc, #68]	@ (8001ec0 <HAL_InitTick+0x60>)
 8001e7a:	781b      	ldrb	r3, [r3, #0]
 8001e7c:	4619      	mov	r1, r3
 8001e7e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001e82:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e86:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	f000 f929 	bl	80020e2 <HAL_SYSTICK_Config>
 8001e90:	4603      	mov	r3, r0
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d001      	beq.n	8001e9a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001e96:	2301      	movs	r3, #1
 8001e98:	e00e      	b.n	8001eb8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	2b0f      	cmp	r3, #15
 8001e9e:	d80a      	bhi.n	8001eb6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	6879      	ldr	r1, [r7, #4]
 8001ea4:	f04f 30ff 	mov.w	r0, #4294967295
 8001ea8:	f000 f901 	bl	80020ae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001eac:	4a06      	ldr	r2, [pc, #24]	@ (8001ec8 <HAL_InitTick+0x68>)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	e000      	b.n	8001eb8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001eb6:	2301      	movs	r3, #1
}
 8001eb8:	4618      	mov	r0, r3
 8001eba:	3708      	adds	r7, #8
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	bd80      	pop	{r7, pc}
 8001ec0:	2400000c 	.word	0x2400000c
 8001ec4:	24000000 	.word	0x24000000
 8001ec8:	24000008 	.word	0x24000008

08001ecc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001ed0:	4b06      	ldr	r3, [pc, #24]	@ (8001eec <HAL_IncTick+0x20>)
 8001ed2:	781b      	ldrb	r3, [r3, #0]
 8001ed4:	461a      	mov	r2, r3
 8001ed6:	4b06      	ldr	r3, [pc, #24]	@ (8001ef0 <HAL_IncTick+0x24>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	4413      	add	r3, r2
 8001edc:	4a04      	ldr	r2, [pc, #16]	@ (8001ef0 <HAL_IncTick+0x24>)
 8001ede:	6013      	str	r3, [r2, #0]
}
 8001ee0:	bf00      	nop
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee8:	4770      	bx	lr
 8001eea:	bf00      	nop
 8001eec:	2400000c 	.word	0x2400000c
 8001ef0:	24001060 	.word	0x24001060

08001ef4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	af00      	add	r7, sp, #0
  return uwTick;
 8001ef8:	4b03      	ldr	r3, [pc, #12]	@ (8001f08 <HAL_GetTick+0x14>)
 8001efa:	681b      	ldr	r3, [r3, #0]
}
 8001efc:	4618      	mov	r0, r3
 8001efe:	46bd      	mov	sp, r7
 8001f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f04:	4770      	bx	lr
 8001f06:	bf00      	nop
 8001f08:	24001060 	.word	0x24001060

08001f0c <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	b083      	sub	sp, #12
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8001f14:	4b06      	ldr	r3, [pc, #24]	@ (8001f30 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	f423 0260 	bic.w	r2, r3, #14680064	@ 0xe00000
 8001f1c:	4904      	ldr	r1, [pc, #16]	@ (8001f30 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	4313      	orrs	r3, r2
 8001f22:	604b      	str	r3, [r1, #4]
}
 8001f24:	bf00      	nop
 8001f26:	370c      	adds	r7, #12
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2e:	4770      	bx	lr
 8001f30:	58000400 	.word	0x58000400

08001f34 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f34:	b480      	push	{r7}
 8001f36:	b085      	sub	sp, #20
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	f003 0307 	and.w	r3, r3, #7
 8001f42:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f44:	4b0b      	ldr	r3, [pc, #44]	@ (8001f74 <__NVIC_SetPriorityGrouping+0x40>)
 8001f46:	68db      	ldr	r3, [r3, #12]
 8001f48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f4a:	68ba      	ldr	r2, [r7, #8]
 8001f4c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001f50:	4013      	ands	r3, r2
 8001f52:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f58:	68bb      	ldr	r3, [r7, #8]
 8001f5a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001f5c:	4b06      	ldr	r3, [pc, #24]	@ (8001f78 <__NVIC_SetPriorityGrouping+0x44>)
 8001f5e:	4313      	orrs	r3, r2
 8001f60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f62:	4a04      	ldr	r2, [pc, #16]	@ (8001f74 <__NVIC_SetPriorityGrouping+0x40>)
 8001f64:	68bb      	ldr	r3, [r7, #8]
 8001f66:	60d3      	str	r3, [r2, #12]
}
 8001f68:	bf00      	nop
 8001f6a:	3714      	adds	r7, #20
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f72:	4770      	bx	lr
 8001f74:	e000ed00 	.word	0xe000ed00
 8001f78:	05fa0000 	.word	0x05fa0000

08001f7c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f80:	4b04      	ldr	r3, [pc, #16]	@ (8001f94 <__NVIC_GetPriorityGrouping+0x18>)
 8001f82:	68db      	ldr	r3, [r3, #12]
 8001f84:	0a1b      	lsrs	r3, r3, #8
 8001f86:	f003 0307 	and.w	r3, r3, #7
}
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f92:	4770      	bx	lr
 8001f94:	e000ed00 	.word	0xe000ed00

08001f98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	b083      	sub	sp, #12
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	6039      	str	r1, [r7, #0]
 8001fa2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001fa4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	db0a      	blt.n	8001fc2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	b2da      	uxtb	r2, r3
 8001fb0:	490c      	ldr	r1, [pc, #48]	@ (8001fe4 <__NVIC_SetPriority+0x4c>)
 8001fb2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001fb6:	0112      	lsls	r2, r2, #4
 8001fb8:	b2d2      	uxtb	r2, r2
 8001fba:	440b      	add	r3, r1
 8001fbc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001fc0:	e00a      	b.n	8001fd8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	b2da      	uxtb	r2, r3
 8001fc6:	4908      	ldr	r1, [pc, #32]	@ (8001fe8 <__NVIC_SetPriority+0x50>)
 8001fc8:	88fb      	ldrh	r3, [r7, #6]
 8001fca:	f003 030f 	and.w	r3, r3, #15
 8001fce:	3b04      	subs	r3, #4
 8001fd0:	0112      	lsls	r2, r2, #4
 8001fd2:	b2d2      	uxtb	r2, r2
 8001fd4:	440b      	add	r3, r1
 8001fd6:	761a      	strb	r2, [r3, #24]
}
 8001fd8:	bf00      	nop
 8001fda:	370c      	adds	r7, #12
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe2:	4770      	bx	lr
 8001fe4:	e000e100 	.word	0xe000e100
 8001fe8:	e000ed00 	.word	0xe000ed00

08001fec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fec:	b480      	push	{r7}
 8001fee:	b089      	sub	sp, #36	@ 0x24
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	60f8      	str	r0, [r7, #12]
 8001ff4:	60b9      	str	r1, [r7, #8]
 8001ff6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	f003 0307 	and.w	r3, r3, #7
 8001ffe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002000:	69fb      	ldr	r3, [r7, #28]
 8002002:	f1c3 0307 	rsb	r3, r3, #7
 8002006:	2b04      	cmp	r3, #4
 8002008:	bf28      	it	cs
 800200a:	2304      	movcs	r3, #4
 800200c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800200e:	69fb      	ldr	r3, [r7, #28]
 8002010:	3304      	adds	r3, #4
 8002012:	2b06      	cmp	r3, #6
 8002014:	d902      	bls.n	800201c <NVIC_EncodePriority+0x30>
 8002016:	69fb      	ldr	r3, [r7, #28]
 8002018:	3b03      	subs	r3, #3
 800201a:	e000      	b.n	800201e <NVIC_EncodePriority+0x32>
 800201c:	2300      	movs	r3, #0
 800201e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002020:	f04f 32ff 	mov.w	r2, #4294967295
 8002024:	69bb      	ldr	r3, [r7, #24]
 8002026:	fa02 f303 	lsl.w	r3, r2, r3
 800202a:	43da      	mvns	r2, r3
 800202c:	68bb      	ldr	r3, [r7, #8]
 800202e:	401a      	ands	r2, r3
 8002030:	697b      	ldr	r3, [r7, #20]
 8002032:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002034:	f04f 31ff 	mov.w	r1, #4294967295
 8002038:	697b      	ldr	r3, [r7, #20]
 800203a:	fa01 f303 	lsl.w	r3, r1, r3
 800203e:	43d9      	mvns	r1, r3
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002044:	4313      	orrs	r3, r2
         );
}
 8002046:	4618      	mov	r0, r3
 8002048:	3724      	adds	r7, #36	@ 0x24
 800204a:	46bd      	mov	sp, r7
 800204c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002050:	4770      	bx	lr
	...

08002054 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b082      	sub	sp, #8
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	3b01      	subs	r3, #1
 8002060:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002064:	d301      	bcc.n	800206a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002066:	2301      	movs	r3, #1
 8002068:	e00f      	b.n	800208a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800206a:	4a0a      	ldr	r2, [pc, #40]	@ (8002094 <SysTick_Config+0x40>)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	3b01      	subs	r3, #1
 8002070:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002072:	210f      	movs	r1, #15
 8002074:	f04f 30ff 	mov.w	r0, #4294967295
 8002078:	f7ff ff8e 	bl	8001f98 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800207c:	4b05      	ldr	r3, [pc, #20]	@ (8002094 <SysTick_Config+0x40>)
 800207e:	2200      	movs	r2, #0
 8002080:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002082:	4b04      	ldr	r3, [pc, #16]	@ (8002094 <SysTick_Config+0x40>)
 8002084:	2207      	movs	r2, #7
 8002086:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002088:	2300      	movs	r3, #0
}
 800208a:	4618      	mov	r0, r3
 800208c:	3708      	adds	r7, #8
 800208e:	46bd      	mov	sp, r7
 8002090:	bd80      	pop	{r7, pc}
 8002092:	bf00      	nop
 8002094:	e000e010 	.word	0xe000e010

08002098 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b082      	sub	sp, #8
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020a0:	6878      	ldr	r0, [r7, #4]
 80020a2:	f7ff ff47 	bl	8001f34 <__NVIC_SetPriorityGrouping>
}
 80020a6:	bf00      	nop
 80020a8:	3708      	adds	r7, #8
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bd80      	pop	{r7, pc}

080020ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020ae:	b580      	push	{r7, lr}
 80020b0:	b086      	sub	sp, #24
 80020b2:	af00      	add	r7, sp, #0
 80020b4:	4603      	mov	r3, r0
 80020b6:	60b9      	str	r1, [r7, #8]
 80020b8:	607a      	str	r2, [r7, #4]
 80020ba:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80020bc:	f7ff ff5e 	bl	8001f7c <__NVIC_GetPriorityGrouping>
 80020c0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020c2:	687a      	ldr	r2, [r7, #4]
 80020c4:	68b9      	ldr	r1, [r7, #8]
 80020c6:	6978      	ldr	r0, [r7, #20]
 80020c8:	f7ff ff90 	bl	8001fec <NVIC_EncodePriority>
 80020cc:	4602      	mov	r2, r0
 80020ce:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80020d2:	4611      	mov	r1, r2
 80020d4:	4618      	mov	r0, r3
 80020d6:	f7ff ff5f 	bl	8001f98 <__NVIC_SetPriority>
}
 80020da:	bf00      	nop
 80020dc:	3718      	adds	r7, #24
 80020de:	46bd      	mov	sp, r7
 80020e0:	bd80      	pop	{r7, pc}

080020e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80020e2:	b580      	push	{r7, lr}
 80020e4:	b082      	sub	sp, #8
 80020e6:	af00      	add	r7, sp, #0
 80020e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80020ea:	6878      	ldr	r0, [r7, #4]
 80020ec:	f7ff ffb2 	bl	8002054 <SysTick_Config>
 80020f0:	4603      	mov	r3, r0
}
 80020f2:	4618      	mov	r0, r3
 80020f4:	3708      	adds	r7, #8
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bd80      	pop	{r7, pc}
	...

080020fc <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b084      	sub	sp, #16
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2b00      	cmp	r3, #0
 8002108:	d101      	bne.n	800210e <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800210a:	2301      	movs	r3, #1
 800210c:	e0e3      	b.n	80022d6 <HAL_ETH_Init+0x1da>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002114:	2b00      	cmp	r3, #0
 8002116:	d106      	bne.n	8002126 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2223      	movs	r2, #35	@ 0x23
 800211c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8002120:	6878      	ldr	r0, [r7, #4]
 8002122:	f7ff f9d7 	bl	80014d4 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002126:	4b6e      	ldr	r3, [pc, #440]	@ (80022e0 <HAL_ETH_Init+0x1e4>)
 8002128:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800212c:	4a6c      	ldr	r2, [pc, #432]	@ (80022e0 <HAL_ETH_Init+0x1e4>)
 800212e:	f043 0302 	orr.w	r3, r3, #2
 8002132:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8002136:	4b6a      	ldr	r3, [pc, #424]	@ (80022e0 <HAL_ETH_Init+0x1e4>)
 8002138:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800213c:	f003 0302 	and.w	r3, r3, #2
 8002140:	60bb      	str	r3, [r7, #8]
 8002142:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	7a1b      	ldrb	r3, [r3, #8]
 8002148:	2b00      	cmp	r3, #0
 800214a:	d103      	bne.n	8002154 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 800214c:	2000      	movs	r0, #0
 800214e:	f7ff fedd 	bl	8001f0c <HAL_SYSCFG_ETHInterfaceSelect>
 8002152:	e003      	b.n	800215c <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8002154:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 8002158:	f7ff fed8 	bl	8001f0c <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 800215c:	4b61      	ldr	r3, [pc, #388]	@ (80022e4 <HAL_ETH_Init+0x1e8>)
 800215e:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	687a      	ldr	r2, [r7, #4]
 800216c:	6812      	ldr	r2, [r2, #0]
 800216e:	f043 0301 	orr.w	r3, r3, #1
 8002172:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002176:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002178:	f7ff febc 	bl	8001ef4 <HAL_GetTick>
 800217c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 800217e:	e011      	b.n	80021a4 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8002180:	f7ff feb8 	bl	8001ef4 <HAL_GetTick>
 8002184:	4602      	mov	r2, r0
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	1ad3      	subs	r3, r2, r3
 800218a:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800218e:	d909      	bls.n	80021a4 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2204      	movs	r2, #4
 8002194:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	22e0      	movs	r2, #224	@ 0xe0
 800219c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 80021a0:	2301      	movs	r3, #1
 80021a2:	e098      	b.n	80022d6 <HAL_ETH_Init+0x1da>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f003 0301 	and.w	r3, r3, #1
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d1e4      	bne.n	8002180 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 80021b6:	6878      	ldr	r0, [r7, #4]
 80021b8:	f000 f89e 	bl	80022f8 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 80021bc:	f001 fcd8 	bl	8003b70 <HAL_RCC_GetHCLKFreq>
 80021c0:	4603      	mov	r3, r0
 80021c2:	4a49      	ldr	r2, [pc, #292]	@ (80022e8 <HAL_ETH_Init+0x1ec>)
 80021c4:	fba2 2303 	umull	r2, r3, r2, r3
 80021c8:	0c9a      	lsrs	r2, r3, #18
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	3a01      	subs	r2, #1
 80021d0:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80021d4:	6878      	ldr	r0, [r7, #4]
 80021d6:	f000 fa81 	bl	80026dc <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80021e2:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 80021e6:	f423 13e0 	bic.w	r3, r3, #1835008	@ 0x1c0000
 80021ea:	687a      	ldr	r2, [r7, #4]
 80021ec:	6812      	ldr	r2, [r2, #0]
 80021ee:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80021f2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80021f6:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	695b      	ldr	r3, [r3, #20]
 80021fe:	f003 0303 	and.w	r3, r3, #3
 8002202:	2b00      	cmp	r3, #0
 8002204:	d009      	beq.n	800221a <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	2201      	movs	r2, #1
 800220a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	22e0      	movs	r2, #224	@ 0xe0
 8002212:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    /* Return Error */
    return HAL_ERROR;
 8002216:	2301      	movs	r3, #1
 8002218:	e05d      	b.n	80022d6 <HAL_ETH_Init+0x1da>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002222:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 8002226:	4b31      	ldr	r3, [pc, #196]	@ (80022ec <HAL_ETH_Init+0x1f0>)
 8002228:	4013      	ands	r3, r2
 800222a:	687a      	ldr	r2, [r7, #4]
 800222c:	6952      	ldr	r2, [r2, #20]
 800222e:	0051      	lsls	r1, r2, #1
 8002230:	687a      	ldr	r2, [r7, #4]
 8002232:	6812      	ldr	r2, [r2, #0]
 8002234:	430b      	orrs	r3, r1
 8002236:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800223a:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 800223e:	6878      	ldr	r0, [r7, #4]
 8002240:	f000 fae9 	bl	8002816 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8002244:	6878      	ldr	r0, [r7, #4]
 8002246:	f000 fb2f 	bl	80028a8 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	685b      	ldr	r3, [r3, #4]
 800224e:	3305      	adds	r3, #5
 8002250:	781b      	ldrb	r3, [r3, #0]
 8002252:	021a      	lsls	r2, r3, #8
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	3304      	adds	r3, #4
 800225a:	781b      	ldrb	r3, [r3, #0]
 800225c:	4619      	mov	r1, r3
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	430a      	orrs	r2, r1
 8002264:	f8c3 2300 	str.w	r2, [r3, #768]	@ 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	3303      	adds	r3, #3
 800226e:	781b      	ldrb	r3, [r3, #0]
 8002270:	061a      	lsls	r2, r3, #24
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	685b      	ldr	r3, [r3, #4]
 8002276:	3302      	adds	r3, #2
 8002278:	781b      	ldrb	r3, [r3, #0]
 800227a:	041b      	lsls	r3, r3, #16
 800227c:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	685b      	ldr	r3, [r3, #4]
 8002282:	3301      	adds	r3, #1
 8002284:	781b      	ldrb	r3, [r3, #0]
 8002286:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002288:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	781b      	ldrb	r3, [r3, #0]
 8002290:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8002296:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002298:	f8c3 2304 	str.w	r2, [r3, #772]	@ 0x304

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f8d3 170c 	ldr.w	r1, [r3, #1804]	@ 0x70c
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681a      	ldr	r2, [r3, #0]
 80022a8:	4b11      	ldr	r3, [pc, #68]	@ (80022f0 <HAL_ETH_Init+0x1f4>)
 80022aa:	430b      	orrs	r3, r1
 80022ac:	f8c2 370c 	str.w	r3, [r2, #1804]	@ 0x70c
          ETH_MMCRIMR_RXUCGPIM | ETH_MMCRIMR_RXALGNERPIM | ETH_MMCRIMR_RXCRCERPIM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TXLPITRCIM | ETH_MMCTIMR_TXLPIUSCIM | \
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f8d3 1710 	ldr.w	r1, [r3, #1808]	@ 0x710
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681a      	ldr	r2, [r3, #0]
 80022bc:	4b0d      	ldr	r3, [pc, #52]	@ (80022f4 <HAL_ETH_Init+0x1f8>)
 80022be:	430b      	orrs	r3, r1
 80022c0:	f8c2 3710 	str.w	r3, [r2, #1808]	@ 0x710
          ETH_MMCTIMR_TXGPKTIM | ETH_MMCTIMR_TXMCOLGPIM | ETH_MMCTIMR_TXSCOLGPIM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2200      	movs	r2, #0
 80022c8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2210      	movs	r2, #16
 80022d0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80022d4:	2300      	movs	r3, #0
}
 80022d6:	4618      	mov	r0, r3
 80022d8:	3710      	adds	r7, #16
 80022da:	46bd      	mov	sp, r7
 80022dc:	bd80      	pop	{r7, pc}
 80022de:	bf00      	nop
 80022e0:	58024400 	.word	0x58024400
 80022e4:	58000400 	.word	0x58000400
 80022e8:	431bde83 	.word	0x431bde83
 80022ec:	ffff8001 	.word	0xffff8001
 80022f0:	0c020060 	.word	0x0c020060
 80022f4:	0c20c000 	.word	0x0c20c000

080022f8 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b084      	sub	sp, #16
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8002308:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002310:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8002312:	f001 fc2d 	bl	8003b70 <HAL_RCC_GetHCLKFreq>
 8002316:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 8002318:	68bb      	ldr	r3, [r7, #8]
 800231a:	4a1a      	ldr	r2, [pc, #104]	@ (8002384 <HAL_ETH_SetMDIOClockRange+0x8c>)
 800231c:	4293      	cmp	r3, r2
 800231e:	d804      	bhi.n	800232a <HAL_ETH_SetMDIOClockRange+0x32>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002326:	60fb      	str	r3, [r7, #12]
 8002328:	e022      	b.n	8002370 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 60000000U)
 800232a:	68bb      	ldr	r3, [r7, #8]
 800232c:	4a16      	ldr	r2, [pc, #88]	@ (8002388 <HAL_ETH_SetMDIOClockRange+0x90>)
 800232e:	4293      	cmp	r3, r2
 8002330:	d204      	bcs.n	800233c <HAL_ETH_SetMDIOClockRange+0x44>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8002338:	60fb      	str	r3, [r7, #12]
 800233a:	e019      	b.n	8002370 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 100000000U)
 800233c:	68bb      	ldr	r3, [r7, #8]
 800233e:	4a13      	ldr	r2, [pc, #76]	@ (800238c <HAL_ETH_SetMDIOClockRange+0x94>)
 8002340:	4293      	cmp	r3, r2
 8002342:	d915      	bls.n	8002370 <HAL_ETH_SetMDIOClockRange+0x78>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if (hclk < 150000000U)
 8002344:	68bb      	ldr	r3, [r7, #8]
 8002346:	4a12      	ldr	r2, [pc, #72]	@ (8002390 <HAL_ETH_SetMDIOClockRange+0x98>)
 8002348:	4293      	cmp	r3, r2
 800234a:	d804      	bhi.n	8002356 <HAL_ETH_SetMDIOClockRange+0x5e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002352:	60fb      	str	r3, [r7, #12]
 8002354:	e00c      	b.n	8002370 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 250000000U)
 8002356:	68bb      	ldr	r3, [r7, #8]
 8002358:	4a0e      	ldr	r2, [pc, #56]	@ (8002394 <HAL_ETH_SetMDIOClockRange+0x9c>)
 800235a:	4293      	cmp	r3, r2
 800235c:	d804      	bhi.n	8002368 <HAL_ETH_SetMDIOClockRange+0x70>
  {
    /* CSR Clock Range between 150-250 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002364:	60fb      	str	r3, [r7, #12]
 8002366:	e003      	b.n	8002370 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else /* (hclk >= 250000000U) */
  {
    /* CSR Clock >= 250 MHz */
    tmpreg |= (uint32_t)(ETH_MACMDIOAR_CR_DIV124);
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	f443 63a0 	orr.w	r3, r3, #1280	@ 0x500
 800236e:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	68fa      	ldr	r2, [r7, #12]
 8002376:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
}
 800237a:	bf00      	nop
 800237c:	3710      	adds	r7, #16
 800237e:	46bd      	mov	sp, r7
 8002380:	bd80      	pop	{r7, pc}
 8002382:	bf00      	nop
 8002384:	02160ebf 	.word	0x02160ebf
 8002388:	03938700 	.word	0x03938700
 800238c:	05f5e0ff 	.word	0x05f5e0ff
 8002390:	08f0d17f 	.word	0x08f0d17f
 8002394:	0ee6b27f 	.word	0x0ee6b27f

08002398 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8002398:	b480      	push	{r7}
 800239a:	b085      	sub	sp, #20
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
 80023a0:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 80023aa:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	791b      	ldrb	r3, [r3, #4]
 80023b0:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 80023b2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	7b1b      	ldrb	r3, [r3, #12]
 80023b8:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 80023ba:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	7b5b      	ldrb	r3, [r3, #13]
 80023c0:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80023c2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	7b9b      	ldrb	r3, [r3, #14]
 80023c8:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 80023ca:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	7bdb      	ldrb	r3, [r3, #15]
 80023d0:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80023d2:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80023d4:	683a      	ldr	r2, [r7, #0]
 80023d6:	7c12      	ldrb	r2, [r2, #16]
 80023d8:	2a00      	cmp	r2, #0
 80023da:	d102      	bne.n	80023e2 <ETH_SetMACConfig+0x4a>
 80023dc:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80023e0:	e000      	b.n	80023e4 <ETH_SetMACConfig+0x4c>
 80023e2:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80023e4:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80023e6:	683a      	ldr	r2, [r7, #0]
 80023e8:	7c52      	ldrb	r2, [r2, #17]
 80023ea:	2a00      	cmp	r2, #0
 80023ec:	d102      	bne.n	80023f4 <ETH_SetMACConfig+0x5c>
 80023ee:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80023f2:	e000      	b.n	80023f6 <ETH_SetMACConfig+0x5e>
 80023f4:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80023f6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	7c9b      	ldrb	r3, [r3, #18]
 80023fc:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80023fe:	431a      	orrs	r2, r3
               macconf->Speed |
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8002404:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 800240a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	7f1b      	ldrb	r3, [r3, #28]
 8002410:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 8002412:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	7f5b      	ldrb	r3, [r3, #29]
 8002418:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 800241a:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 800241c:	683a      	ldr	r2, [r7, #0]
 800241e:	7f92      	ldrb	r2, [r2, #30]
 8002420:	2a00      	cmp	r2, #0
 8002422:	d102      	bne.n	800242a <ETH_SetMACConfig+0x92>
 8002424:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002428:	e000      	b.n	800242c <ETH_SetMACConfig+0x94>
 800242a:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 800242c:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	7fdb      	ldrb	r3, [r3, #31]
 8002432:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8002434:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8002436:	683a      	ldr	r2, [r7, #0]
 8002438:	f892 2020 	ldrb.w	r2, [r2, #32]
 800243c:	2a00      	cmp	r2, #0
 800243e:	d102      	bne.n	8002446 <ETH_SetMACConfig+0xae>
 8002440:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002444:	e000      	b.n	8002448 <ETH_SetMACConfig+0xb0>
 8002446:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8002448:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 800244e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002456:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8002458:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  macregval = (macconf->InterPacketGapVal |
 800245e:	4313      	orrs	r3, r2
 8002460:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	681a      	ldr	r2, [r3, #0]
 8002468:	4b56      	ldr	r3, [pc, #344]	@ (80025c4 <ETH_SetMACConfig+0x22c>)
 800246a:	4013      	ands	r3, r2
 800246c:	687a      	ldr	r2, [r7, #4]
 800246e:	6812      	ldr	r2, [r2, #0]
 8002470:	68f9      	ldr	r1, [r7, #12]
 8002472:	430b      	orrs	r3, r1
 8002474:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800247a:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002482:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8002484:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800248c:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 800248e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8002496:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8002498:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 800249a:	683a      	ldr	r2, [r7, #0]
 800249c:	f892 2032 	ldrb.w	r2, [r2, #50]	@ 0x32
 80024a0:	2a00      	cmp	r2, #0
 80024a2:	d102      	bne.n	80024aa <ETH_SetMACConfig+0x112>
 80024a4:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80024a8:	e000      	b.n	80024ac <ETH_SetMACConfig+0x114>
 80024aa:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 80024ac:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80024b2:	4313      	orrs	r3, r2
 80024b4:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	685a      	ldr	r2, [r3, #4]
 80024bc:	4b42      	ldr	r3, [pc, #264]	@ (80025c8 <ETH_SetMACConfig+0x230>)
 80024be:	4013      	ands	r3, r2
 80024c0:	687a      	ldr	r2, [r7, #4]
 80024c2:	6812      	ldr	r2, [r2, #0]
 80024c4:	68f9      	ldr	r1, [r7, #12]
 80024c6:	430b      	orrs	r3, r1
 80024c8:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80024d0:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80024d6:	4313      	orrs	r3, r2
 80024d8:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	68da      	ldr	r2, [r3, #12]
 80024e0:	4b3a      	ldr	r3, [pc, #232]	@ (80025cc <ETH_SetMACConfig+0x234>)
 80024e2:	4013      	ands	r3, r2
 80024e4:	687a      	ldr	r2, [r7, #4]
 80024e6:	6812      	ldr	r2, [r2, #0]
 80024e8:	68f9      	ldr	r1, [r7, #12]
 80024ea:	430b      	orrs	r3, r1
 80024ec:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80024f4:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80024fa:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 80024fc:	683a      	ldr	r2, [r7, #0]
 80024fe:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8002502:	2a00      	cmp	r2, #0
 8002504:	d101      	bne.n	800250a <ETH_SetMACConfig+0x172>
 8002506:	2280      	movs	r2, #128	@ 0x80
 8002508:	e000      	b.n	800250c <ETH_SetMACConfig+0x174>
 800250a:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 800250c:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002512:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002514:	4313      	orrs	r3, r2
 8002516:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800251e:	f64f 730d 	movw	r3, #65293	@ 0xff0d
 8002522:	4013      	ands	r3, r2
 8002524:	687a      	ldr	r2, [r7, #4]
 8002526:	6812      	ldr	r2, [r2, #0]
 8002528:	68f9      	ldr	r1, [r7, #12]
 800252a:	430b      	orrs	r3, r1
 800252c:	6713      	str	r3, [r2, #112]	@ 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8002534:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 800253c:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800253e:	4313      	orrs	r3, r2
 8002540:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800254a:	f023 0103 	bic.w	r1, r3, #3
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	68fa      	ldr	r2, [r7, #12]
 8002554:	430a      	orrs	r2, r1
 8002556:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 8002562:	f023 0172 	bic.w	r1, r3, #114	@ 0x72
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	430a      	orrs	r2, r1
 8002570:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8002578:	683a      	ldr	r2, [r7, #0]
 800257a:	f892 2060 	ldrb.w	r2, [r2, #96]	@ 0x60
 800257e:	2a00      	cmp	r2, #0
 8002580:	d101      	bne.n	8002586 <ETH_SetMACConfig+0x1ee>
 8002582:	2240      	movs	r2, #64	@ 0x40
 8002584:	e000      	b.n	8002588 <ETH_SetMACConfig+0x1f0>
 8002586:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8002588:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 8002590:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8002592:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	f893 3062 	ldrb.w	r3, [r3, #98]	@ 0x62
 800259a:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 800259c:	4313      	orrs	r3, r2
 800259e:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 80025a8:	f023 017b 	bic.w	r1, r3, #123	@ 0x7b
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	68fa      	ldr	r2, [r7, #12]
 80025b2:	430a      	orrs	r2, r1
 80025b4:	f8c3 2d30 	str.w	r2, [r3, #3376]	@ 0xd30
}
 80025b8:	bf00      	nop
 80025ba:	3714      	adds	r7, #20
 80025bc:	46bd      	mov	sp, r7
 80025be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c2:	4770      	bx	lr
 80025c4:	00048083 	.word	0x00048083
 80025c8:	c0f88000 	.word	0xc0f88000
 80025cc:	fffffef0 	.word	0xfffffef0

080025d0 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 80025d0:	b480      	push	{r7}
 80025d2:	b085      	sub	sp, #20
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
 80025d8:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80025e2:	681a      	ldr	r2, [r3, #0]
 80025e4:	4b38      	ldr	r3, [pc, #224]	@ (80026c8 <ETH_SetDMAConfig+0xf8>)
 80025e6:	4013      	ands	r3, r2
 80025e8:	683a      	ldr	r2, [r7, #0]
 80025ea:	6811      	ldr	r1, [r2, #0]
 80025ec:	687a      	ldr	r2, [r7, #4]
 80025ee:	6812      	ldr	r2, [r2, #0]
 80025f0:	430b      	orrs	r3, r1
 80025f2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80025f6:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	791b      	ldrb	r3, [r3, #4]
 80025fc:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002602:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	7b1b      	ldrb	r3, [r3, #12]
 8002608:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800260a:	4313      	orrs	r3, r2
 800260c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002616:	685a      	ldr	r2, [r3, #4]
 8002618:	4b2c      	ldr	r3, [pc, #176]	@ (80026cc <ETH_SetDMAConfig+0xfc>)
 800261a:	4013      	ands	r3, r2
 800261c:	687a      	ldr	r2, [r7, #4]
 800261e:	6812      	ldr	r2, [r2, #0]
 8002620:	68f9      	ldr	r1, [r7, #12]
 8002622:	430b      	orrs	r3, r1
 8002624:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002628:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	7b5b      	ldrb	r3, [r3, #13]
 800262e:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8002634:	4313      	orrs	r3, r2
 8002636:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002640:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 8002644:	4b22      	ldr	r3, [pc, #136]	@ (80026d0 <ETH_SetDMAConfig+0x100>)
 8002646:	4013      	ands	r3, r2
 8002648:	687a      	ldr	r2, [r7, #4]
 800264a:	6812      	ldr	r2, [r2, #0]
 800264c:	68f9      	ldr	r1, [r7, #12]
 800264e:	430b      	orrs	r3, r1
 8002650:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002654:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	7d1b      	ldrb	r3, [r3, #20]
 8002660:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8002662:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	7f5b      	ldrb	r3, [r3, #29]
 8002668:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 800266a:	4313      	orrs	r3, r2
 800266c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002676:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
 800267a:	4b16      	ldr	r3, [pc, #88]	@ (80026d4 <ETH_SetDMAConfig+0x104>)
 800267c:	4013      	ands	r3, r2
 800267e:	687a      	ldr	r2, [r7, #4]
 8002680:	6812      	ldr	r2, [r2, #0]
 8002682:	68f9      	ldr	r1, [r7, #12]
 8002684:	430b      	orrs	r3, r1
 8002686:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800268a:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	7f1b      	ldrb	r3, [r3, #28]
 8002692:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8002698:	4313      	orrs	r3, r2
 800269a:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80026a4:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 80026a8:	4b0b      	ldr	r3, [pc, #44]	@ (80026d8 <ETH_SetDMAConfig+0x108>)
 80026aa:	4013      	ands	r3, r2
 80026ac:	687a      	ldr	r2, [r7, #4]
 80026ae:	6812      	ldr	r2, [r2, #0]
 80026b0:	68f9      	ldr	r1, [r7, #12]
 80026b2:	430b      	orrs	r3, r1
 80026b4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80026b8:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
}
 80026bc:	bf00      	nop
 80026be:	3714      	adds	r7, #20
 80026c0:	46bd      	mov	sp, r7
 80026c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c6:	4770      	bx	lr
 80026c8:	ffff87fd 	.word	0xffff87fd
 80026cc:	ffff2ffe 	.word	0xffff2ffe
 80026d0:	fffec000 	.word	0xfffec000
 80026d4:	ffc0efef 	.word	0xffc0efef
 80026d8:	7fc0ffff 	.word	0x7fc0ffff

080026dc <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b0a4      	sub	sp, #144	@ 0x90
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 80026e4:	2301      	movs	r3, #1
 80026e6:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80026ea:	2300      	movs	r3, #0
 80026ec:	653b      	str	r3, [r7, #80]	@ 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 80026ee:	2300      	movs	r3, #0
 80026f0:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80026f4:	2300      	movs	r3, #0
 80026f6:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 80026fa:	2301      	movs	r3, #1
 80026fc:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8002700:	2301      	movs	r3, #1
 8002702:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8002706:	2301      	movs	r3, #1
 8002708:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 800270c:	2300      	movs	r3, #0
 800270e:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8002712:	2301      	movs	r3, #1
 8002714:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002718:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800271c:	647b      	str	r3, [r7, #68]	@ 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 800271e:	2300      	movs	r3, #0
 8002720:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0U;
 8002724:	2300      	movs	r3, #0
 8002726:	66bb      	str	r3, [r7, #104]	@ 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8002728:	2300      	movs	r3, #0
 800272a:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 800272e:	2300      	movs	r3, #0
 8002730:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618U;
 8002734:	f44f 63c3 	mov.w	r3, #1560	@ 0x618
 8002738:	663b      	str	r3, [r7, #96]	@ 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 800273a:	2300      	movs	r3, #0
 800273c:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8002740:	2300      	movs	r3, #0
 8002742:	637b      	str	r3, [r7, #52]	@ 0x34
  macDefaultConf.Jabber = ENABLE;
 8002744:	2301      	movs	r3, #1
 8002746:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 800274a:	2300      	movs	r3, #0
 800274c:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8002750:	2300      	movs	r3, #0
 8002752:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8002756:	2300      	movs	r3, #0
 8002758:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.PauseTime = 0x0U;
 800275a:	2300      	movs	r3, #0
 800275c:	677b      	str	r3, [r7, #116]	@ 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 800275e:	2300      	movs	r3, #0
 8002760:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8002762:	2300      	movs	r3, #0
 8002764:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002768:	2300      	movs	r3, #0
 800276a:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 800276e:	2301      	movs	r3, #1
 8002770:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8002774:	2320      	movs	r3, #32
 8002776:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 800277a:	2301      	movs	r3, #1
 800277c:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8002780:	2300      	movs	r3, #0
 8002782:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8002786:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 800278a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 800278c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002790:	643b      	str	r3, [r7, #64]	@ 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8002792:	2300      	movs	r3, #0
 8002794:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8002798:	2302      	movs	r3, #2
 800279a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 800279e:	2300      	movs	r3, #0
 80027a0:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80027a4:	2300      	movs	r3, #0
 80027a6:	f887 3081 	strb.w	r3, [r7, #129]	@ 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 80027aa:	2300      	movs	r3, #0
 80027ac:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.Watchdog = ENABLE;
 80027b0:	2301      	movs	r3, #1
 80027b2:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 80027b6:	2300      	movs	r3, #0
 80027b8:	673b      	str	r3, [r7, #112]	@ 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 80027ba:	2301      	movs	r3, #1
 80027bc:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80027c0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80027c4:	4619      	mov	r1, r3
 80027c6:	6878      	ldr	r0, [r7, #4]
 80027c8:	f7ff fde6 	bl	8002398 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80027cc:	2301      	movs	r3, #1
 80027ce:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80027d0:	2301      	movs	r3, #1
 80027d2:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 80027d4:	2300      	movs	r3, #0
 80027d6:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 80027d8:	2300      	movs	r3, #0
 80027da:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 80027de:	2300      	movs	r3, #0
 80027e0:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 80027e2:	2300      	movs	r3, #0
 80027e4:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80027e6:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80027ea:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 80027ec:	2300      	movs	r3, #0
 80027ee:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80027f0:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80027f4:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 80027f6:	2300      	movs	r3, #0
 80027f8:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 80027fc:	f44f 7306 	mov.w	r3, #536	@ 0x218
 8002800:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002802:	f107 0308 	add.w	r3, r7, #8
 8002806:	4619      	mov	r1, r3
 8002808:	6878      	ldr	r0, [r7, #4]
 800280a:	f7ff fee1 	bl	80025d0 <ETH_SetDMAConfig>
}
 800280e:	bf00      	nop
 8002810:	3790      	adds	r7, #144	@ 0x90
 8002812:	46bd      	mov	sp, r7
 8002814:	bd80      	pop	{r7, pc}

08002816 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002816:	b480      	push	{r7}
 8002818:	b085      	sub	sp, #20
 800281a:	af00      	add	r7, sp, #0
 800281c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800281e:	2300      	movs	r3, #0
 8002820:	60fb      	str	r3, [r7, #12]
 8002822:	e01d      	b.n	8002860 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	68d9      	ldr	r1, [r3, #12]
 8002828:	68fa      	ldr	r2, [r7, #12]
 800282a:	4613      	mov	r3, r2
 800282c:	005b      	lsls	r3, r3, #1
 800282e:	4413      	add	r3, r2
 8002830:	00db      	lsls	r3, r3, #3
 8002832:	440b      	add	r3, r1
 8002834:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8002836:	68bb      	ldr	r3, [r7, #8]
 8002838:	2200      	movs	r2, #0
 800283a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 800283c:	68bb      	ldr	r3, [r7, #8]
 800283e:	2200      	movs	r2, #0
 8002840:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8002842:	68bb      	ldr	r3, [r7, #8]
 8002844:	2200      	movs	r2, #0
 8002846:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8002848:	68bb      	ldr	r3, [r7, #8]
 800284a:	2200      	movs	r2, #0
 800284c:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 800284e:	68b9      	ldr	r1, [r7, #8]
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	68fa      	ldr	r2, [r7, #12]
 8002854:	3206      	adds	r2, #6
 8002856:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	3301      	adds	r3, #1
 800285e:	60fb      	str	r3, [r7, #12]
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	2b03      	cmp	r3, #3
 8002864:	d9de      	bls.n	8002824 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	2200      	movs	r2, #0
 800286a:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002874:	461a      	mov	r2, r3
 8002876:	2303      	movs	r3, #3
 8002878:	f8c2 312c 	str.w	r3, [r2, #300]	@ 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	68da      	ldr	r2, [r3, #12]
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002888:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	68da      	ldr	r2, [r3, #12]
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002898:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
}
 800289c:	bf00      	nop
 800289e:	3714      	adds	r7, #20
 80028a0:	46bd      	mov	sp, r7
 80028a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a6:	4770      	bx	lr

080028a8 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80028a8:	b480      	push	{r7}
 80028aa:	b085      	sub	sp, #20
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80028b0:	2300      	movs	r3, #0
 80028b2:	60fb      	str	r3, [r7, #12]
 80028b4:	e023      	b.n	80028fe <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6919      	ldr	r1, [r3, #16]
 80028ba:	68fa      	ldr	r2, [r7, #12]
 80028bc:	4613      	mov	r3, r2
 80028be:	005b      	lsls	r3, r3, #1
 80028c0:	4413      	add	r3, r2
 80028c2:	00db      	lsls	r3, r3, #3
 80028c4:	440b      	add	r3, r1
 80028c6:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 80028c8:	68bb      	ldr	r3, [r7, #8]
 80028ca:	2200      	movs	r2, #0
 80028cc:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 80028ce:	68bb      	ldr	r3, [r7, #8]
 80028d0:	2200      	movs	r2, #0
 80028d2:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 80028d4:	68bb      	ldr	r3, [r7, #8]
 80028d6:	2200      	movs	r2, #0
 80028d8:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 80028da:	68bb      	ldr	r3, [r7, #8]
 80028dc:	2200      	movs	r2, #0
 80028de:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 80028e0:	68bb      	ldr	r3, [r7, #8]
 80028e2:	2200      	movs	r2, #0
 80028e4:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 80028e6:	68bb      	ldr	r3, [r7, #8]
 80028e8:	2200      	movs	r2, #0
 80028ea:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80028ec:	68b9      	ldr	r1, [r7, #8]
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	68fa      	ldr	r2, [r7, #12]
 80028f2:	3212      	adds	r2, #18
 80028f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	3301      	adds	r3, #1
 80028fc:	60fb      	str	r3, [r7, #12]
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	2b03      	cmp	r3, #3
 8002902:	d9d8      	bls.n	80028b6 <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2200      	movs	r2, #0
 8002908:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	2200      	movs	r2, #0
 800290e:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2200      	movs	r2, #0
 8002914:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	2200      	movs	r2, #0
 800291a:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2200      	movs	r2, #0
 8002920:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800292a:	461a      	mov	r2, r3
 800292c:	2303      	movs	r3, #3
 800292e:	f8c2 3130 	str.w	r3, [r2, #304]	@ 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	691a      	ldr	r2, [r3, #16]
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800293e:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	691b      	ldr	r3, [r3, #16]
 8002946:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002952:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128
}
 8002956:	bf00      	nop
 8002958:	3714      	adds	r7, #20
 800295a:	46bd      	mov	sp, r7
 800295c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002960:	4770      	bx	lr
	...

08002964 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002964:	b480      	push	{r7}
 8002966:	b089      	sub	sp, #36	@ 0x24
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
 800296c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800296e:	2300      	movs	r3, #0
 8002970:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002972:	4b86      	ldr	r3, [pc, #536]	@ (8002b8c <HAL_GPIO_Init+0x228>)
 8002974:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002976:	e18c      	b.n	8002c92 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	681a      	ldr	r2, [r3, #0]
 800297c:	2101      	movs	r1, #1
 800297e:	69fb      	ldr	r3, [r7, #28]
 8002980:	fa01 f303 	lsl.w	r3, r1, r3
 8002984:	4013      	ands	r3, r2
 8002986:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002988:	693b      	ldr	r3, [r7, #16]
 800298a:	2b00      	cmp	r3, #0
 800298c:	f000 817e 	beq.w	8002c8c <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	685b      	ldr	r3, [r3, #4]
 8002994:	f003 0303 	and.w	r3, r3, #3
 8002998:	2b01      	cmp	r3, #1
 800299a:	d005      	beq.n	80029a8 <HAL_GPIO_Init+0x44>
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	685b      	ldr	r3, [r3, #4]
 80029a0:	f003 0303 	and.w	r3, r3, #3
 80029a4:	2b02      	cmp	r3, #2
 80029a6:	d130      	bne.n	8002a0a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	689b      	ldr	r3, [r3, #8]
 80029ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80029ae:	69fb      	ldr	r3, [r7, #28]
 80029b0:	005b      	lsls	r3, r3, #1
 80029b2:	2203      	movs	r2, #3
 80029b4:	fa02 f303 	lsl.w	r3, r2, r3
 80029b8:	43db      	mvns	r3, r3
 80029ba:	69ba      	ldr	r2, [r7, #24]
 80029bc:	4013      	ands	r3, r2
 80029be:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	68da      	ldr	r2, [r3, #12]
 80029c4:	69fb      	ldr	r3, [r7, #28]
 80029c6:	005b      	lsls	r3, r3, #1
 80029c8:	fa02 f303 	lsl.w	r3, r2, r3
 80029cc:	69ba      	ldr	r2, [r7, #24]
 80029ce:	4313      	orrs	r3, r2
 80029d0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	69ba      	ldr	r2, [r7, #24]
 80029d6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	685b      	ldr	r3, [r3, #4]
 80029dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80029de:	2201      	movs	r2, #1
 80029e0:	69fb      	ldr	r3, [r7, #28]
 80029e2:	fa02 f303 	lsl.w	r3, r2, r3
 80029e6:	43db      	mvns	r3, r3
 80029e8:	69ba      	ldr	r2, [r7, #24]
 80029ea:	4013      	ands	r3, r2
 80029ec:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	685b      	ldr	r3, [r3, #4]
 80029f2:	091b      	lsrs	r3, r3, #4
 80029f4:	f003 0201 	and.w	r2, r3, #1
 80029f8:	69fb      	ldr	r3, [r7, #28]
 80029fa:	fa02 f303 	lsl.w	r3, r2, r3
 80029fe:	69ba      	ldr	r2, [r7, #24]
 8002a00:	4313      	orrs	r3, r2
 8002a02:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	69ba      	ldr	r2, [r7, #24]
 8002a08:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	685b      	ldr	r3, [r3, #4]
 8002a0e:	f003 0303 	and.w	r3, r3, #3
 8002a12:	2b03      	cmp	r3, #3
 8002a14:	d017      	beq.n	8002a46 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	68db      	ldr	r3, [r3, #12]
 8002a1a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002a1c:	69fb      	ldr	r3, [r7, #28]
 8002a1e:	005b      	lsls	r3, r3, #1
 8002a20:	2203      	movs	r2, #3
 8002a22:	fa02 f303 	lsl.w	r3, r2, r3
 8002a26:	43db      	mvns	r3, r3
 8002a28:	69ba      	ldr	r2, [r7, #24]
 8002a2a:	4013      	ands	r3, r2
 8002a2c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	689a      	ldr	r2, [r3, #8]
 8002a32:	69fb      	ldr	r3, [r7, #28]
 8002a34:	005b      	lsls	r3, r3, #1
 8002a36:	fa02 f303 	lsl.w	r3, r2, r3
 8002a3a:	69ba      	ldr	r2, [r7, #24]
 8002a3c:	4313      	orrs	r3, r2
 8002a3e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	69ba      	ldr	r2, [r7, #24]
 8002a44:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	685b      	ldr	r3, [r3, #4]
 8002a4a:	f003 0303 	and.w	r3, r3, #3
 8002a4e:	2b02      	cmp	r3, #2
 8002a50:	d123      	bne.n	8002a9a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002a52:	69fb      	ldr	r3, [r7, #28]
 8002a54:	08da      	lsrs	r2, r3, #3
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	3208      	adds	r2, #8
 8002a5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002a60:	69fb      	ldr	r3, [r7, #28]
 8002a62:	f003 0307 	and.w	r3, r3, #7
 8002a66:	009b      	lsls	r3, r3, #2
 8002a68:	220f      	movs	r2, #15
 8002a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a6e:	43db      	mvns	r3, r3
 8002a70:	69ba      	ldr	r2, [r7, #24]
 8002a72:	4013      	ands	r3, r2
 8002a74:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	691a      	ldr	r2, [r3, #16]
 8002a7a:	69fb      	ldr	r3, [r7, #28]
 8002a7c:	f003 0307 	and.w	r3, r3, #7
 8002a80:	009b      	lsls	r3, r3, #2
 8002a82:	fa02 f303 	lsl.w	r3, r2, r3
 8002a86:	69ba      	ldr	r2, [r7, #24]
 8002a88:	4313      	orrs	r3, r2
 8002a8a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002a8c:	69fb      	ldr	r3, [r7, #28]
 8002a8e:	08da      	lsrs	r2, r3, #3
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	3208      	adds	r2, #8
 8002a94:	69b9      	ldr	r1, [r7, #24]
 8002a96:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002aa0:	69fb      	ldr	r3, [r7, #28]
 8002aa2:	005b      	lsls	r3, r3, #1
 8002aa4:	2203      	movs	r2, #3
 8002aa6:	fa02 f303 	lsl.w	r3, r2, r3
 8002aaa:	43db      	mvns	r3, r3
 8002aac:	69ba      	ldr	r2, [r7, #24]
 8002aae:	4013      	ands	r3, r2
 8002ab0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	685b      	ldr	r3, [r3, #4]
 8002ab6:	f003 0203 	and.w	r2, r3, #3
 8002aba:	69fb      	ldr	r3, [r7, #28]
 8002abc:	005b      	lsls	r3, r3, #1
 8002abe:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac2:	69ba      	ldr	r2, [r7, #24]
 8002ac4:	4313      	orrs	r3, r2
 8002ac6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	69ba      	ldr	r2, [r7, #24]
 8002acc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	685b      	ldr	r3, [r3, #4]
 8002ad2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	f000 80d8 	beq.w	8002c8c <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002adc:	4b2c      	ldr	r3, [pc, #176]	@ (8002b90 <HAL_GPIO_Init+0x22c>)
 8002ade:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002ae2:	4a2b      	ldr	r2, [pc, #172]	@ (8002b90 <HAL_GPIO_Init+0x22c>)
 8002ae4:	f043 0302 	orr.w	r3, r3, #2
 8002ae8:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8002aec:	4b28      	ldr	r3, [pc, #160]	@ (8002b90 <HAL_GPIO_Init+0x22c>)
 8002aee:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002af2:	f003 0302 	and.w	r3, r3, #2
 8002af6:	60fb      	str	r3, [r7, #12]
 8002af8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002afa:	4a26      	ldr	r2, [pc, #152]	@ (8002b94 <HAL_GPIO_Init+0x230>)
 8002afc:	69fb      	ldr	r3, [r7, #28]
 8002afe:	089b      	lsrs	r3, r3, #2
 8002b00:	3302      	adds	r3, #2
 8002b02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b06:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002b08:	69fb      	ldr	r3, [r7, #28]
 8002b0a:	f003 0303 	and.w	r3, r3, #3
 8002b0e:	009b      	lsls	r3, r3, #2
 8002b10:	220f      	movs	r2, #15
 8002b12:	fa02 f303 	lsl.w	r3, r2, r3
 8002b16:	43db      	mvns	r3, r3
 8002b18:	69ba      	ldr	r2, [r7, #24]
 8002b1a:	4013      	ands	r3, r2
 8002b1c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	4a1d      	ldr	r2, [pc, #116]	@ (8002b98 <HAL_GPIO_Init+0x234>)
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d04a      	beq.n	8002bbc <HAL_GPIO_Init+0x258>
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	4a1c      	ldr	r2, [pc, #112]	@ (8002b9c <HAL_GPIO_Init+0x238>)
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d02b      	beq.n	8002b86 <HAL_GPIO_Init+0x222>
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	4a1b      	ldr	r2, [pc, #108]	@ (8002ba0 <HAL_GPIO_Init+0x23c>)
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d025      	beq.n	8002b82 <HAL_GPIO_Init+0x21e>
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	4a1a      	ldr	r2, [pc, #104]	@ (8002ba4 <HAL_GPIO_Init+0x240>)
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d01f      	beq.n	8002b7e <HAL_GPIO_Init+0x21a>
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	4a19      	ldr	r2, [pc, #100]	@ (8002ba8 <HAL_GPIO_Init+0x244>)
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d019      	beq.n	8002b7a <HAL_GPIO_Init+0x216>
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	4a18      	ldr	r2, [pc, #96]	@ (8002bac <HAL_GPIO_Init+0x248>)
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d013      	beq.n	8002b76 <HAL_GPIO_Init+0x212>
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	4a17      	ldr	r2, [pc, #92]	@ (8002bb0 <HAL_GPIO_Init+0x24c>)
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d00d      	beq.n	8002b72 <HAL_GPIO_Init+0x20e>
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	4a16      	ldr	r2, [pc, #88]	@ (8002bb4 <HAL_GPIO_Init+0x250>)
 8002b5a:	4293      	cmp	r3, r2
 8002b5c:	d007      	beq.n	8002b6e <HAL_GPIO_Init+0x20a>
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	4a15      	ldr	r2, [pc, #84]	@ (8002bb8 <HAL_GPIO_Init+0x254>)
 8002b62:	4293      	cmp	r3, r2
 8002b64:	d101      	bne.n	8002b6a <HAL_GPIO_Init+0x206>
 8002b66:	2309      	movs	r3, #9
 8002b68:	e029      	b.n	8002bbe <HAL_GPIO_Init+0x25a>
 8002b6a:	230a      	movs	r3, #10
 8002b6c:	e027      	b.n	8002bbe <HAL_GPIO_Init+0x25a>
 8002b6e:	2307      	movs	r3, #7
 8002b70:	e025      	b.n	8002bbe <HAL_GPIO_Init+0x25a>
 8002b72:	2306      	movs	r3, #6
 8002b74:	e023      	b.n	8002bbe <HAL_GPIO_Init+0x25a>
 8002b76:	2305      	movs	r3, #5
 8002b78:	e021      	b.n	8002bbe <HAL_GPIO_Init+0x25a>
 8002b7a:	2304      	movs	r3, #4
 8002b7c:	e01f      	b.n	8002bbe <HAL_GPIO_Init+0x25a>
 8002b7e:	2303      	movs	r3, #3
 8002b80:	e01d      	b.n	8002bbe <HAL_GPIO_Init+0x25a>
 8002b82:	2302      	movs	r3, #2
 8002b84:	e01b      	b.n	8002bbe <HAL_GPIO_Init+0x25a>
 8002b86:	2301      	movs	r3, #1
 8002b88:	e019      	b.n	8002bbe <HAL_GPIO_Init+0x25a>
 8002b8a:	bf00      	nop
 8002b8c:	58000080 	.word	0x58000080
 8002b90:	58024400 	.word	0x58024400
 8002b94:	58000400 	.word	0x58000400
 8002b98:	58020000 	.word	0x58020000
 8002b9c:	58020400 	.word	0x58020400
 8002ba0:	58020800 	.word	0x58020800
 8002ba4:	58020c00 	.word	0x58020c00
 8002ba8:	58021000 	.word	0x58021000
 8002bac:	58021400 	.word	0x58021400
 8002bb0:	58021800 	.word	0x58021800
 8002bb4:	58021c00 	.word	0x58021c00
 8002bb8:	58022400 	.word	0x58022400
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	69fa      	ldr	r2, [r7, #28]
 8002bc0:	f002 0203 	and.w	r2, r2, #3
 8002bc4:	0092      	lsls	r2, r2, #2
 8002bc6:	4093      	lsls	r3, r2
 8002bc8:	69ba      	ldr	r2, [r7, #24]
 8002bca:	4313      	orrs	r3, r2
 8002bcc:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002bce:	4938      	ldr	r1, [pc, #224]	@ (8002cb0 <HAL_GPIO_Init+0x34c>)
 8002bd0:	69fb      	ldr	r3, [r7, #28]
 8002bd2:	089b      	lsrs	r3, r3, #2
 8002bd4:	3302      	adds	r3, #2
 8002bd6:	69ba      	ldr	r2, [r7, #24]
 8002bd8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002bdc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002be4:	693b      	ldr	r3, [r7, #16]
 8002be6:	43db      	mvns	r3, r3
 8002be8:	69ba      	ldr	r2, [r7, #24]
 8002bea:	4013      	ands	r3, r2
 8002bec:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	685b      	ldr	r3, [r3, #4]
 8002bf2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d003      	beq.n	8002c02 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8002bfa:	69ba      	ldr	r2, [r7, #24]
 8002bfc:	693b      	ldr	r3, [r7, #16]
 8002bfe:	4313      	orrs	r3, r2
 8002c00:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002c02:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002c06:	69bb      	ldr	r3, [r7, #24]
 8002c08:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002c0a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c0e:	685b      	ldr	r3, [r3, #4]
 8002c10:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002c12:	693b      	ldr	r3, [r7, #16]
 8002c14:	43db      	mvns	r3, r3
 8002c16:	69ba      	ldr	r2, [r7, #24]
 8002c18:	4013      	ands	r3, r2
 8002c1a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	685b      	ldr	r3, [r3, #4]
 8002c20:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d003      	beq.n	8002c30 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8002c28:	69ba      	ldr	r2, [r7, #24]
 8002c2a:	693b      	ldr	r3, [r7, #16]
 8002c2c:	4313      	orrs	r3, r2
 8002c2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002c30:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002c34:	69bb      	ldr	r3, [r7, #24]
 8002c36:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002c38:	697b      	ldr	r3, [r7, #20]
 8002c3a:	685b      	ldr	r3, [r3, #4]
 8002c3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002c3e:	693b      	ldr	r3, [r7, #16]
 8002c40:	43db      	mvns	r3, r3
 8002c42:	69ba      	ldr	r2, [r7, #24]
 8002c44:	4013      	ands	r3, r2
 8002c46:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d003      	beq.n	8002c5c <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8002c54:	69ba      	ldr	r2, [r7, #24]
 8002c56:	693b      	ldr	r3, [r7, #16]
 8002c58:	4313      	orrs	r3, r2
 8002c5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002c5c:	697b      	ldr	r3, [r7, #20]
 8002c5e:	69ba      	ldr	r2, [r7, #24]
 8002c60:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002c62:	697b      	ldr	r3, [r7, #20]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002c68:	693b      	ldr	r3, [r7, #16]
 8002c6a:	43db      	mvns	r3, r3
 8002c6c:	69ba      	ldr	r2, [r7, #24]
 8002c6e:	4013      	ands	r3, r2
 8002c70:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	685b      	ldr	r3, [r3, #4]
 8002c76:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d003      	beq.n	8002c86 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8002c7e:	69ba      	ldr	r2, [r7, #24]
 8002c80:	693b      	ldr	r3, [r7, #16]
 8002c82:	4313      	orrs	r3, r2
 8002c84:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002c86:	697b      	ldr	r3, [r7, #20]
 8002c88:	69ba      	ldr	r2, [r7, #24]
 8002c8a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002c8c:	69fb      	ldr	r3, [r7, #28]
 8002c8e:	3301      	adds	r3, #1
 8002c90:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	681a      	ldr	r2, [r3, #0]
 8002c96:	69fb      	ldr	r3, [r7, #28]
 8002c98:	fa22 f303 	lsr.w	r3, r2, r3
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	f47f ae6b 	bne.w	8002978 <HAL_GPIO_Init+0x14>
  }
}
 8002ca2:	bf00      	nop
 8002ca4:	bf00      	nop
 8002ca6:	3724      	adds	r7, #36	@ 0x24
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cae:	4770      	bx	lr
 8002cb0:	58000400 	.word	0x58000400

08002cb4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	b083      	sub	sp, #12
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
 8002cbc:	460b      	mov	r3, r1
 8002cbe:	807b      	strh	r3, [r7, #2]
 8002cc0:	4613      	mov	r3, r2
 8002cc2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002cc4:	787b      	ldrb	r3, [r7, #1]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d003      	beq.n	8002cd2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002cca:	887a      	ldrh	r2, [r7, #2]
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002cd0:	e003      	b.n	8002cda <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002cd2:	887b      	ldrh	r3, [r7, #2]
 8002cd4:	041a      	lsls	r2, r3, #16
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	619a      	str	r2, [r3, #24]
}
 8002cda:	bf00      	nop
 8002cdc:	370c      	adds	r7, #12
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce4:	4770      	bx	lr
	...

08002ce8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b084      	sub	sp, #16
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8002cf0:	4b19      	ldr	r3, [pc, #100]	@ (8002d58 <HAL_PWREx_ConfigSupply+0x70>)
 8002cf2:	68db      	ldr	r3, [r3, #12]
 8002cf4:	f003 0304 	and.w	r3, r3, #4
 8002cf8:	2b04      	cmp	r3, #4
 8002cfa:	d00a      	beq.n	8002d12 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002cfc:	4b16      	ldr	r3, [pc, #88]	@ (8002d58 <HAL_PWREx_ConfigSupply+0x70>)
 8002cfe:	68db      	ldr	r3, [r3, #12]
 8002d00:	f003 0307 	and.w	r3, r3, #7
 8002d04:	687a      	ldr	r2, [r7, #4]
 8002d06:	429a      	cmp	r2, r3
 8002d08:	d001      	beq.n	8002d0e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	e01f      	b.n	8002d4e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002d0e:	2300      	movs	r3, #0
 8002d10:	e01d      	b.n	8002d4e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002d12:	4b11      	ldr	r3, [pc, #68]	@ (8002d58 <HAL_PWREx_ConfigSupply+0x70>)
 8002d14:	68db      	ldr	r3, [r3, #12]
 8002d16:	f023 0207 	bic.w	r2, r3, #7
 8002d1a:	490f      	ldr	r1, [pc, #60]	@ (8002d58 <HAL_PWREx_ConfigSupply+0x70>)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	4313      	orrs	r3, r2
 8002d20:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002d22:	f7ff f8e7 	bl	8001ef4 <HAL_GetTick>
 8002d26:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002d28:	e009      	b.n	8002d3e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002d2a:	f7ff f8e3 	bl	8001ef4 <HAL_GetTick>
 8002d2e:	4602      	mov	r2, r0
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	1ad3      	subs	r3, r2, r3
 8002d34:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002d38:	d901      	bls.n	8002d3e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	e007      	b.n	8002d4e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002d3e:	4b06      	ldr	r3, [pc, #24]	@ (8002d58 <HAL_PWREx_ConfigSupply+0x70>)
 8002d40:	685b      	ldr	r3, [r3, #4]
 8002d42:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002d46:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002d4a:	d1ee      	bne.n	8002d2a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002d4c:	2300      	movs	r3, #0
}
 8002d4e:	4618      	mov	r0, r3
 8002d50:	3710      	adds	r7, #16
 8002d52:	46bd      	mov	sp, r7
 8002d54:	bd80      	pop	{r7, pc}
 8002d56:	bf00      	nop
 8002d58:	58024800 	.word	0x58024800

08002d5c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b08c      	sub	sp, #48	@ 0x30
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d101      	bne.n	8002d6e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	e3c8      	b.n	8003500 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f003 0301 	and.w	r3, r3, #1
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	f000 8087 	beq.w	8002e8a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002d7c:	4b88      	ldr	r3, [pc, #544]	@ (8002fa0 <HAL_RCC_OscConfig+0x244>)
 8002d7e:	691b      	ldr	r3, [r3, #16]
 8002d80:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002d84:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002d86:	4b86      	ldr	r3, [pc, #536]	@ (8002fa0 <HAL_RCC_OscConfig+0x244>)
 8002d88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d8a:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002d8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d8e:	2b10      	cmp	r3, #16
 8002d90:	d007      	beq.n	8002da2 <HAL_RCC_OscConfig+0x46>
 8002d92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d94:	2b18      	cmp	r3, #24
 8002d96:	d110      	bne.n	8002dba <HAL_RCC_OscConfig+0x5e>
 8002d98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d9a:	f003 0303 	and.w	r3, r3, #3
 8002d9e:	2b02      	cmp	r3, #2
 8002da0:	d10b      	bne.n	8002dba <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002da2:	4b7f      	ldr	r3, [pc, #508]	@ (8002fa0 <HAL_RCC_OscConfig+0x244>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d06c      	beq.n	8002e88 <HAL_RCC_OscConfig+0x12c>
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	685b      	ldr	r3, [r3, #4]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d168      	bne.n	8002e88 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002db6:	2301      	movs	r3, #1
 8002db8:	e3a2      	b.n	8003500 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	685b      	ldr	r3, [r3, #4]
 8002dbe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002dc2:	d106      	bne.n	8002dd2 <HAL_RCC_OscConfig+0x76>
 8002dc4:	4b76      	ldr	r3, [pc, #472]	@ (8002fa0 <HAL_RCC_OscConfig+0x244>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4a75      	ldr	r2, [pc, #468]	@ (8002fa0 <HAL_RCC_OscConfig+0x244>)
 8002dca:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002dce:	6013      	str	r3, [r2, #0]
 8002dd0:	e02e      	b.n	8002e30 <HAL_RCC_OscConfig+0xd4>
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	685b      	ldr	r3, [r3, #4]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d10c      	bne.n	8002df4 <HAL_RCC_OscConfig+0x98>
 8002dda:	4b71      	ldr	r3, [pc, #452]	@ (8002fa0 <HAL_RCC_OscConfig+0x244>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	4a70      	ldr	r2, [pc, #448]	@ (8002fa0 <HAL_RCC_OscConfig+0x244>)
 8002de0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002de4:	6013      	str	r3, [r2, #0]
 8002de6:	4b6e      	ldr	r3, [pc, #440]	@ (8002fa0 <HAL_RCC_OscConfig+0x244>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4a6d      	ldr	r2, [pc, #436]	@ (8002fa0 <HAL_RCC_OscConfig+0x244>)
 8002dec:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002df0:	6013      	str	r3, [r2, #0]
 8002df2:	e01d      	b.n	8002e30 <HAL_RCC_OscConfig+0xd4>
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	685b      	ldr	r3, [r3, #4]
 8002df8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002dfc:	d10c      	bne.n	8002e18 <HAL_RCC_OscConfig+0xbc>
 8002dfe:	4b68      	ldr	r3, [pc, #416]	@ (8002fa0 <HAL_RCC_OscConfig+0x244>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	4a67      	ldr	r2, [pc, #412]	@ (8002fa0 <HAL_RCC_OscConfig+0x244>)
 8002e04:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002e08:	6013      	str	r3, [r2, #0]
 8002e0a:	4b65      	ldr	r3, [pc, #404]	@ (8002fa0 <HAL_RCC_OscConfig+0x244>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	4a64      	ldr	r2, [pc, #400]	@ (8002fa0 <HAL_RCC_OscConfig+0x244>)
 8002e10:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e14:	6013      	str	r3, [r2, #0]
 8002e16:	e00b      	b.n	8002e30 <HAL_RCC_OscConfig+0xd4>
 8002e18:	4b61      	ldr	r3, [pc, #388]	@ (8002fa0 <HAL_RCC_OscConfig+0x244>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4a60      	ldr	r2, [pc, #384]	@ (8002fa0 <HAL_RCC_OscConfig+0x244>)
 8002e1e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002e22:	6013      	str	r3, [r2, #0]
 8002e24:	4b5e      	ldr	r3, [pc, #376]	@ (8002fa0 <HAL_RCC_OscConfig+0x244>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4a5d      	ldr	r2, [pc, #372]	@ (8002fa0 <HAL_RCC_OscConfig+0x244>)
 8002e2a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002e2e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	685b      	ldr	r3, [r3, #4]
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d013      	beq.n	8002e60 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e38:	f7ff f85c 	bl	8001ef4 <HAL_GetTick>
 8002e3c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002e3e:	e008      	b.n	8002e52 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e40:	f7ff f858 	bl	8001ef4 <HAL_GetTick>
 8002e44:	4602      	mov	r2, r0
 8002e46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e48:	1ad3      	subs	r3, r2, r3
 8002e4a:	2b64      	cmp	r3, #100	@ 0x64
 8002e4c:	d901      	bls.n	8002e52 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002e4e:	2303      	movs	r3, #3
 8002e50:	e356      	b.n	8003500 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002e52:	4b53      	ldr	r3, [pc, #332]	@ (8002fa0 <HAL_RCC_OscConfig+0x244>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d0f0      	beq.n	8002e40 <HAL_RCC_OscConfig+0xe4>
 8002e5e:	e014      	b.n	8002e8a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e60:	f7ff f848 	bl	8001ef4 <HAL_GetTick>
 8002e64:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002e66:	e008      	b.n	8002e7a <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e68:	f7ff f844 	bl	8001ef4 <HAL_GetTick>
 8002e6c:	4602      	mov	r2, r0
 8002e6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e70:	1ad3      	subs	r3, r2, r3
 8002e72:	2b64      	cmp	r3, #100	@ 0x64
 8002e74:	d901      	bls.n	8002e7a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002e76:	2303      	movs	r3, #3
 8002e78:	e342      	b.n	8003500 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002e7a:	4b49      	ldr	r3, [pc, #292]	@ (8002fa0 <HAL_RCC_OscConfig+0x244>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d1f0      	bne.n	8002e68 <HAL_RCC_OscConfig+0x10c>
 8002e86:	e000      	b.n	8002e8a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e88:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f003 0302 	and.w	r3, r3, #2
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	f000 808c 	beq.w	8002fb0 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002e98:	4b41      	ldr	r3, [pc, #260]	@ (8002fa0 <HAL_RCC_OscConfig+0x244>)
 8002e9a:	691b      	ldr	r3, [r3, #16]
 8002e9c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002ea0:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002ea2:	4b3f      	ldr	r3, [pc, #252]	@ (8002fa0 <HAL_RCC_OscConfig+0x244>)
 8002ea4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ea6:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002ea8:	6a3b      	ldr	r3, [r7, #32]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d007      	beq.n	8002ebe <HAL_RCC_OscConfig+0x162>
 8002eae:	6a3b      	ldr	r3, [r7, #32]
 8002eb0:	2b18      	cmp	r3, #24
 8002eb2:	d137      	bne.n	8002f24 <HAL_RCC_OscConfig+0x1c8>
 8002eb4:	69fb      	ldr	r3, [r7, #28]
 8002eb6:	f003 0303 	and.w	r3, r3, #3
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d132      	bne.n	8002f24 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002ebe:	4b38      	ldr	r3, [pc, #224]	@ (8002fa0 <HAL_RCC_OscConfig+0x244>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f003 0304 	and.w	r3, r3, #4
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d005      	beq.n	8002ed6 <HAL_RCC_OscConfig+0x17a>
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	68db      	ldr	r3, [r3, #12]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d101      	bne.n	8002ed6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	e314      	b.n	8003500 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002ed6:	4b32      	ldr	r3, [pc, #200]	@ (8002fa0 <HAL_RCC_OscConfig+0x244>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f023 0219 	bic.w	r2, r3, #25
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	68db      	ldr	r3, [r3, #12]
 8002ee2:	492f      	ldr	r1, [pc, #188]	@ (8002fa0 <HAL_RCC_OscConfig+0x244>)
 8002ee4:	4313      	orrs	r3, r2
 8002ee6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ee8:	f7ff f804 	bl	8001ef4 <HAL_GetTick>
 8002eec:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002eee:	e008      	b.n	8002f02 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ef0:	f7ff f800 	bl	8001ef4 <HAL_GetTick>
 8002ef4:	4602      	mov	r2, r0
 8002ef6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ef8:	1ad3      	subs	r3, r2, r3
 8002efa:	2b02      	cmp	r3, #2
 8002efc:	d901      	bls.n	8002f02 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8002efe:	2303      	movs	r3, #3
 8002f00:	e2fe      	b.n	8003500 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002f02:	4b27      	ldr	r3, [pc, #156]	@ (8002fa0 <HAL_RCC_OscConfig+0x244>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f003 0304 	and.w	r3, r3, #4
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d0f0      	beq.n	8002ef0 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f0e:	4b24      	ldr	r3, [pc, #144]	@ (8002fa0 <HAL_RCC_OscConfig+0x244>)
 8002f10:	685b      	ldr	r3, [r3, #4]
 8002f12:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	691b      	ldr	r3, [r3, #16]
 8002f1a:	061b      	lsls	r3, r3, #24
 8002f1c:	4920      	ldr	r1, [pc, #128]	@ (8002fa0 <HAL_RCC_OscConfig+0x244>)
 8002f1e:	4313      	orrs	r3, r2
 8002f20:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002f22:	e045      	b.n	8002fb0 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	68db      	ldr	r3, [r3, #12]
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d026      	beq.n	8002f7a <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002f2c:	4b1c      	ldr	r3, [pc, #112]	@ (8002fa0 <HAL_RCC_OscConfig+0x244>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f023 0219 	bic.w	r2, r3, #25
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	68db      	ldr	r3, [r3, #12]
 8002f38:	4919      	ldr	r1, [pc, #100]	@ (8002fa0 <HAL_RCC_OscConfig+0x244>)
 8002f3a:	4313      	orrs	r3, r2
 8002f3c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f3e:	f7fe ffd9 	bl	8001ef4 <HAL_GetTick>
 8002f42:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002f44:	e008      	b.n	8002f58 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f46:	f7fe ffd5 	bl	8001ef4 <HAL_GetTick>
 8002f4a:	4602      	mov	r2, r0
 8002f4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f4e:	1ad3      	subs	r3, r2, r3
 8002f50:	2b02      	cmp	r3, #2
 8002f52:	d901      	bls.n	8002f58 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8002f54:	2303      	movs	r3, #3
 8002f56:	e2d3      	b.n	8003500 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002f58:	4b11      	ldr	r3, [pc, #68]	@ (8002fa0 <HAL_RCC_OscConfig+0x244>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f003 0304 	and.w	r3, r3, #4
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d0f0      	beq.n	8002f46 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f64:	4b0e      	ldr	r3, [pc, #56]	@ (8002fa0 <HAL_RCC_OscConfig+0x244>)
 8002f66:	685b      	ldr	r3, [r3, #4]
 8002f68:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	691b      	ldr	r3, [r3, #16]
 8002f70:	061b      	lsls	r3, r3, #24
 8002f72:	490b      	ldr	r1, [pc, #44]	@ (8002fa0 <HAL_RCC_OscConfig+0x244>)
 8002f74:	4313      	orrs	r3, r2
 8002f76:	604b      	str	r3, [r1, #4]
 8002f78:	e01a      	b.n	8002fb0 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f7a:	4b09      	ldr	r3, [pc, #36]	@ (8002fa0 <HAL_RCC_OscConfig+0x244>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	4a08      	ldr	r2, [pc, #32]	@ (8002fa0 <HAL_RCC_OscConfig+0x244>)
 8002f80:	f023 0301 	bic.w	r3, r3, #1
 8002f84:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f86:	f7fe ffb5 	bl	8001ef4 <HAL_GetTick>
 8002f8a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002f8c:	e00a      	b.n	8002fa4 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f8e:	f7fe ffb1 	bl	8001ef4 <HAL_GetTick>
 8002f92:	4602      	mov	r2, r0
 8002f94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f96:	1ad3      	subs	r3, r2, r3
 8002f98:	2b02      	cmp	r3, #2
 8002f9a:	d903      	bls.n	8002fa4 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8002f9c:	2303      	movs	r3, #3
 8002f9e:	e2af      	b.n	8003500 <HAL_RCC_OscConfig+0x7a4>
 8002fa0:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002fa4:	4b96      	ldr	r3, [pc, #600]	@ (8003200 <HAL_RCC_OscConfig+0x4a4>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f003 0304 	and.w	r3, r3, #4
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d1ee      	bne.n	8002f8e <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f003 0310 	and.w	r3, r3, #16
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d06a      	beq.n	8003092 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002fbc:	4b90      	ldr	r3, [pc, #576]	@ (8003200 <HAL_RCC_OscConfig+0x4a4>)
 8002fbe:	691b      	ldr	r3, [r3, #16]
 8002fc0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002fc4:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002fc6:	4b8e      	ldr	r3, [pc, #568]	@ (8003200 <HAL_RCC_OscConfig+0x4a4>)
 8002fc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fca:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002fcc:	69bb      	ldr	r3, [r7, #24]
 8002fce:	2b08      	cmp	r3, #8
 8002fd0:	d007      	beq.n	8002fe2 <HAL_RCC_OscConfig+0x286>
 8002fd2:	69bb      	ldr	r3, [r7, #24]
 8002fd4:	2b18      	cmp	r3, #24
 8002fd6:	d11b      	bne.n	8003010 <HAL_RCC_OscConfig+0x2b4>
 8002fd8:	697b      	ldr	r3, [r7, #20]
 8002fda:	f003 0303 	and.w	r3, r3, #3
 8002fde:	2b01      	cmp	r3, #1
 8002fe0:	d116      	bne.n	8003010 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002fe2:	4b87      	ldr	r3, [pc, #540]	@ (8003200 <HAL_RCC_OscConfig+0x4a4>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d005      	beq.n	8002ffa <HAL_RCC_OscConfig+0x29e>
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	69db      	ldr	r3, [r3, #28]
 8002ff2:	2b80      	cmp	r3, #128	@ 0x80
 8002ff4:	d001      	beq.n	8002ffa <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	e282      	b.n	8003500 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002ffa:	4b81      	ldr	r3, [pc, #516]	@ (8003200 <HAL_RCC_OscConfig+0x4a4>)
 8002ffc:	68db      	ldr	r3, [r3, #12]
 8002ffe:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6a1b      	ldr	r3, [r3, #32]
 8003006:	061b      	lsls	r3, r3, #24
 8003008:	497d      	ldr	r1, [pc, #500]	@ (8003200 <HAL_RCC_OscConfig+0x4a4>)
 800300a:	4313      	orrs	r3, r2
 800300c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800300e:	e040      	b.n	8003092 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	69db      	ldr	r3, [r3, #28]
 8003014:	2b00      	cmp	r3, #0
 8003016:	d023      	beq.n	8003060 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003018:	4b79      	ldr	r3, [pc, #484]	@ (8003200 <HAL_RCC_OscConfig+0x4a4>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4a78      	ldr	r2, [pc, #480]	@ (8003200 <HAL_RCC_OscConfig+0x4a4>)
 800301e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003022:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003024:	f7fe ff66 	bl	8001ef4 <HAL_GetTick>
 8003028:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800302a:	e008      	b.n	800303e <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800302c:	f7fe ff62 	bl	8001ef4 <HAL_GetTick>
 8003030:	4602      	mov	r2, r0
 8003032:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003034:	1ad3      	subs	r3, r2, r3
 8003036:	2b02      	cmp	r3, #2
 8003038:	d901      	bls.n	800303e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800303a:	2303      	movs	r3, #3
 800303c:	e260      	b.n	8003500 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800303e:	4b70      	ldr	r3, [pc, #448]	@ (8003200 <HAL_RCC_OscConfig+0x4a4>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003046:	2b00      	cmp	r3, #0
 8003048:	d0f0      	beq.n	800302c <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800304a:	4b6d      	ldr	r3, [pc, #436]	@ (8003200 <HAL_RCC_OscConfig+0x4a4>)
 800304c:	68db      	ldr	r3, [r3, #12]
 800304e:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6a1b      	ldr	r3, [r3, #32]
 8003056:	061b      	lsls	r3, r3, #24
 8003058:	4969      	ldr	r1, [pc, #420]	@ (8003200 <HAL_RCC_OscConfig+0x4a4>)
 800305a:	4313      	orrs	r3, r2
 800305c:	60cb      	str	r3, [r1, #12]
 800305e:	e018      	b.n	8003092 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003060:	4b67      	ldr	r3, [pc, #412]	@ (8003200 <HAL_RCC_OscConfig+0x4a4>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	4a66      	ldr	r2, [pc, #408]	@ (8003200 <HAL_RCC_OscConfig+0x4a4>)
 8003066:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800306a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800306c:	f7fe ff42 	bl	8001ef4 <HAL_GetTick>
 8003070:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003072:	e008      	b.n	8003086 <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003074:	f7fe ff3e 	bl	8001ef4 <HAL_GetTick>
 8003078:	4602      	mov	r2, r0
 800307a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800307c:	1ad3      	subs	r3, r2, r3
 800307e:	2b02      	cmp	r3, #2
 8003080:	d901      	bls.n	8003086 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8003082:	2303      	movs	r3, #3
 8003084:	e23c      	b.n	8003500 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003086:	4b5e      	ldr	r3, [pc, #376]	@ (8003200 <HAL_RCC_OscConfig+0x4a4>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800308e:	2b00      	cmp	r3, #0
 8003090:	d1f0      	bne.n	8003074 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f003 0308 	and.w	r3, r3, #8
 800309a:	2b00      	cmp	r3, #0
 800309c:	d036      	beq.n	800310c <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	695b      	ldr	r3, [r3, #20]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d019      	beq.n	80030da <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80030a6:	4b56      	ldr	r3, [pc, #344]	@ (8003200 <HAL_RCC_OscConfig+0x4a4>)
 80030a8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80030aa:	4a55      	ldr	r2, [pc, #340]	@ (8003200 <HAL_RCC_OscConfig+0x4a4>)
 80030ac:	f043 0301 	orr.w	r3, r3, #1
 80030b0:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030b2:	f7fe ff1f 	bl	8001ef4 <HAL_GetTick>
 80030b6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80030b8:	e008      	b.n	80030cc <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80030ba:	f7fe ff1b 	bl	8001ef4 <HAL_GetTick>
 80030be:	4602      	mov	r2, r0
 80030c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030c2:	1ad3      	subs	r3, r2, r3
 80030c4:	2b02      	cmp	r3, #2
 80030c6:	d901      	bls.n	80030cc <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 80030c8:	2303      	movs	r3, #3
 80030ca:	e219      	b.n	8003500 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80030cc:	4b4c      	ldr	r3, [pc, #304]	@ (8003200 <HAL_RCC_OscConfig+0x4a4>)
 80030ce:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80030d0:	f003 0302 	and.w	r3, r3, #2
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d0f0      	beq.n	80030ba <HAL_RCC_OscConfig+0x35e>
 80030d8:	e018      	b.n	800310c <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80030da:	4b49      	ldr	r3, [pc, #292]	@ (8003200 <HAL_RCC_OscConfig+0x4a4>)
 80030dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80030de:	4a48      	ldr	r2, [pc, #288]	@ (8003200 <HAL_RCC_OscConfig+0x4a4>)
 80030e0:	f023 0301 	bic.w	r3, r3, #1
 80030e4:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030e6:	f7fe ff05 	bl	8001ef4 <HAL_GetTick>
 80030ea:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80030ec:	e008      	b.n	8003100 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80030ee:	f7fe ff01 	bl	8001ef4 <HAL_GetTick>
 80030f2:	4602      	mov	r2, r0
 80030f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030f6:	1ad3      	subs	r3, r2, r3
 80030f8:	2b02      	cmp	r3, #2
 80030fa:	d901      	bls.n	8003100 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 80030fc:	2303      	movs	r3, #3
 80030fe:	e1ff      	b.n	8003500 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003100:	4b3f      	ldr	r3, [pc, #252]	@ (8003200 <HAL_RCC_OscConfig+0x4a4>)
 8003102:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003104:	f003 0302 	and.w	r3, r3, #2
 8003108:	2b00      	cmp	r3, #0
 800310a:	d1f0      	bne.n	80030ee <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f003 0320 	and.w	r3, r3, #32
 8003114:	2b00      	cmp	r3, #0
 8003116:	d036      	beq.n	8003186 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	699b      	ldr	r3, [r3, #24]
 800311c:	2b00      	cmp	r3, #0
 800311e:	d019      	beq.n	8003154 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003120:	4b37      	ldr	r3, [pc, #220]	@ (8003200 <HAL_RCC_OscConfig+0x4a4>)
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	4a36      	ldr	r2, [pc, #216]	@ (8003200 <HAL_RCC_OscConfig+0x4a4>)
 8003126:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800312a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800312c:	f7fe fee2 	bl	8001ef4 <HAL_GetTick>
 8003130:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003132:	e008      	b.n	8003146 <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003134:	f7fe fede 	bl	8001ef4 <HAL_GetTick>
 8003138:	4602      	mov	r2, r0
 800313a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800313c:	1ad3      	subs	r3, r2, r3
 800313e:	2b02      	cmp	r3, #2
 8003140:	d901      	bls.n	8003146 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8003142:	2303      	movs	r3, #3
 8003144:	e1dc      	b.n	8003500 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003146:	4b2e      	ldr	r3, [pc, #184]	@ (8003200 <HAL_RCC_OscConfig+0x4a4>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800314e:	2b00      	cmp	r3, #0
 8003150:	d0f0      	beq.n	8003134 <HAL_RCC_OscConfig+0x3d8>
 8003152:	e018      	b.n	8003186 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003154:	4b2a      	ldr	r3, [pc, #168]	@ (8003200 <HAL_RCC_OscConfig+0x4a4>)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	4a29      	ldr	r2, [pc, #164]	@ (8003200 <HAL_RCC_OscConfig+0x4a4>)
 800315a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800315e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003160:	f7fe fec8 	bl	8001ef4 <HAL_GetTick>
 8003164:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003166:	e008      	b.n	800317a <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003168:	f7fe fec4 	bl	8001ef4 <HAL_GetTick>
 800316c:	4602      	mov	r2, r0
 800316e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003170:	1ad3      	subs	r3, r2, r3
 8003172:	2b02      	cmp	r3, #2
 8003174:	d901      	bls.n	800317a <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8003176:	2303      	movs	r3, #3
 8003178:	e1c2      	b.n	8003500 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800317a:	4b21      	ldr	r3, [pc, #132]	@ (8003200 <HAL_RCC_OscConfig+0x4a4>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003182:	2b00      	cmp	r3, #0
 8003184:	d1f0      	bne.n	8003168 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f003 0304 	and.w	r3, r3, #4
 800318e:	2b00      	cmp	r3, #0
 8003190:	f000 8086 	beq.w	80032a0 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003194:	4b1b      	ldr	r3, [pc, #108]	@ (8003204 <HAL_RCC_OscConfig+0x4a8>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	4a1a      	ldr	r2, [pc, #104]	@ (8003204 <HAL_RCC_OscConfig+0x4a8>)
 800319a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800319e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80031a0:	f7fe fea8 	bl	8001ef4 <HAL_GetTick>
 80031a4:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80031a6:	e008      	b.n	80031ba <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031a8:	f7fe fea4 	bl	8001ef4 <HAL_GetTick>
 80031ac:	4602      	mov	r2, r0
 80031ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031b0:	1ad3      	subs	r3, r2, r3
 80031b2:	2b64      	cmp	r3, #100	@ 0x64
 80031b4:	d901      	bls.n	80031ba <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 80031b6:	2303      	movs	r3, #3
 80031b8:	e1a2      	b.n	8003500 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80031ba:	4b12      	ldr	r3, [pc, #72]	@ (8003204 <HAL_RCC_OscConfig+0x4a8>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d0f0      	beq.n	80031a8 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	689b      	ldr	r3, [r3, #8]
 80031ca:	2b01      	cmp	r3, #1
 80031cc:	d106      	bne.n	80031dc <HAL_RCC_OscConfig+0x480>
 80031ce:	4b0c      	ldr	r3, [pc, #48]	@ (8003200 <HAL_RCC_OscConfig+0x4a4>)
 80031d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031d2:	4a0b      	ldr	r2, [pc, #44]	@ (8003200 <HAL_RCC_OscConfig+0x4a4>)
 80031d4:	f043 0301 	orr.w	r3, r3, #1
 80031d8:	6713      	str	r3, [r2, #112]	@ 0x70
 80031da:	e032      	b.n	8003242 <HAL_RCC_OscConfig+0x4e6>
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	689b      	ldr	r3, [r3, #8]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d111      	bne.n	8003208 <HAL_RCC_OscConfig+0x4ac>
 80031e4:	4b06      	ldr	r3, [pc, #24]	@ (8003200 <HAL_RCC_OscConfig+0x4a4>)
 80031e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031e8:	4a05      	ldr	r2, [pc, #20]	@ (8003200 <HAL_RCC_OscConfig+0x4a4>)
 80031ea:	f023 0301 	bic.w	r3, r3, #1
 80031ee:	6713      	str	r3, [r2, #112]	@ 0x70
 80031f0:	4b03      	ldr	r3, [pc, #12]	@ (8003200 <HAL_RCC_OscConfig+0x4a4>)
 80031f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031f4:	4a02      	ldr	r2, [pc, #8]	@ (8003200 <HAL_RCC_OscConfig+0x4a4>)
 80031f6:	f023 0304 	bic.w	r3, r3, #4
 80031fa:	6713      	str	r3, [r2, #112]	@ 0x70
 80031fc:	e021      	b.n	8003242 <HAL_RCC_OscConfig+0x4e6>
 80031fe:	bf00      	nop
 8003200:	58024400 	.word	0x58024400
 8003204:	58024800 	.word	0x58024800
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	689b      	ldr	r3, [r3, #8]
 800320c:	2b05      	cmp	r3, #5
 800320e:	d10c      	bne.n	800322a <HAL_RCC_OscConfig+0x4ce>
 8003210:	4b83      	ldr	r3, [pc, #524]	@ (8003420 <HAL_RCC_OscConfig+0x6c4>)
 8003212:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003214:	4a82      	ldr	r2, [pc, #520]	@ (8003420 <HAL_RCC_OscConfig+0x6c4>)
 8003216:	f043 0304 	orr.w	r3, r3, #4
 800321a:	6713      	str	r3, [r2, #112]	@ 0x70
 800321c:	4b80      	ldr	r3, [pc, #512]	@ (8003420 <HAL_RCC_OscConfig+0x6c4>)
 800321e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003220:	4a7f      	ldr	r2, [pc, #508]	@ (8003420 <HAL_RCC_OscConfig+0x6c4>)
 8003222:	f043 0301 	orr.w	r3, r3, #1
 8003226:	6713      	str	r3, [r2, #112]	@ 0x70
 8003228:	e00b      	b.n	8003242 <HAL_RCC_OscConfig+0x4e6>
 800322a:	4b7d      	ldr	r3, [pc, #500]	@ (8003420 <HAL_RCC_OscConfig+0x6c4>)
 800322c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800322e:	4a7c      	ldr	r2, [pc, #496]	@ (8003420 <HAL_RCC_OscConfig+0x6c4>)
 8003230:	f023 0301 	bic.w	r3, r3, #1
 8003234:	6713      	str	r3, [r2, #112]	@ 0x70
 8003236:	4b7a      	ldr	r3, [pc, #488]	@ (8003420 <HAL_RCC_OscConfig+0x6c4>)
 8003238:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800323a:	4a79      	ldr	r2, [pc, #484]	@ (8003420 <HAL_RCC_OscConfig+0x6c4>)
 800323c:	f023 0304 	bic.w	r3, r3, #4
 8003240:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	689b      	ldr	r3, [r3, #8]
 8003246:	2b00      	cmp	r3, #0
 8003248:	d015      	beq.n	8003276 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800324a:	f7fe fe53 	bl	8001ef4 <HAL_GetTick>
 800324e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003250:	e00a      	b.n	8003268 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003252:	f7fe fe4f 	bl	8001ef4 <HAL_GetTick>
 8003256:	4602      	mov	r2, r0
 8003258:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800325a:	1ad3      	subs	r3, r2, r3
 800325c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003260:	4293      	cmp	r3, r2
 8003262:	d901      	bls.n	8003268 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8003264:	2303      	movs	r3, #3
 8003266:	e14b      	b.n	8003500 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003268:	4b6d      	ldr	r3, [pc, #436]	@ (8003420 <HAL_RCC_OscConfig+0x6c4>)
 800326a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800326c:	f003 0302 	and.w	r3, r3, #2
 8003270:	2b00      	cmp	r3, #0
 8003272:	d0ee      	beq.n	8003252 <HAL_RCC_OscConfig+0x4f6>
 8003274:	e014      	b.n	80032a0 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003276:	f7fe fe3d 	bl	8001ef4 <HAL_GetTick>
 800327a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800327c:	e00a      	b.n	8003294 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800327e:	f7fe fe39 	bl	8001ef4 <HAL_GetTick>
 8003282:	4602      	mov	r2, r0
 8003284:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003286:	1ad3      	subs	r3, r2, r3
 8003288:	f241 3288 	movw	r2, #5000	@ 0x1388
 800328c:	4293      	cmp	r3, r2
 800328e:	d901      	bls.n	8003294 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8003290:	2303      	movs	r3, #3
 8003292:	e135      	b.n	8003500 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003294:	4b62      	ldr	r3, [pc, #392]	@ (8003420 <HAL_RCC_OscConfig+0x6c4>)
 8003296:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003298:	f003 0302 	and.w	r3, r3, #2
 800329c:	2b00      	cmp	r3, #0
 800329e:	d1ee      	bne.n	800327e <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	f000 812a 	beq.w	80034fe <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80032aa:	4b5d      	ldr	r3, [pc, #372]	@ (8003420 <HAL_RCC_OscConfig+0x6c4>)
 80032ac:	691b      	ldr	r3, [r3, #16]
 80032ae:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80032b2:	2b18      	cmp	r3, #24
 80032b4:	f000 80ba 	beq.w	800342c <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032bc:	2b02      	cmp	r3, #2
 80032be:	f040 8095 	bne.w	80033ec <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032c2:	4b57      	ldr	r3, [pc, #348]	@ (8003420 <HAL_RCC_OscConfig+0x6c4>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	4a56      	ldr	r2, [pc, #344]	@ (8003420 <HAL_RCC_OscConfig+0x6c4>)
 80032c8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80032cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032ce:	f7fe fe11 	bl	8001ef4 <HAL_GetTick>
 80032d2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80032d4:	e008      	b.n	80032e8 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032d6:	f7fe fe0d 	bl	8001ef4 <HAL_GetTick>
 80032da:	4602      	mov	r2, r0
 80032dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032de:	1ad3      	subs	r3, r2, r3
 80032e0:	2b02      	cmp	r3, #2
 80032e2:	d901      	bls.n	80032e8 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 80032e4:	2303      	movs	r3, #3
 80032e6:	e10b      	b.n	8003500 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80032e8:	4b4d      	ldr	r3, [pc, #308]	@ (8003420 <HAL_RCC_OscConfig+0x6c4>)
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d1f0      	bne.n	80032d6 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80032f4:	4b4a      	ldr	r3, [pc, #296]	@ (8003420 <HAL_RCC_OscConfig+0x6c4>)
 80032f6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80032f8:	4b4a      	ldr	r3, [pc, #296]	@ (8003424 <HAL_RCC_OscConfig+0x6c8>)
 80032fa:	4013      	ands	r3, r2
 80032fc:	687a      	ldr	r2, [r7, #4]
 80032fe:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8003300:	687a      	ldr	r2, [r7, #4]
 8003302:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003304:	0112      	lsls	r2, r2, #4
 8003306:	430a      	orrs	r2, r1
 8003308:	4945      	ldr	r1, [pc, #276]	@ (8003420 <HAL_RCC_OscConfig+0x6c4>)
 800330a:	4313      	orrs	r3, r2
 800330c:	628b      	str	r3, [r1, #40]	@ 0x28
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003312:	3b01      	subs	r3, #1
 8003314:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800331c:	3b01      	subs	r3, #1
 800331e:	025b      	lsls	r3, r3, #9
 8003320:	b29b      	uxth	r3, r3
 8003322:	431a      	orrs	r2, r3
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003328:	3b01      	subs	r3, #1
 800332a:	041b      	lsls	r3, r3, #16
 800332c:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8003330:	431a      	orrs	r2, r3
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003336:	3b01      	subs	r3, #1
 8003338:	061b      	lsls	r3, r3, #24
 800333a:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800333e:	4938      	ldr	r1, [pc, #224]	@ (8003420 <HAL_RCC_OscConfig+0x6c4>)
 8003340:	4313      	orrs	r3, r2
 8003342:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8003344:	4b36      	ldr	r3, [pc, #216]	@ (8003420 <HAL_RCC_OscConfig+0x6c4>)
 8003346:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003348:	4a35      	ldr	r2, [pc, #212]	@ (8003420 <HAL_RCC_OscConfig+0x6c4>)
 800334a:	f023 0301 	bic.w	r3, r3, #1
 800334e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003350:	4b33      	ldr	r3, [pc, #204]	@ (8003420 <HAL_RCC_OscConfig+0x6c4>)
 8003352:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003354:	4b34      	ldr	r3, [pc, #208]	@ (8003428 <HAL_RCC_OscConfig+0x6cc>)
 8003356:	4013      	ands	r3, r2
 8003358:	687a      	ldr	r2, [r7, #4]
 800335a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800335c:	00d2      	lsls	r2, r2, #3
 800335e:	4930      	ldr	r1, [pc, #192]	@ (8003420 <HAL_RCC_OscConfig+0x6c4>)
 8003360:	4313      	orrs	r3, r2
 8003362:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003364:	4b2e      	ldr	r3, [pc, #184]	@ (8003420 <HAL_RCC_OscConfig+0x6c4>)
 8003366:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003368:	f023 020c 	bic.w	r2, r3, #12
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003370:	492b      	ldr	r1, [pc, #172]	@ (8003420 <HAL_RCC_OscConfig+0x6c4>)
 8003372:	4313      	orrs	r3, r2
 8003374:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003376:	4b2a      	ldr	r3, [pc, #168]	@ (8003420 <HAL_RCC_OscConfig+0x6c4>)
 8003378:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800337a:	f023 0202 	bic.w	r2, r3, #2
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003382:	4927      	ldr	r1, [pc, #156]	@ (8003420 <HAL_RCC_OscConfig+0x6c4>)
 8003384:	4313      	orrs	r3, r2
 8003386:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003388:	4b25      	ldr	r3, [pc, #148]	@ (8003420 <HAL_RCC_OscConfig+0x6c4>)
 800338a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800338c:	4a24      	ldr	r2, [pc, #144]	@ (8003420 <HAL_RCC_OscConfig+0x6c4>)
 800338e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003392:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003394:	4b22      	ldr	r3, [pc, #136]	@ (8003420 <HAL_RCC_OscConfig+0x6c4>)
 8003396:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003398:	4a21      	ldr	r2, [pc, #132]	@ (8003420 <HAL_RCC_OscConfig+0x6c4>)
 800339a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800339e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80033a0:	4b1f      	ldr	r3, [pc, #124]	@ (8003420 <HAL_RCC_OscConfig+0x6c4>)
 80033a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033a4:	4a1e      	ldr	r2, [pc, #120]	@ (8003420 <HAL_RCC_OscConfig+0x6c4>)
 80033a6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80033aa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80033ac:	4b1c      	ldr	r3, [pc, #112]	@ (8003420 <HAL_RCC_OscConfig+0x6c4>)
 80033ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033b0:	4a1b      	ldr	r2, [pc, #108]	@ (8003420 <HAL_RCC_OscConfig+0x6c4>)
 80033b2:	f043 0301 	orr.w	r3, r3, #1
 80033b6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80033b8:	4b19      	ldr	r3, [pc, #100]	@ (8003420 <HAL_RCC_OscConfig+0x6c4>)
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	4a18      	ldr	r2, [pc, #96]	@ (8003420 <HAL_RCC_OscConfig+0x6c4>)
 80033be:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80033c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033c4:	f7fe fd96 	bl	8001ef4 <HAL_GetTick>
 80033c8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80033ca:	e008      	b.n	80033de <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033cc:	f7fe fd92 	bl	8001ef4 <HAL_GetTick>
 80033d0:	4602      	mov	r2, r0
 80033d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033d4:	1ad3      	subs	r3, r2, r3
 80033d6:	2b02      	cmp	r3, #2
 80033d8:	d901      	bls.n	80033de <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 80033da:	2303      	movs	r3, #3
 80033dc:	e090      	b.n	8003500 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80033de:	4b10      	ldr	r3, [pc, #64]	@ (8003420 <HAL_RCC_OscConfig+0x6c4>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d0f0      	beq.n	80033cc <HAL_RCC_OscConfig+0x670>
 80033ea:	e088      	b.n	80034fe <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033ec:	4b0c      	ldr	r3, [pc, #48]	@ (8003420 <HAL_RCC_OscConfig+0x6c4>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	4a0b      	ldr	r2, [pc, #44]	@ (8003420 <HAL_RCC_OscConfig+0x6c4>)
 80033f2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80033f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033f8:	f7fe fd7c 	bl	8001ef4 <HAL_GetTick>
 80033fc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80033fe:	e008      	b.n	8003412 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003400:	f7fe fd78 	bl	8001ef4 <HAL_GetTick>
 8003404:	4602      	mov	r2, r0
 8003406:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003408:	1ad3      	subs	r3, r2, r3
 800340a:	2b02      	cmp	r3, #2
 800340c:	d901      	bls.n	8003412 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 800340e:	2303      	movs	r3, #3
 8003410:	e076      	b.n	8003500 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003412:	4b03      	ldr	r3, [pc, #12]	@ (8003420 <HAL_RCC_OscConfig+0x6c4>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800341a:	2b00      	cmp	r3, #0
 800341c:	d1f0      	bne.n	8003400 <HAL_RCC_OscConfig+0x6a4>
 800341e:	e06e      	b.n	80034fe <HAL_RCC_OscConfig+0x7a2>
 8003420:	58024400 	.word	0x58024400
 8003424:	fffffc0c 	.word	0xfffffc0c
 8003428:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800342c:	4b36      	ldr	r3, [pc, #216]	@ (8003508 <HAL_RCC_OscConfig+0x7ac>)
 800342e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003430:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003432:	4b35      	ldr	r3, [pc, #212]	@ (8003508 <HAL_RCC_OscConfig+0x7ac>)
 8003434:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003436:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800343c:	2b01      	cmp	r3, #1
 800343e:	d031      	beq.n	80034a4 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003440:	693b      	ldr	r3, [r7, #16]
 8003442:	f003 0203 	and.w	r2, r3, #3
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800344a:	429a      	cmp	r2, r3
 800344c:	d12a      	bne.n	80034a4 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800344e:	693b      	ldr	r3, [r7, #16]
 8003450:	091b      	lsrs	r3, r3, #4
 8003452:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800345a:	429a      	cmp	r2, r3
 800345c:	d122      	bne.n	80034a4 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003468:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800346a:	429a      	cmp	r2, r3
 800346c:	d11a      	bne.n	80034a4 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	0a5b      	lsrs	r3, r3, #9
 8003472:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800347a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800347c:	429a      	cmp	r2, r3
 800347e:	d111      	bne.n	80034a4 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	0c1b      	lsrs	r3, r3, #16
 8003484:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800348c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800348e:	429a      	cmp	r2, r3
 8003490:	d108      	bne.n	80034a4 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	0e1b      	lsrs	r3, r3, #24
 8003496:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800349e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80034a0:	429a      	cmp	r2, r3
 80034a2:	d001      	beq.n	80034a8 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 80034a4:	2301      	movs	r3, #1
 80034a6:	e02b      	b.n	8003500 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80034a8:	4b17      	ldr	r3, [pc, #92]	@ (8003508 <HAL_RCC_OscConfig+0x7ac>)
 80034aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80034ac:	08db      	lsrs	r3, r3, #3
 80034ae:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80034b2:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80034b8:	693a      	ldr	r2, [r7, #16]
 80034ba:	429a      	cmp	r2, r3
 80034bc:	d01f      	beq.n	80034fe <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80034be:	4b12      	ldr	r3, [pc, #72]	@ (8003508 <HAL_RCC_OscConfig+0x7ac>)
 80034c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034c2:	4a11      	ldr	r2, [pc, #68]	@ (8003508 <HAL_RCC_OscConfig+0x7ac>)
 80034c4:	f023 0301 	bic.w	r3, r3, #1
 80034c8:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80034ca:	f7fe fd13 	bl	8001ef4 <HAL_GetTick>
 80034ce:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80034d0:	bf00      	nop
 80034d2:	f7fe fd0f 	bl	8001ef4 <HAL_GetTick>
 80034d6:	4602      	mov	r2, r0
 80034d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034da:	4293      	cmp	r3, r2
 80034dc:	d0f9      	beq.n	80034d2 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80034de:	4b0a      	ldr	r3, [pc, #40]	@ (8003508 <HAL_RCC_OscConfig+0x7ac>)
 80034e0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80034e2:	4b0a      	ldr	r3, [pc, #40]	@ (800350c <HAL_RCC_OscConfig+0x7b0>)
 80034e4:	4013      	ands	r3, r2
 80034e6:	687a      	ldr	r2, [r7, #4]
 80034e8:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80034ea:	00d2      	lsls	r2, r2, #3
 80034ec:	4906      	ldr	r1, [pc, #24]	@ (8003508 <HAL_RCC_OscConfig+0x7ac>)
 80034ee:	4313      	orrs	r3, r2
 80034f0:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80034f2:	4b05      	ldr	r3, [pc, #20]	@ (8003508 <HAL_RCC_OscConfig+0x7ac>)
 80034f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034f6:	4a04      	ldr	r2, [pc, #16]	@ (8003508 <HAL_RCC_OscConfig+0x7ac>)
 80034f8:	f043 0301 	orr.w	r3, r3, #1
 80034fc:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80034fe:	2300      	movs	r3, #0
}
 8003500:	4618      	mov	r0, r3
 8003502:	3730      	adds	r7, #48	@ 0x30
 8003504:	46bd      	mov	sp, r7
 8003506:	bd80      	pop	{r7, pc}
 8003508:	58024400 	.word	0x58024400
 800350c:	ffff0007 	.word	0xffff0007

08003510 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b086      	sub	sp, #24
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
 8003518:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	2b00      	cmp	r3, #0
 800351e:	d101      	bne.n	8003524 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003520:	2301      	movs	r3, #1
 8003522:	e19c      	b.n	800385e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003524:	4b8a      	ldr	r3, [pc, #552]	@ (8003750 <HAL_RCC_ClockConfig+0x240>)
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f003 030f 	and.w	r3, r3, #15
 800352c:	683a      	ldr	r2, [r7, #0]
 800352e:	429a      	cmp	r2, r3
 8003530:	d910      	bls.n	8003554 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003532:	4b87      	ldr	r3, [pc, #540]	@ (8003750 <HAL_RCC_ClockConfig+0x240>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f023 020f 	bic.w	r2, r3, #15
 800353a:	4985      	ldr	r1, [pc, #532]	@ (8003750 <HAL_RCC_ClockConfig+0x240>)
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	4313      	orrs	r3, r2
 8003540:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003542:	4b83      	ldr	r3, [pc, #524]	@ (8003750 <HAL_RCC_ClockConfig+0x240>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f003 030f 	and.w	r3, r3, #15
 800354a:	683a      	ldr	r2, [r7, #0]
 800354c:	429a      	cmp	r2, r3
 800354e:	d001      	beq.n	8003554 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003550:	2301      	movs	r3, #1
 8003552:	e184      	b.n	800385e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f003 0304 	and.w	r3, r3, #4
 800355c:	2b00      	cmp	r3, #0
 800355e:	d010      	beq.n	8003582 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	691a      	ldr	r2, [r3, #16]
 8003564:	4b7b      	ldr	r3, [pc, #492]	@ (8003754 <HAL_RCC_ClockConfig+0x244>)
 8003566:	699b      	ldr	r3, [r3, #24]
 8003568:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800356c:	429a      	cmp	r2, r3
 800356e:	d908      	bls.n	8003582 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003570:	4b78      	ldr	r3, [pc, #480]	@ (8003754 <HAL_RCC_ClockConfig+0x244>)
 8003572:	699b      	ldr	r3, [r3, #24]
 8003574:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	691b      	ldr	r3, [r3, #16]
 800357c:	4975      	ldr	r1, [pc, #468]	@ (8003754 <HAL_RCC_ClockConfig+0x244>)
 800357e:	4313      	orrs	r3, r2
 8003580:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f003 0308 	and.w	r3, r3, #8
 800358a:	2b00      	cmp	r3, #0
 800358c:	d010      	beq.n	80035b0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	695a      	ldr	r2, [r3, #20]
 8003592:	4b70      	ldr	r3, [pc, #448]	@ (8003754 <HAL_RCC_ClockConfig+0x244>)
 8003594:	69db      	ldr	r3, [r3, #28]
 8003596:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800359a:	429a      	cmp	r2, r3
 800359c:	d908      	bls.n	80035b0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800359e:	4b6d      	ldr	r3, [pc, #436]	@ (8003754 <HAL_RCC_ClockConfig+0x244>)
 80035a0:	69db      	ldr	r3, [r3, #28]
 80035a2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	695b      	ldr	r3, [r3, #20]
 80035aa:	496a      	ldr	r1, [pc, #424]	@ (8003754 <HAL_RCC_ClockConfig+0x244>)
 80035ac:	4313      	orrs	r3, r2
 80035ae:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f003 0310 	and.w	r3, r3, #16
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d010      	beq.n	80035de <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	699a      	ldr	r2, [r3, #24]
 80035c0:	4b64      	ldr	r3, [pc, #400]	@ (8003754 <HAL_RCC_ClockConfig+0x244>)
 80035c2:	69db      	ldr	r3, [r3, #28]
 80035c4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80035c8:	429a      	cmp	r2, r3
 80035ca:	d908      	bls.n	80035de <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80035cc:	4b61      	ldr	r3, [pc, #388]	@ (8003754 <HAL_RCC_ClockConfig+0x244>)
 80035ce:	69db      	ldr	r3, [r3, #28]
 80035d0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	699b      	ldr	r3, [r3, #24]
 80035d8:	495e      	ldr	r1, [pc, #376]	@ (8003754 <HAL_RCC_ClockConfig+0x244>)
 80035da:	4313      	orrs	r3, r2
 80035dc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f003 0320 	and.w	r3, r3, #32
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d010      	beq.n	800360c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	69da      	ldr	r2, [r3, #28]
 80035ee:	4b59      	ldr	r3, [pc, #356]	@ (8003754 <HAL_RCC_ClockConfig+0x244>)
 80035f0:	6a1b      	ldr	r3, [r3, #32]
 80035f2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80035f6:	429a      	cmp	r2, r3
 80035f8:	d908      	bls.n	800360c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80035fa:	4b56      	ldr	r3, [pc, #344]	@ (8003754 <HAL_RCC_ClockConfig+0x244>)
 80035fc:	6a1b      	ldr	r3, [r3, #32]
 80035fe:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	69db      	ldr	r3, [r3, #28]
 8003606:	4953      	ldr	r1, [pc, #332]	@ (8003754 <HAL_RCC_ClockConfig+0x244>)
 8003608:	4313      	orrs	r3, r2
 800360a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f003 0302 	and.w	r3, r3, #2
 8003614:	2b00      	cmp	r3, #0
 8003616:	d010      	beq.n	800363a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	68da      	ldr	r2, [r3, #12]
 800361c:	4b4d      	ldr	r3, [pc, #308]	@ (8003754 <HAL_RCC_ClockConfig+0x244>)
 800361e:	699b      	ldr	r3, [r3, #24]
 8003620:	f003 030f 	and.w	r3, r3, #15
 8003624:	429a      	cmp	r2, r3
 8003626:	d908      	bls.n	800363a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003628:	4b4a      	ldr	r3, [pc, #296]	@ (8003754 <HAL_RCC_ClockConfig+0x244>)
 800362a:	699b      	ldr	r3, [r3, #24]
 800362c:	f023 020f 	bic.w	r2, r3, #15
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	68db      	ldr	r3, [r3, #12]
 8003634:	4947      	ldr	r1, [pc, #284]	@ (8003754 <HAL_RCC_ClockConfig+0x244>)
 8003636:	4313      	orrs	r3, r2
 8003638:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f003 0301 	and.w	r3, r3, #1
 8003642:	2b00      	cmp	r3, #0
 8003644:	d055      	beq.n	80036f2 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003646:	4b43      	ldr	r3, [pc, #268]	@ (8003754 <HAL_RCC_ClockConfig+0x244>)
 8003648:	699b      	ldr	r3, [r3, #24]
 800364a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	689b      	ldr	r3, [r3, #8]
 8003652:	4940      	ldr	r1, [pc, #256]	@ (8003754 <HAL_RCC_ClockConfig+0x244>)
 8003654:	4313      	orrs	r3, r2
 8003656:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	685b      	ldr	r3, [r3, #4]
 800365c:	2b02      	cmp	r3, #2
 800365e:	d107      	bne.n	8003670 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003660:	4b3c      	ldr	r3, [pc, #240]	@ (8003754 <HAL_RCC_ClockConfig+0x244>)
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003668:	2b00      	cmp	r3, #0
 800366a:	d121      	bne.n	80036b0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800366c:	2301      	movs	r3, #1
 800366e:	e0f6      	b.n	800385e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	685b      	ldr	r3, [r3, #4]
 8003674:	2b03      	cmp	r3, #3
 8003676:	d107      	bne.n	8003688 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003678:	4b36      	ldr	r3, [pc, #216]	@ (8003754 <HAL_RCC_ClockConfig+0x244>)
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003680:	2b00      	cmp	r3, #0
 8003682:	d115      	bne.n	80036b0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003684:	2301      	movs	r3, #1
 8003686:	e0ea      	b.n	800385e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	685b      	ldr	r3, [r3, #4]
 800368c:	2b01      	cmp	r3, #1
 800368e:	d107      	bne.n	80036a0 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003690:	4b30      	ldr	r3, [pc, #192]	@ (8003754 <HAL_RCC_ClockConfig+0x244>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003698:	2b00      	cmp	r3, #0
 800369a:	d109      	bne.n	80036b0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800369c:	2301      	movs	r3, #1
 800369e:	e0de      	b.n	800385e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80036a0:	4b2c      	ldr	r3, [pc, #176]	@ (8003754 <HAL_RCC_ClockConfig+0x244>)
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f003 0304 	and.w	r3, r3, #4
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d101      	bne.n	80036b0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80036ac:	2301      	movs	r3, #1
 80036ae:	e0d6      	b.n	800385e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80036b0:	4b28      	ldr	r3, [pc, #160]	@ (8003754 <HAL_RCC_ClockConfig+0x244>)
 80036b2:	691b      	ldr	r3, [r3, #16]
 80036b4:	f023 0207 	bic.w	r2, r3, #7
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	685b      	ldr	r3, [r3, #4]
 80036bc:	4925      	ldr	r1, [pc, #148]	@ (8003754 <HAL_RCC_ClockConfig+0x244>)
 80036be:	4313      	orrs	r3, r2
 80036c0:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80036c2:	f7fe fc17 	bl	8001ef4 <HAL_GetTick>
 80036c6:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036c8:	e00a      	b.n	80036e0 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80036ca:	f7fe fc13 	bl	8001ef4 <HAL_GetTick>
 80036ce:	4602      	mov	r2, r0
 80036d0:	697b      	ldr	r3, [r7, #20]
 80036d2:	1ad3      	subs	r3, r2, r3
 80036d4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80036d8:	4293      	cmp	r3, r2
 80036da:	d901      	bls.n	80036e0 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80036dc:	2303      	movs	r3, #3
 80036de:	e0be      	b.n	800385e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036e0:	4b1c      	ldr	r3, [pc, #112]	@ (8003754 <HAL_RCC_ClockConfig+0x244>)
 80036e2:	691b      	ldr	r3, [r3, #16]
 80036e4:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	685b      	ldr	r3, [r3, #4]
 80036ec:	00db      	lsls	r3, r3, #3
 80036ee:	429a      	cmp	r2, r3
 80036f0:	d1eb      	bne.n	80036ca <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f003 0302 	and.w	r3, r3, #2
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d010      	beq.n	8003720 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	68da      	ldr	r2, [r3, #12]
 8003702:	4b14      	ldr	r3, [pc, #80]	@ (8003754 <HAL_RCC_ClockConfig+0x244>)
 8003704:	699b      	ldr	r3, [r3, #24]
 8003706:	f003 030f 	and.w	r3, r3, #15
 800370a:	429a      	cmp	r2, r3
 800370c:	d208      	bcs.n	8003720 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800370e:	4b11      	ldr	r3, [pc, #68]	@ (8003754 <HAL_RCC_ClockConfig+0x244>)
 8003710:	699b      	ldr	r3, [r3, #24]
 8003712:	f023 020f 	bic.w	r2, r3, #15
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	68db      	ldr	r3, [r3, #12]
 800371a:	490e      	ldr	r1, [pc, #56]	@ (8003754 <HAL_RCC_ClockConfig+0x244>)
 800371c:	4313      	orrs	r3, r2
 800371e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003720:	4b0b      	ldr	r3, [pc, #44]	@ (8003750 <HAL_RCC_ClockConfig+0x240>)
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f003 030f 	and.w	r3, r3, #15
 8003728:	683a      	ldr	r2, [r7, #0]
 800372a:	429a      	cmp	r2, r3
 800372c:	d214      	bcs.n	8003758 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800372e:	4b08      	ldr	r3, [pc, #32]	@ (8003750 <HAL_RCC_ClockConfig+0x240>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f023 020f 	bic.w	r2, r3, #15
 8003736:	4906      	ldr	r1, [pc, #24]	@ (8003750 <HAL_RCC_ClockConfig+0x240>)
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	4313      	orrs	r3, r2
 800373c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800373e:	4b04      	ldr	r3, [pc, #16]	@ (8003750 <HAL_RCC_ClockConfig+0x240>)
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f003 030f 	and.w	r3, r3, #15
 8003746:	683a      	ldr	r2, [r7, #0]
 8003748:	429a      	cmp	r2, r3
 800374a:	d005      	beq.n	8003758 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800374c:	2301      	movs	r3, #1
 800374e:	e086      	b.n	800385e <HAL_RCC_ClockConfig+0x34e>
 8003750:	52002000 	.word	0x52002000
 8003754:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f003 0304 	and.w	r3, r3, #4
 8003760:	2b00      	cmp	r3, #0
 8003762:	d010      	beq.n	8003786 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	691a      	ldr	r2, [r3, #16]
 8003768:	4b3f      	ldr	r3, [pc, #252]	@ (8003868 <HAL_RCC_ClockConfig+0x358>)
 800376a:	699b      	ldr	r3, [r3, #24]
 800376c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003770:	429a      	cmp	r2, r3
 8003772:	d208      	bcs.n	8003786 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003774:	4b3c      	ldr	r3, [pc, #240]	@ (8003868 <HAL_RCC_ClockConfig+0x358>)
 8003776:	699b      	ldr	r3, [r3, #24]
 8003778:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	691b      	ldr	r3, [r3, #16]
 8003780:	4939      	ldr	r1, [pc, #228]	@ (8003868 <HAL_RCC_ClockConfig+0x358>)
 8003782:	4313      	orrs	r3, r2
 8003784:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f003 0308 	and.w	r3, r3, #8
 800378e:	2b00      	cmp	r3, #0
 8003790:	d010      	beq.n	80037b4 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	695a      	ldr	r2, [r3, #20]
 8003796:	4b34      	ldr	r3, [pc, #208]	@ (8003868 <HAL_RCC_ClockConfig+0x358>)
 8003798:	69db      	ldr	r3, [r3, #28]
 800379a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800379e:	429a      	cmp	r2, r3
 80037a0:	d208      	bcs.n	80037b4 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80037a2:	4b31      	ldr	r3, [pc, #196]	@ (8003868 <HAL_RCC_ClockConfig+0x358>)
 80037a4:	69db      	ldr	r3, [r3, #28]
 80037a6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	695b      	ldr	r3, [r3, #20]
 80037ae:	492e      	ldr	r1, [pc, #184]	@ (8003868 <HAL_RCC_ClockConfig+0x358>)
 80037b0:	4313      	orrs	r3, r2
 80037b2:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f003 0310 	and.w	r3, r3, #16
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d010      	beq.n	80037e2 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	699a      	ldr	r2, [r3, #24]
 80037c4:	4b28      	ldr	r3, [pc, #160]	@ (8003868 <HAL_RCC_ClockConfig+0x358>)
 80037c6:	69db      	ldr	r3, [r3, #28]
 80037c8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80037cc:	429a      	cmp	r2, r3
 80037ce:	d208      	bcs.n	80037e2 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80037d0:	4b25      	ldr	r3, [pc, #148]	@ (8003868 <HAL_RCC_ClockConfig+0x358>)
 80037d2:	69db      	ldr	r3, [r3, #28]
 80037d4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	699b      	ldr	r3, [r3, #24]
 80037dc:	4922      	ldr	r1, [pc, #136]	@ (8003868 <HAL_RCC_ClockConfig+0x358>)
 80037de:	4313      	orrs	r3, r2
 80037e0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f003 0320 	and.w	r3, r3, #32
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d010      	beq.n	8003810 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	69da      	ldr	r2, [r3, #28]
 80037f2:	4b1d      	ldr	r3, [pc, #116]	@ (8003868 <HAL_RCC_ClockConfig+0x358>)
 80037f4:	6a1b      	ldr	r3, [r3, #32]
 80037f6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80037fa:	429a      	cmp	r2, r3
 80037fc:	d208      	bcs.n	8003810 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80037fe:	4b1a      	ldr	r3, [pc, #104]	@ (8003868 <HAL_RCC_ClockConfig+0x358>)
 8003800:	6a1b      	ldr	r3, [r3, #32]
 8003802:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	69db      	ldr	r3, [r3, #28]
 800380a:	4917      	ldr	r1, [pc, #92]	@ (8003868 <HAL_RCC_ClockConfig+0x358>)
 800380c:	4313      	orrs	r3, r2
 800380e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003810:	f000 f834 	bl	800387c <HAL_RCC_GetSysClockFreq>
 8003814:	4602      	mov	r2, r0
 8003816:	4b14      	ldr	r3, [pc, #80]	@ (8003868 <HAL_RCC_ClockConfig+0x358>)
 8003818:	699b      	ldr	r3, [r3, #24]
 800381a:	0a1b      	lsrs	r3, r3, #8
 800381c:	f003 030f 	and.w	r3, r3, #15
 8003820:	4912      	ldr	r1, [pc, #72]	@ (800386c <HAL_RCC_ClockConfig+0x35c>)
 8003822:	5ccb      	ldrb	r3, [r1, r3]
 8003824:	f003 031f 	and.w	r3, r3, #31
 8003828:	fa22 f303 	lsr.w	r3, r2, r3
 800382c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800382e:	4b0e      	ldr	r3, [pc, #56]	@ (8003868 <HAL_RCC_ClockConfig+0x358>)
 8003830:	699b      	ldr	r3, [r3, #24]
 8003832:	f003 030f 	and.w	r3, r3, #15
 8003836:	4a0d      	ldr	r2, [pc, #52]	@ (800386c <HAL_RCC_ClockConfig+0x35c>)
 8003838:	5cd3      	ldrb	r3, [r2, r3]
 800383a:	f003 031f 	and.w	r3, r3, #31
 800383e:	693a      	ldr	r2, [r7, #16]
 8003840:	fa22 f303 	lsr.w	r3, r2, r3
 8003844:	4a0a      	ldr	r2, [pc, #40]	@ (8003870 <HAL_RCC_ClockConfig+0x360>)
 8003846:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003848:	4a0a      	ldr	r2, [pc, #40]	@ (8003874 <HAL_RCC_ClockConfig+0x364>)
 800384a:	693b      	ldr	r3, [r7, #16]
 800384c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800384e:	4b0a      	ldr	r3, [pc, #40]	@ (8003878 <HAL_RCC_ClockConfig+0x368>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	4618      	mov	r0, r3
 8003854:	f7fe fb04 	bl	8001e60 <HAL_InitTick>
 8003858:	4603      	mov	r3, r0
 800385a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800385c:	7bfb      	ldrb	r3, [r7, #15]
}
 800385e:	4618      	mov	r0, r3
 8003860:	3718      	adds	r7, #24
 8003862:	46bd      	mov	sp, r7
 8003864:	bd80      	pop	{r7, pc}
 8003866:	bf00      	nop
 8003868:	58024400 	.word	0x58024400
 800386c:	0800d188 	.word	0x0800d188
 8003870:	24000004 	.word	0x24000004
 8003874:	24000000 	.word	0x24000000
 8003878:	24000008 	.word	0x24000008

0800387c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800387c:	b480      	push	{r7}
 800387e:	b089      	sub	sp, #36	@ 0x24
 8003880:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003882:	4bb3      	ldr	r3, [pc, #716]	@ (8003b50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003884:	691b      	ldr	r3, [r3, #16]
 8003886:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800388a:	2b18      	cmp	r3, #24
 800388c:	f200 8155 	bhi.w	8003b3a <HAL_RCC_GetSysClockFreq+0x2be>
 8003890:	a201      	add	r2, pc, #4	@ (adr r2, 8003898 <HAL_RCC_GetSysClockFreq+0x1c>)
 8003892:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003896:	bf00      	nop
 8003898:	080038fd 	.word	0x080038fd
 800389c:	08003b3b 	.word	0x08003b3b
 80038a0:	08003b3b 	.word	0x08003b3b
 80038a4:	08003b3b 	.word	0x08003b3b
 80038a8:	08003b3b 	.word	0x08003b3b
 80038ac:	08003b3b 	.word	0x08003b3b
 80038b0:	08003b3b 	.word	0x08003b3b
 80038b4:	08003b3b 	.word	0x08003b3b
 80038b8:	08003923 	.word	0x08003923
 80038bc:	08003b3b 	.word	0x08003b3b
 80038c0:	08003b3b 	.word	0x08003b3b
 80038c4:	08003b3b 	.word	0x08003b3b
 80038c8:	08003b3b 	.word	0x08003b3b
 80038cc:	08003b3b 	.word	0x08003b3b
 80038d0:	08003b3b 	.word	0x08003b3b
 80038d4:	08003b3b 	.word	0x08003b3b
 80038d8:	08003929 	.word	0x08003929
 80038dc:	08003b3b 	.word	0x08003b3b
 80038e0:	08003b3b 	.word	0x08003b3b
 80038e4:	08003b3b 	.word	0x08003b3b
 80038e8:	08003b3b 	.word	0x08003b3b
 80038ec:	08003b3b 	.word	0x08003b3b
 80038f0:	08003b3b 	.word	0x08003b3b
 80038f4:	08003b3b 	.word	0x08003b3b
 80038f8:	0800392f 	.word	0x0800392f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80038fc:	4b94      	ldr	r3, [pc, #592]	@ (8003b50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f003 0320 	and.w	r3, r3, #32
 8003904:	2b00      	cmp	r3, #0
 8003906:	d009      	beq.n	800391c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003908:	4b91      	ldr	r3, [pc, #580]	@ (8003b50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	08db      	lsrs	r3, r3, #3
 800390e:	f003 0303 	and.w	r3, r3, #3
 8003912:	4a90      	ldr	r2, [pc, #576]	@ (8003b54 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003914:	fa22 f303 	lsr.w	r3, r2, r3
 8003918:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800391a:	e111      	b.n	8003b40 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800391c:	4b8d      	ldr	r3, [pc, #564]	@ (8003b54 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800391e:	61bb      	str	r3, [r7, #24]
      break;
 8003920:	e10e      	b.n	8003b40 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8003922:	4b8d      	ldr	r3, [pc, #564]	@ (8003b58 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003924:	61bb      	str	r3, [r7, #24]
      break;
 8003926:	e10b      	b.n	8003b40 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8003928:	4b8c      	ldr	r3, [pc, #560]	@ (8003b5c <HAL_RCC_GetSysClockFreq+0x2e0>)
 800392a:	61bb      	str	r3, [r7, #24]
      break;
 800392c:	e108      	b.n	8003b40 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800392e:	4b88      	ldr	r3, [pc, #544]	@ (8003b50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003930:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003932:	f003 0303 	and.w	r3, r3, #3
 8003936:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8003938:	4b85      	ldr	r3, [pc, #532]	@ (8003b50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800393a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800393c:	091b      	lsrs	r3, r3, #4
 800393e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003942:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003944:	4b82      	ldr	r3, [pc, #520]	@ (8003b50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003946:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003948:	f003 0301 	and.w	r3, r3, #1
 800394c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800394e:	4b80      	ldr	r3, [pc, #512]	@ (8003b50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003950:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003952:	08db      	lsrs	r3, r3, #3
 8003954:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003958:	68fa      	ldr	r2, [r7, #12]
 800395a:	fb02 f303 	mul.w	r3, r2, r3
 800395e:	ee07 3a90 	vmov	s15, r3
 8003962:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003966:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800396a:	693b      	ldr	r3, [r7, #16]
 800396c:	2b00      	cmp	r3, #0
 800396e:	f000 80e1 	beq.w	8003b34 <HAL_RCC_GetSysClockFreq+0x2b8>
 8003972:	697b      	ldr	r3, [r7, #20]
 8003974:	2b02      	cmp	r3, #2
 8003976:	f000 8083 	beq.w	8003a80 <HAL_RCC_GetSysClockFreq+0x204>
 800397a:	697b      	ldr	r3, [r7, #20]
 800397c:	2b02      	cmp	r3, #2
 800397e:	f200 80a1 	bhi.w	8003ac4 <HAL_RCC_GetSysClockFreq+0x248>
 8003982:	697b      	ldr	r3, [r7, #20]
 8003984:	2b00      	cmp	r3, #0
 8003986:	d003      	beq.n	8003990 <HAL_RCC_GetSysClockFreq+0x114>
 8003988:	697b      	ldr	r3, [r7, #20]
 800398a:	2b01      	cmp	r3, #1
 800398c:	d056      	beq.n	8003a3c <HAL_RCC_GetSysClockFreq+0x1c0>
 800398e:	e099      	b.n	8003ac4 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003990:	4b6f      	ldr	r3, [pc, #444]	@ (8003b50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f003 0320 	and.w	r3, r3, #32
 8003998:	2b00      	cmp	r3, #0
 800399a:	d02d      	beq.n	80039f8 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800399c:	4b6c      	ldr	r3, [pc, #432]	@ (8003b50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	08db      	lsrs	r3, r3, #3
 80039a2:	f003 0303 	and.w	r3, r3, #3
 80039a6:	4a6b      	ldr	r2, [pc, #428]	@ (8003b54 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80039a8:	fa22 f303 	lsr.w	r3, r2, r3
 80039ac:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	ee07 3a90 	vmov	s15, r3
 80039b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80039b8:	693b      	ldr	r3, [r7, #16]
 80039ba:	ee07 3a90 	vmov	s15, r3
 80039be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80039c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80039c6:	4b62      	ldr	r3, [pc, #392]	@ (8003b50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80039c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80039ce:	ee07 3a90 	vmov	s15, r3
 80039d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80039d6:	ed97 6a02 	vldr	s12, [r7, #8]
 80039da:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8003b60 <HAL_RCC_GetSysClockFreq+0x2e4>
 80039de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80039e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80039e6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80039ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80039ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80039f2:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80039f6:	e087      	b.n	8003b08 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80039f8:	693b      	ldr	r3, [r7, #16]
 80039fa:	ee07 3a90 	vmov	s15, r3
 80039fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a02:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8003b64 <HAL_RCC_GetSysClockFreq+0x2e8>
 8003a06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003a0a:	4b51      	ldr	r3, [pc, #324]	@ (8003b50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003a0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a12:	ee07 3a90 	vmov	s15, r3
 8003a16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a1a:	ed97 6a02 	vldr	s12, [r7, #8]
 8003a1e:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8003b60 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003a22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003a26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003a2a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003a2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003a32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a36:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003a3a:	e065      	b.n	8003b08 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003a3c:	693b      	ldr	r3, [r7, #16]
 8003a3e:	ee07 3a90 	vmov	s15, r3
 8003a42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a46:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8003b68 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003a4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003a4e:	4b40      	ldr	r3, [pc, #256]	@ (8003b50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003a50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a56:	ee07 3a90 	vmov	s15, r3
 8003a5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a5e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003a62:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8003b60 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003a66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003a6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003a6e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003a72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003a76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a7a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003a7e:	e043      	b.n	8003b08 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003a80:	693b      	ldr	r3, [r7, #16]
 8003a82:	ee07 3a90 	vmov	s15, r3
 8003a86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a8a:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8003b6c <HAL_RCC_GetSysClockFreq+0x2f0>
 8003a8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003a92:	4b2f      	ldr	r3, [pc, #188]	@ (8003b50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003a94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a9a:	ee07 3a90 	vmov	s15, r3
 8003a9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003aa2:	ed97 6a02 	vldr	s12, [r7, #8]
 8003aa6:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8003b60 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003aaa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003aae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003ab2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003ab6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003aba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003abe:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003ac2:	e021      	b.n	8003b08 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003ac4:	693b      	ldr	r3, [r7, #16]
 8003ac6:	ee07 3a90 	vmov	s15, r3
 8003aca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ace:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8003b68 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003ad2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003ad6:	4b1e      	ldr	r3, [pc, #120]	@ (8003b50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003ad8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ada:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ade:	ee07 3a90 	vmov	s15, r3
 8003ae2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ae6:	ed97 6a02 	vldr	s12, [r7, #8]
 8003aea:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8003b60 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003aee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003af2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003af6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003afa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003afe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b02:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003b06:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8003b08:	4b11      	ldr	r3, [pc, #68]	@ (8003b50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003b0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b0c:	0a5b      	lsrs	r3, r3, #9
 8003b0e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003b12:	3301      	adds	r3, #1
 8003b14:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	ee07 3a90 	vmov	s15, r3
 8003b1c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003b20:	edd7 6a07 	vldr	s13, [r7, #28]
 8003b24:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003b28:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003b2c:	ee17 3a90 	vmov	r3, s15
 8003b30:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8003b32:	e005      	b.n	8003b40 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8003b34:	2300      	movs	r3, #0
 8003b36:	61bb      	str	r3, [r7, #24]
      break;
 8003b38:	e002      	b.n	8003b40 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8003b3a:	4b07      	ldr	r3, [pc, #28]	@ (8003b58 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003b3c:	61bb      	str	r3, [r7, #24]
      break;
 8003b3e:	bf00      	nop
  }

  return sysclockfreq;
 8003b40:	69bb      	ldr	r3, [r7, #24]
}
 8003b42:	4618      	mov	r0, r3
 8003b44:	3724      	adds	r7, #36	@ 0x24
 8003b46:	46bd      	mov	sp, r7
 8003b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4c:	4770      	bx	lr
 8003b4e:	bf00      	nop
 8003b50:	58024400 	.word	0x58024400
 8003b54:	03d09000 	.word	0x03d09000
 8003b58:	003d0900 	.word	0x003d0900
 8003b5c:	007a1200 	.word	0x007a1200
 8003b60:	46000000 	.word	0x46000000
 8003b64:	4c742400 	.word	0x4c742400
 8003b68:	4a742400 	.word	0x4a742400
 8003b6c:	4af42400 	.word	0x4af42400

08003b70 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b082      	sub	sp, #8
 8003b74:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003b76:	f7ff fe81 	bl	800387c <HAL_RCC_GetSysClockFreq>
 8003b7a:	4602      	mov	r2, r0
 8003b7c:	4b10      	ldr	r3, [pc, #64]	@ (8003bc0 <HAL_RCC_GetHCLKFreq+0x50>)
 8003b7e:	699b      	ldr	r3, [r3, #24]
 8003b80:	0a1b      	lsrs	r3, r3, #8
 8003b82:	f003 030f 	and.w	r3, r3, #15
 8003b86:	490f      	ldr	r1, [pc, #60]	@ (8003bc4 <HAL_RCC_GetHCLKFreq+0x54>)
 8003b88:	5ccb      	ldrb	r3, [r1, r3]
 8003b8a:	f003 031f 	and.w	r3, r3, #31
 8003b8e:	fa22 f303 	lsr.w	r3, r2, r3
 8003b92:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003b94:	4b0a      	ldr	r3, [pc, #40]	@ (8003bc0 <HAL_RCC_GetHCLKFreq+0x50>)
 8003b96:	699b      	ldr	r3, [r3, #24]
 8003b98:	f003 030f 	and.w	r3, r3, #15
 8003b9c:	4a09      	ldr	r2, [pc, #36]	@ (8003bc4 <HAL_RCC_GetHCLKFreq+0x54>)
 8003b9e:	5cd3      	ldrb	r3, [r2, r3]
 8003ba0:	f003 031f 	and.w	r3, r3, #31
 8003ba4:	687a      	ldr	r2, [r7, #4]
 8003ba6:	fa22 f303 	lsr.w	r3, r2, r3
 8003baa:	4a07      	ldr	r2, [pc, #28]	@ (8003bc8 <HAL_RCC_GetHCLKFreq+0x58>)
 8003bac:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003bae:	4a07      	ldr	r2, [pc, #28]	@ (8003bcc <HAL_RCC_GetHCLKFreq+0x5c>)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003bb4:	4b04      	ldr	r3, [pc, #16]	@ (8003bc8 <HAL_RCC_GetHCLKFreq+0x58>)
 8003bb6:	681b      	ldr	r3, [r3, #0]
}
 8003bb8:	4618      	mov	r0, r3
 8003bba:	3708      	adds	r7, #8
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	bd80      	pop	{r7, pc}
 8003bc0:	58024400 	.word	0x58024400
 8003bc4:	0800d188 	.word	0x0800d188
 8003bc8:	24000004 	.word	0x24000004
 8003bcc:	24000000 	.word	0x24000000

08003bd0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8003bd4:	f7ff ffcc 	bl	8003b70 <HAL_RCC_GetHCLKFreq>
 8003bd8:	4602      	mov	r2, r0
 8003bda:	4b06      	ldr	r3, [pc, #24]	@ (8003bf4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003bdc:	69db      	ldr	r3, [r3, #28]
 8003bde:	091b      	lsrs	r3, r3, #4
 8003be0:	f003 0307 	and.w	r3, r3, #7
 8003be4:	4904      	ldr	r1, [pc, #16]	@ (8003bf8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003be6:	5ccb      	ldrb	r3, [r1, r3]
 8003be8:	f003 031f 	and.w	r3, r3, #31
 8003bec:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	bd80      	pop	{r7, pc}
 8003bf4:	58024400 	.word	0x58024400
 8003bf8:	0800d188 	.word	0x0800d188

08003bfc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8003c00:	f7ff ffb6 	bl	8003b70 <HAL_RCC_GetHCLKFreq>
 8003c04:	4602      	mov	r2, r0
 8003c06:	4b06      	ldr	r3, [pc, #24]	@ (8003c20 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003c08:	69db      	ldr	r3, [r3, #28]
 8003c0a:	0a1b      	lsrs	r3, r3, #8
 8003c0c:	f003 0307 	and.w	r3, r3, #7
 8003c10:	4904      	ldr	r1, [pc, #16]	@ (8003c24 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003c12:	5ccb      	ldrb	r3, [r1, r3]
 8003c14:	f003 031f 	and.w	r3, r3, #31
 8003c18:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	bd80      	pop	{r7, pc}
 8003c20:	58024400 	.word	0x58024400
 8003c24:	0800d188 	.word	0x0800d188

08003c28 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003c28:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003c2c:	b0c6      	sub	sp, #280	@ 0x118
 8003c2e:	af00      	add	r7, sp, #0
 8003c30:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003c34:	2300      	movs	r3, #0
 8003c36:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003c40:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003c44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c48:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8003c4c:	2500      	movs	r5, #0
 8003c4e:	ea54 0305 	orrs.w	r3, r4, r5
 8003c52:	d049      	beq.n	8003ce8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8003c54:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003c58:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003c5a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003c5e:	d02f      	beq.n	8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8003c60:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003c64:	d828      	bhi.n	8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003c66:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003c6a:	d01a      	beq.n	8003ca2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003c6c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003c70:	d822      	bhi.n	8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d003      	beq.n	8003c7e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003c76:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003c7a:	d007      	beq.n	8003c8c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003c7c:	e01c      	b.n	8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c7e:	4bab      	ldr	r3, [pc, #684]	@ (8003f2c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003c80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c82:	4aaa      	ldr	r2, [pc, #680]	@ (8003f2c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003c84:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003c88:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003c8a:	e01a      	b.n	8003cc2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003c8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003c90:	3308      	adds	r3, #8
 8003c92:	2102      	movs	r1, #2
 8003c94:	4618      	mov	r0, r3
 8003c96:	f001 fc25 	bl	80054e4 <RCCEx_PLL2_Config>
 8003c9a:	4603      	mov	r3, r0
 8003c9c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003ca0:	e00f      	b.n	8003cc2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003ca2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003ca6:	3328      	adds	r3, #40	@ 0x28
 8003ca8:	2102      	movs	r1, #2
 8003caa:	4618      	mov	r0, r3
 8003cac:	f001 fccc 	bl	8005648 <RCCEx_PLL3_Config>
 8003cb0:	4603      	mov	r3, r0
 8003cb2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003cb6:	e004      	b.n	8003cc2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003cb8:	2301      	movs	r3, #1
 8003cba:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003cbe:	e000      	b.n	8003cc2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8003cc0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003cc2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d10a      	bne.n	8003ce0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003cca:	4b98      	ldr	r3, [pc, #608]	@ (8003f2c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003ccc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003cce:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8003cd2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003cd6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003cd8:	4a94      	ldr	r2, [pc, #592]	@ (8003f2c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003cda:	430b      	orrs	r3, r1
 8003cdc:	6513      	str	r3, [r2, #80]	@ 0x50
 8003cde:	e003      	b.n	8003ce8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ce0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003ce4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003ce8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003cec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cf0:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8003cf4:	f04f 0900 	mov.w	r9, #0
 8003cf8:	ea58 0309 	orrs.w	r3, r8, r9
 8003cfc:	d047      	beq.n	8003d8e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8003cfe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003d02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d04:	2b04      	cmp	r3, #4
 8003d06:	d82a      	bhi.n	8003d5e <HAL_RCCEx_PeriphCLKConfig+0x136>
 8003d08:	a201      	add	r2, pc, #4	@ (adr r2, 8003d10 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8003d0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d0e:	bf00      	nop
 8003d10:	08003d25 	.word	0x08003d25
 8003d14:	08003d33 	.word	0x08003d33
 8003d18:	08003d49 	.word	0x08003d49
 8003d1c:	08003d67 	.word	0x08003d67
 8003d20:	08003d67 	.word	0x08003d67
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d24:	4b81      	ldr	r3, [pc, #516]	@ (8003f2c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003d26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d28:	4a80      	ldr	r2, [pc, #512]	@ (8003f2c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003d2a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003d2e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003d30:	e01a      	b.n	8003d68 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003d32:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003d36:	3308      	adds	r3, #8
 8003d38:	2100      	movs	r1, #0
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	f001 fbd2 	bl	80054e4 <RCCEx_PLL2_Config>
 8003d40:	4603      	mov	r3, r0
 8003d42:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003d46:	e00f      	b.n	8003d68 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003d48:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003d4c:	3328      	adds	r3, #40	@ 0x28
 8003d4e:	2100      	movs	r1, #0
 8003d50:	4618      	mov	r0, r3
 8003d52:	f001 fc79 	bl	8005648 <RCCEx_PLL3_Config>
 8003d56:	4603      	mov	r3, r0
 8003d58:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003d5c:	e004      	b.n	8003d68 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003d5e:	2301      	movs	r3, #1
 8003d60:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003d64:	e000      	b.n	8003d68 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8003d66:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d68:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d10a      	bne.n	8003d86 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003d70:	4b6e      	ldr	r3, [pc, #440]	@ (8003f2c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003d72:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d74:	f023 0107 	bic.w	r1, r3, #7
 8003d78:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003d7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d7e:	4a6b      	ldr	r2, [pc, #428]	@ (8003f2c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003d80:	430b      	orrs	r3, r1
 8003d82:	6513      	str	r3, [r2, #80]	@ 0x50
 8003d84:	e003      	b.n	8003d8e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d86:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003d8a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003d8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003d92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d96:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 8003d9a:	f04f 0b00 	mov.w	fp, #0
 8003d9e:	ea5a 030b 	orrs.w	r3, sl, fp
 8003da2:	d05b      	beq.n	8003e5c <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8003da4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003da8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003dac:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8003db0:	d03b      	beq.n	8003e2a <HAL_RCCEx_PeriphCLKConfig+0x202>
 8003db2:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8003db6:	d834      	bhi.n	8003e22 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8003db8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003dbc:	d037      	beq.n	8003e2e <HAL_RCCEx_PeriphCLKConfig+0x206>
 8003dbe:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003dc2:	d82e      	bhi.n	8003e22 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8003dc4:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8003dc8:	d033      	beq.n	8003e32 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8003dca:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8003dce:	d828      	bhi.n	8003e22 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8003dd0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003dd4:	d01a      	beq.n	8003e0c <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8003dd6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003dda:	d822      	bhi.n	8003e22 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d003      	beq.n	8003de8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8003de0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003de4:	d007      	beq.n	8003df6 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8003de6:	e01c      	b.n	8003e22 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003de8:	4b50      	ldr	r3, [pc, #320]	@ (8003f2c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003dea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dec:	4a4f      	ldr	r2, [pc, #316]	@ (8003f2c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003dee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003df2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003df4:	e01e      	b.n	8003e34 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003df6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003dfa:	3308      	adds	r3, #8
 8003dfc:	2100      	movs	r1, #0
 8003dfe:	4618      	mov	r0, r3
 8003e00:	f001 fb70 	bl	80054e4 <RCCEx_PLL2_Config>
 8003e04:	4603      	mov	r3, r0
 8003e06:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003e0a:	e013      	b.n	8003e34 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003e0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003e10:	3328      	adds	r3, #40	@ 0x28
 8003e12:	2100      	movs	r1, #0
 8003e14:	4618      	mov	r0, r3
 8003e16:	f001 fc17 	bl	8005648 <RCCEx_PLL3_Config>
 8003e1a:	4603      	mov	r3, r0
 8003e1c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003e20:	e008      	b.n	8003e34 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003e22:	2301      	movs	r3, #1
 8003e24:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003e28:	e004      	b.n	8003e34 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8003e2a:	bf00      	nop
 8003e2c:	e002      	b.n	8003e34 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8003e2e:	bf00      	nop
 8003e30:	e000      	b.n	8003e34 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8003e32:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e34:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d10b      	bne.n	8003e54 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003e3c:	4b3b      	ldr	r3, [pc, #236]	@ (8003f2c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003e3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e40:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8003e44:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003e48:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003e4c:	4a37      	ldr	r2, [pc, #220]	@ (8003f2c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003e4e:	430b      	orrs	r3, r1
 8003e50:	6593      	str	r3, [r2, #88]	@ 0x58
 8003e52:	e003      	b.n	8003e5c <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e54:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003e58:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003e5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003e60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e64:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8003e68:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8003e72:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8003e76:	460b      	mov	r3, r1
 8003e78:	4313      	orrs	r3, r2
 8003e7a:	d05d      	beq.n	8003f38 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8003e7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003e80:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003e84:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8003e88:	d03b      	beq.n	8003f02 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8003e8a:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8003e8e:	d834      	bhi.n	8003efa <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8003e90:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003e94:	d037      	beq.n	8003f06 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8003e96:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003e9a:	d82e      	bhi.n	8003efa <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8003e9c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003ea0:	d033      	beq.n	8003f0a <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 8003ea2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003ea6:	d828      	bhi.n	8003efa <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8003ea8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003eac:	d01a      	beq.n	8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 8003eae:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003eb2:	d822      	bhi.n	8003efa <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d003      	beq.n	8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8003eb8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003ebc:	d007      	beq.n	8003ece <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8003ebe:	e01c      	b.n	8003efa <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ec0:	4b1a      	ldr	r3, [pc, #104]	@ (8003f2c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003ec2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ec4:	4a19      	ldr	r2, [pc, #100]	@ (8003f2c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003ec6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003eca:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003ecc:	e01e      	b.n	8003f0c <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003ece:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003ed2:	3308      	adds	r3, #8
 8003ed4:	2100      	movs	r1, #0
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	f001 fb04 	bl	80054e4 <RCCEx_PLL2_Config>
 8003edc:	4603      	mov	r3, r0
 8003ede:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003ee2:	e013      	b.n	8003f0c <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003ee4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003ee8:	3328      	adds	r3, #40	@ 0x28
 8003eea:	2100      	movs	r1, #0
 8003eec:	4618      	mov	r0, r3
 8003eee:	f001 fbab 	bl	8005648 <RCCEx_PLL3_Config>
 8003ef2:	4603      	mov	r3, r0
 8003ef4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003ef8:	e008      	b.n	8003f0c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003efa:	2301      	movs	r3, #1
 8003efc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003f00:	e004      	b.n	8003f0c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8003f02:	bf00      	nop
 8003f04:	e002      	b.n	8003f0c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8003f06:	bf00      	nop
 8003f08:	e000      	b.n	8003f0c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8003f0a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f0c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d10d      	bne.n	8003f30 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003f14:	4b05      	ldr	r3, [pc, #20]	@ (8003f2c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003f16:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f18:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8003f1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003f20:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003f24:	4a01      	ldr	r2, [pc, #4]	@ (8003f2c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003f26:	430b      	orrs	r3, r1
 8003f28:	6593      	str	r3, [r2, #88]	@ 0x58
 8003f2a:	e005      	b.n	8003f38 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8003f2c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f30:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003f34:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8003f38:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003f3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f40:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8003f44:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8003f48:	2300      	movs	r3, #0
 8003f4a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8003f4e:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8003f52:	460b      	mov	r3, r1
 8003f54:	4313      	orrs	r3, r2
 8003f56:	d03a      	beq.n	8003fce <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8003f58:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003f5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f5e:	2b30      	cmp	r3, #48	@ 0x30
 8003f60:	d01f      	beq.n	8003fa2 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 8003f62:	2b30      	cmp	r3, #48	@ 0x30
 8003f64:	d819      	bhi.n	8003f9a <HAL_RCCEx_PeriphCLKConfig+0x372>
 8003f66:	2b20      	cmp	r3, #32
 8003f68:	d00c      	beq.n	8003f84 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8003f6a:	2b20      	cmp	r3, #32
 8003f6c:	d815      	bhi.n	8003f9a <HAL_RCCEx_PeriphCLKConfig+0x372>
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d019      	beq.n	8003fa6 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8003f72:	2b10      	cmp	r3, #16
 8003f74:	d111      	bne.n	8003f9a <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f76:	4baa      	ldr	r3, [pc, #680]	@ (8004220 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003f78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f7a:	4aa9      	ldr	r2, [pc, #676]	@ (8004220 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003f7c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003f80:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8003f82:	e011      	b.n	8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003f84:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003f88:	3308      	adds	r3, #8
 8003f8a:	2102      	movs	r1, #2
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	f001 faa9 	bl	80054e4 <RCCEx_PLL2_Config>
 8003f92:	4603      	mov	r3, r0
 8003f94:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8003f98:	e006      	b.n	8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003f9a:	2301      	movs	r3, #1
 8003f9c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003fa0:	e002      	b.n	8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8003fa2:	bf00      	nop
 8003fa4:	e000      	b.n	8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8003fa6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003fa8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d10a      	bne.n	8003fc6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8003fb0:	4b9b      	ldr	r3, [pc, #620]	@ (8004220 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003fb2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003fb4:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8003fb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003fbc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003fbe:	4a98      	ldr	r2, [pc, #608]	@ (8004220 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003fc0:	430b      	orrs	r3, r1
 8003fc2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003fc4:	e003      	b.n	8003fce <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fc6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003fca:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003fce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003fd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fd6:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8003fda:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003fde:	2300      	movs	r3, #0
 8003fe0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8003fe4:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8003fe8:	460b      	mov	r3, r1
 8003fea:	4313      	orrs	r3, r2
 8003fec:	d051      	beq.n	8004092 <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8003fee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003ff2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ff4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003ff8:	d035      	beq.n	8004066 <HAL_RCCEx_PeriphCLKConfig+0x43e>
 8003ffa:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003ffe:	d82e      	bhi.n	800405e <HAL_RCCEx_PeriphCLKConfig+0x436>
 8004000:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004004:	d031      	beq.n	800406a <HAL_RCCEx_PeriphCLKConfig+0x442>
 8004006:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800400a:	d828      	bhi.n	800405e <HAL_RCCEx_PeriphCLKConfig+0x436>
 800400c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004010:	d01a      	beq.n	8004048 <HAL_RCCEx_PeriphCLKConfig+0x420>
 8004012:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004016:	d822      	bhi.n	800405e <HAL_RCCEx_PeriphCLKConfig+0x436>
 8004018:	2b00      	cmp	r3, #0
 800401a:	d003      	beq.n	8004024 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 800401c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004020:	d007      	beq.n	8004032 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 8004022:	e01c      	b.n	800405e <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004024:	4b7e      	ldr	r3, [pc, #504]	@ (8004220 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004026:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004028:	4a7d      	ldr	r2, [pc, #500]	@ (8004220 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800402a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800402e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004030:	e01c      	b.n	800406c <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004032:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004036:	3308      	adds	r3, #8
 8004038:	2100      	movs	r1, #0
 800403a:	4618      	mov	r0, r3
 800403c:	f001 fa52 	bl	80054e4 <RCCEx_PLL2_Config>
 8004040:	4603      	mov	r3, r0
 8004042:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004046:	e011      	b.n	800406c <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004048:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800404c:	3328      	adds	r3, #40	@ 0x28
 800404e:	2100      	movs	r1, #0
 8004050:	4618      	mov	r0, r3
 8004052:	f001 faf9 	bl	8005648 <RCCEx_PLL3_Config>
 8004056:	4603      	mov	r3, r0
 8004058:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800405c:	e006      	b.n	800406c <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800405e:	2301      	movs	r3, #1
 8004060:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004064:	e002      	b.n	800406c <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8004066:	bf00      	nop
 8004068:	e000      	b.n	800406c <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800406a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800406c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004070:	2b00      	cmp	r3, #0
 8004072:	d10a      	bne.n	800408a <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004074:	4b6a      	ldr	r3, [pc, #424]	@ (8004220 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004076:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004078:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800407c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004080:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004082:	4a67      	ldr	r2, [pc, #412]	@ (8004220 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004084:	430b      	orrs	r3, r1
 8004086:	6513      	str	r3, [r2, #80]	@ 0x50
 8004088:	e003      	b.n	8004092 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800408a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800408e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004092:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004096:	e9d3 2300 	ldrd	r2, r3, [r3]
 800409a:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800409e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80040a2:	2300      	movs	r3, #0
 80040a4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80040a8:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 80040ac:	460b      	mov	r3, r1
 80040ae:	4313      	orrs	r3, r2
 80040b0:	d053      	beq.n	800415a <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80040b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80040b6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80040b8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80040bc:	d033      	beq.n	8004126 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 80040be:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80040c2:	d82c      	bhi.n	800411e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80040c4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80040c8:	d02f      	beq.n	800412a <HAL_RCCEx_PeriphCLKConfig+0x502>
 80040ca:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80040ce:	d826      	bhi.n	800411e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80040d0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80040d4:	d02b      	beq.n	800412e <HAL_RCCEx_PeriphCLKConfig+0x506>
 80040d6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80040da:	d820      	bhi.n	800411e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80040dc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80040e0:	d012      	beq.n	8004108 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 80040e2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80040e6:	d81a      	bhi.n	800411e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d022      	beq.n	8004132 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 80040ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80040f0:	d115      	bne.n	800411e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80040f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80040f6:	3308      	adds	r3, #8
 80040f8:	2101      	movs	r1, #1
 80040fa:	4618      	mov	r0, r3
 80040fc:	f001 f9f2 	bl	80054e4 <RCCEx_PLL2_Config>
 8004100:	4603      	mov	r3, r0
 8004102:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004106:	e015      	b.n	8004134 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004108:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800410c:	3328      	adds	r3, #40	@ 0x28
 800410e:	2101      	movs	r1, #1
 8004110:	4618      	mov	r0, r3
 8004112:	f001 fa99 	bl	8005648 <RCCEx_PLL3_Config>
 8004116:	4603      	mov	r3, r0
 8004118:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800411c:	e00a      	b.n	8004134 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800411e:	2301      	movs	r3, #1
 8004120:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004124:	e006      	b.n	8004134 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8004126:	bf00      	nop
 8004128:	e004      	b.n	8004134 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800412a:	bf00      	nop
 800412c:	e002      	b.n	8004134 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800412e:	bf00      	nop
 8004130:	e000      	b.n	8004134 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8004132:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004134:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004138:	2b00      	cmp	r3, #0
 800413a:	d10a      	bne.n	8004152 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800413c:	4b38      	ldr	r3, [pc, #224]	@ (8004220 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800413e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004140:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8004144:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004148:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800414a:	4a35      	ldr	r2, [pc, #212]	@ (8004220 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800414c:	430b      	orrs	r3, r1
 800414e:	6513      	str	r3, [r2, #80]	@ 0x50
 8004150:	e003      	b.n	800415a <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004152:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004156:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800415a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800415e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004162:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8004166:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800416a:	2300      	movs	r3, #0
 800416c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8004170:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004174:	460b      	mov	r3, r1
 8004176:	4313      	orrs	r3, r2
 8004178:	d058      	beq.n	800422c <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800417a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800417e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8004182:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004186:	d033      	beq.n	80041f0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8004188:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800418c:	d82c      	bhi.n	80041e8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800418e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004192:	d02f      	beq.n	80041f4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8004194:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004198:	d826      	bhi.n	80041e8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800419a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800419e:	d02b      	beq.n	80041f8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 80041a0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80041a4:	d820      	bhi.n	80041e8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80041a6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80041aa:	d012      	beq.n	80041d2 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 80041ac:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80041b0:	d81a      	bhi.n	80041e8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d022      	beq.n	80041fc <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80041b6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80041ba:	d115      	bne.n	80041e8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80041bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80041c0:	3308      	adds	r3, #8
 80041c2:	2101      	movs	r1, #1
 80041c4:	4618      	mov	r0, r3
 80041c6:	f001 f98d 	bl	80054e4 <RCCEx_PLL2_Config>
 80041ca:	4603      	mov	r3, r0
 80041cc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80041d0:	e015      	b.n	80041fe <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80041d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80041d6:	3328      	adds	r3, #40	@ 0x28
 80041d8:	2101      	movs	r1, #1
 80041da:	4618      	mov	r0, r3
 80041dc:	f001 fa34 	bl	8005648 <RCCEx_PLL3_Config>
 80041e0:	4603      	mov	r3, r0
 80041e2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80041e6:	e00a      	b.n	80041fe <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80041e8:	2301      	movs	r3, #1
 80041ea:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80041ee:	e006      	b.n	80041fe <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80041f0:	bf00      	nop
 80041f2:	e004      	b.n	80041fe <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80041f4:	bf00      	nop
 80041f6:	e002      	b.n	80041fe <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80041f8:	bf00      	nop
 80041fa:	e000      	b.n	80041fe <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80041fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80041fe:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004202:	2b00      	cmp	r3, #0
 8004204:	d10e      	bne.n	8004224 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004206:	4b06      	ldr	r3, [pc, #24]	@ (8004220 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004208:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800420a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800420e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004212:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8004216:	4a02      	ldr	r2, [pc, #8]	@ (8004220 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004218:	430b      	orrs	r3, r1
 800421a:	6593      	str	r3, [r2, #88]	@ 0x58
 800421c:	e006      	b.n	800422c <HAL_RCCEx_PeriphCLKConfig+0x604>
 800421e:	bf00      	nop
 8004220:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004224:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004228:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800422c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004230:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004234:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8004238:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800423c:	2300      	movs	r3, #0
 800423e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8004242:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8004246:	460b      	mov	r3, r1
 8004248:	4313      	orrs	r3, r2
 800424a:	d037      	beq.n	80042bc <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800424c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004250:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004252:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004256:	d00e      	beq.n	8004276 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8004258:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800425c:	d816      	bhi.n	800428c <HAL_RCCEx_PeriphCLKConfig+0x664>
 800425e:	2b00      	cmp	r3, #0
 8004260:	d018      	beq.n	8004294 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8004262:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004266:	d111      	bne.n	800428c <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004268:	4bc4      	ldr	r3, [pc, #784]	@ (800457c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800426a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800426c:	4ac3      	ldr	r2, [pc, #780]	@ (800457c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800426e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004272:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004274:	e00f      	b.n	8004296 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004276:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800427a:	3308      	adds	r3, #8
 800427c:	2101      	movs	r1, #1
 800427e:	4618      	mov	r0, r3
 8004280:	f001 f930 	bl	80054e4 <RCCEx_PLL2_Config>
 8004284:	4603      	mov	r3, r0
 8004286:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800428a:	e004      	b.n	8004296 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800428c:	2301      	movs	r3, #1
 800428e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004292:	e000      	b.n	8004296 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8004294:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004296:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800429a:	2b00      	cmp	r3, #0
 800429c:	d10a      	bne.n	80042b4 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800429e:	4bb7      	ldr	r3, [pc, #732]	@ (800457c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80042a0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80042a2:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80042a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80042aa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80042ac:	4ab3      	ldr	r2, [pc, #716]	@ (800457c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80042ae:	430b      	orrs	r3, r1
 80042b0:	6513      	str	r3, [r2, #80]	@ 0x50
 80042b2:	e003      	b.n	80042bc <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042b4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80042b8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80042bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80042c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042c4:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80042c8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80042cc:	2300      	movs	r3, #0
 80042ce:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80042d2:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80042d6:	460b      	mov	r3, r1
 80042d8:	4313      	orrs	r3, r2
 80042da:	d039      	beq.n	8004350 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80042dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80042e0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80042e2:	2b03      	cmp	r3, #3
 80042e4:	d81c      	bhi.n	8004320 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 80042e6:	a201      	add	r2, pc, #4	@ (adr r2, 80042ec <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 80042e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042ec:	08004329 	.word	0x08004329
 80042f0:	080042fd 	.word	0x080042fd
 80042f4:	0800430b 	.word	0x0800430b
 80042f8:	08004329 	.word	0x08004329
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80042fc:	4b9f      	ldr	r3, [pc, #636]	@ (800457c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80042fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004300:	4a9e      	ldr	r2, [pc, #632]	@ (800457c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004302:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004306:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004308:	e00f      	b.n	800432a <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800430a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800430e:	3308      	adds	r3, #8
 8004310:	2102      	movs	r1, #2
 8004312:	4618      	mov	r0, r3
 8004314:	f001 f8e6 	bl	80054e4 <RCCEx_PLL2_Config>
 8004318:	4603      	mov	r3, r0
 800431a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 800431e:	e004      	b.n	800432a <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004320:	2301      	movs	r3, #1
 8004322:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004326:	e000      	b.n	800432a <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8004328:	bf00      	nop
    }

    if (ret == HAL_OK)
 800432a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800432e:	2b00      	cmp	r3, #0
 8004330:	d10a      	bne.n	8004348 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8004332:	4b92      	ldr	r3, [pc, #584]	@ (800457c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004334:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004336:	f023 0103 	bic.w	r1, r3, #3
 800433a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800433e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004340:	4a8e      	ldr	r2, [pc, #568]	@ (800457c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004342:	430b      	orrs	r3, r1
 8004344:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004346:	e003      	b.n	8004350 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004348:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800434c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004350:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004354:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004358:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800435c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004360:	2300      	movs	r3, #0
 8004362:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004366:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800436a:	460b      	mov	r3, r1
 800436c:	4313      	orrs	r3, r2
 800436e:	f000 8099 	beq.w	80044a4 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004372:	4b83      	ldr	r3, [pc, #524]	@ (8004580 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	4a82      	ldr	r2, [pc, #520]	@ (8004580 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8004378:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800437c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800437e:	f7fd fdb9 	bl	8001ef4 <HAL_GetTick>
 8004382:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004386:	e00b      	b.n	80043a0 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004388:	f7fd fdb4 	bl	8001ef4 <HAL_GetTick>
 800438c:	4602      	mov	r2, r0
 800438e:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8004392:	1ad3      	subs	r3, r2, r3
 8004394:	2b64      	cmp	r3, #100	@ 0x64
 8004396:	d903      	bls.n	80043a0 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8004398:	2303      	movs	r3, #3
 800439a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800439e:	e005      	b.n	80043ac <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80043a0:	4b77      	ldr	r3, [pc, #476]	@ (8004580 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d0ed      	beq.n	8004388 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 80043ac:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d173      	bne.n	800449c <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80043b4:	4b71      	ldr	r3, [pc, #452]	@ (800457c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80043b6:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80043b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80043bc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80043c0:	4053      	eors	r3, r2
 80043c2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d015      	beq.n	80043f6 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80043ca:	4b6c      	ldr	r3, [pc, #432]	@ (800457c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80043cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043ce:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80043d2:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80043d6:	4b69      	ldr	r3, [pc, #420]	@ (800457c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80043d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043da:	4a68      	ldr	r2, [pc, #416]	@ (800457c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80043dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80043e0:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80043e2:	4b66      	ldr	r3, [pc, #408]	@ (800457c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80043e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043e6:	4a65      	ldr	r2, [pc, #404]	@ (800457c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80043e8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80043ec:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80043ee:	4a63      	ldr	r2, [pc, #396]	@ (800457c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80043f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80043f4:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80043f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80043fa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80043fe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004402:	d118      	bne.n	8004436 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004404:	f7fd fd76 	bl	8001ef4 <HAL_GetTick>
 8004408:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800440c:	e00d      	b.n	800442a <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800440e:	f7fd fd71 	bl	8001ef4 <HAL_GetTick>
 8004412:	4602      	mov	r2, r0
 8004414:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8004418:	1ad2      	subs	r2, r2, r3
 800441a:	f241 3388 	movw	r3, #5000	@ 0x1388
 800441e:	429a      	cmp	r2, r3
 8004420:	d903      	bls.n	800442a <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8004422:	2303      	movs	r3, #3
 8004424:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 8004428:	e005      	b.n	8004436 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800442a:	4b54      	ldr	r3, [pc, #336]	@ (800457c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800442c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800442e:	f003 0302 	and.w	r3, r3, #2
 8004432:	2b00      	cmp	r3, #0
 8004434:	d0eb      	beq.n	800440e <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8004436:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800443a:	2b00      	cmp	r3, #0
 800443c:	d129      	bne.n	8004492 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800443e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004442:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004446:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800444a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800444e:	d10e      	bne.n	800446e <HAL_RCCEx_PeriphCLKConfig+0x846>
 8004450:	4b4a      	ldr	r3, [pc, #296]	@ (800457c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004452:	691b      	ldr	r3, [r3, #16]
 8004454:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8004458:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800445c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004460:	091a      	lsrs	r2, r3, #4
 8004462:	4b48      	ldr	r3, [pc, #288]	@ (8004584 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8004464:	4013      	ands	r3, r2
 8004466:	4a45      	ldr	r2, [pc, #276]	@ (800457c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004468:	430b      	orrs	r3, r1
 800446a:	6113      	str	r3, [r2, #16]
 800446c:	e005      	b.n	800447a <HAL_RCCEx_PeriphCLKConfig+0x852>
 800446e:	4b43      	ldr	r3, [pc, #268]	@ (800457c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004470:	691b      	ldr	r3, [r3, #16]
 8004472:	4a42      	ldr	r2, [pc, #264]	@ (800457c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004474:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004478:	6113      	str	r3, [r2, #16]
 800447a:	4b40      	ldr	r3, [pc, #256]	@ (800457c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800447c:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800447e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004482:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004486:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800448a:	4a3c      	ldr	r2, [pc, #240]	@ (800457c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800448c:	430b      	orrs	r3, r1
 800448e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004490:	e008      	b.n	80044a4 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004492:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004496:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 800449a:	e003      	b.n	80044a4 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800449c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80044a0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80044a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80044a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044ac:	f002 0301 	and.w	r3, r2, #1
 80044b0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80044b4:	2300      	movs	r3, #0
 80044b6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80044ba:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80044be:	460b      	mov	r3, r1
 80044c0:	4313      	orrs	r3, r2
 80044c2:	f000 808f 	beq.w	80045e4 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80044c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80044ca:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80044cc:	2b28      	cmp	r3, #40	@ 0x28
 80044ce:	d871      	bhi.n	80045b4 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 80044d0:	a201      	add	r2, pc, #4	@ (adr r2, 80044d8 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 80044d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044d6:	bf00      	nop
 80044d8:	080045bd 	.word	0x080045bd
 80044dc:	080045b5 	.word	0x080045b5
 80044e0:	080045b5 	.word	0x080045b5
 80044e4:	080045b5 	.word	0x080045b5
 80044e8:	080045b5 	.word	0x080045b5
 80044ec:	080045b5 	.word	0x080045b5
 80044f0:	080045b5 	.word	0x080045b5
 80044f4:	080045b5 	.word	0x080045b5
 80044f8:	08004589 	.word	0x08004589
 80044fc:	080045b5 	.word	0x080045b5
 8004500:	080045b5 	.word	0x080045b5
 8004504:	080045b5 	.word	0x080045b5
 8004508:	080045b5 	.word	0x080045b5
 800450c:	080045b5 	.word	0x080045b5
 8004510:	080045b5 	.word	0x080045b5
 8004514:	080045b5 	.word	0x080045b5
 8004518:	0800459f 	.word	0x0800459f
 800451c:	080045b5 	.word	0x080045b5
 8004520:	080045b5 	.word	0x080045b5
 8004524:	080045b5 	.word	0x080045b5
 8004528:	080045b5 	.word	0x080045b5
 800452c:	080045b5 	.word	0x080045b5
 8004530:	080045b5 	.word	0x080045b5
 8004534:	080045b5 	.word	0x080045b5
 8004538:	080045bd 	.word	0x080045bd
 800453c:	080045b5 	.word	0x080045b5
 8004540:	080045b5 	.word	0x080045b5
 8004544:	080045b5 	.word	0x080045b5
 8004548:	080045b5 	.word	0x080045b5
 800454c:	080045b5 	.word	0x080045b5
 8004550:	080045b5 	.word	0x080045b5
 8004554:	080045b5 	.word	0x080045b5
 8004558:	080045bd 	.word	0x080045bd
 800455c:	080045b5 	.word	0x080045b5
 8004560:	080045b5 	.word	0x080045b5
 8004564:	080045b5 	.word	0x080045b5
 8004568:	080045b5 	.word	0x080045b5
 800456c:	080045b5 	.word	0x080045b5
 8004570:	080045b5 	.word	0x080045b5
 8004574:	080045b5 	.word	0x080045b5
 8004578:	080045bd 	.word	0x080045bd
 800457c:	58024400 	.word	0x58024400
 8004580:	58024800 	.word	0x58024800
 8004584:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004588:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800458c:	3308      	adds	r3, #8
 800458e:	2101      	movs	r1, #1
 8004590:	4618      	mov	r0, r3
 8004592:	f000 ffa7 	bl	80054e4 <RCCEx_PLL2_Config>
 8004596:	4603      	mov	r3, r0
 8004598:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800459c:	e00f      	b.n	80045be <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800459e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80045a2:	3328      	adds	r3, #40	@ 0x28
 80045a4:	2101      	movs	r1, #1
 80045a6:	4618      	mov	r0, r3
 80045a8:	f001 f84e 	bl	8005648 <RCCEx_PLL3_Config>
 80045ac:	4603      	mov	r3, r0
 80045ae:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80045b2:	e004      	b.n	80045be <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80045b4:	2301      	movs	r3, #1
 80045b6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80045ba:	e000      	b.n	80045be <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 80045bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80045be:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d10a      	bne.n	80045dc <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80045c6:	4bbf      	ldr	r3, [pc, #764]	@ (80048c4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80045c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045ca:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80045ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80045d2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80045d4:	4abb      	ldr	r2, [pc, #748]	@ (80048c4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80045d6:	430b      	orrs	r3, r1
 80045d8:	6553      	str	r3, [r2, #84]	@ 0x54
 80045da:	e003      	b.n	80045e4 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045dc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80045e0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80045e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80045e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045ec:	f002 0302 	and.w	r3, r2, #2
 80045f0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80045f4:	2300      	movs	r3, #0
 80045f6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80045fa:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80045fe:	460b      	mov	r3, r1
 8004600:	4313      	orrs	r3, r2
 8004602:	d041      	beq.n	8004688 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8004604:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004608:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800460a:	2b05      	cmp	r3, #5
 800460c:	d824      	bhi.n	8004658 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 800460e:	a201      	add	r2, pc, #4	@ (adr r2, 8004614 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 8004610:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004614:	08004661 	.word	0x08004661
 8004618:	0800462d 	.word	0x0800462d
 800461c:	08004643 	.word	0x08004643
 8004620:	08004661 	.word	0x08004661
 8004624:	08004661 	.word	0x08004661
 8004628:	08004661 	.word	0x08004661
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800462c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004630:	3308      	adds	r3, #8
 8004632:	2101      	movs	r1, #1
 8004634:	4618      	mov	r0, r3
 8004636:	f000 ff55 	bl	80054e4 <RCCEx_PLL2_Config>
 800463a:	4603      	mov	r3, r0
 800463c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004640:	e00f      	b.n	8004662 <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004642:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004646:	3328      	adds	r3, #40	@ 0x28
 8004648:	2101      	movs	r1, #1
 800464a:	4618      	mov	r0, r3
 800464c:	f000 fffc 	bl	8005648 <RCCEx_PLL3_Config>
 8004650:	4603      	mov	r3, r0
 8004652:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004656:	e004      	b.n	8004662 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004658:	2301      	movs	r3, #1
 800465a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800465e:	e000      	b.n	8004662 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 8004660:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004662:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004666:	2b00      	cmp	r3, #0
 8004668:	d10a      	bne.n	8004680 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800466a:	4b96      	ldr	r3, [pc, #600]	@ (80048c4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800466c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800466e:	f023 0107 	bic.w	r1, r3, #7
 8004672:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004676:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004678:	4a92      	ldr	r2, [pc, #584]	@ (80048c4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800467a:	430b      	orrs	r3, r1
 800467c:	6553      	str	r3, [r2, #84]	@ 0x54
 800467e:	e003      	b.n	8004688 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004680:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004684:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004688:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800468c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004690:	f002 0304 	and.w	r3, r2, #4
 8004694:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004698:	2300      	movs	r3, #0
 800469a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800469e:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80046a2:	460b      	mov	r3, r1
 80046a4:	4313      	orrs	r3, r2
 80046a6:	d044      	beq.n	8004732 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80046a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80046ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80046b0:	2b05      	cmp	r3, #5
 80046b2:	d825      	bhi.n	8004700 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 80046b4:	a201      	add	r2, pc, #4	@ (adr r2, 80046bc <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 80046b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046ba:	bf00      	nop
 80046bc:	08004709 	.word	0x08004709
 80046c0:	080046d5 	.word	0x080046d5
 80046c4:	080046eb 	.word	0x080046eb
 80046c8:	08004709 	.word	0x08004709
 80046cc:	08004709 	.word	0x08004709
 80046d0:	08004709 	.word	0x08004709
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80046d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80046d8:	3308      	adds	r3, #8
 80046da:	2101      	movs	r1, #1
 80046dc:	4618      	mov	r0, r3
 80046de:	f000 ff01 	bl	80054e4 <RCCEx_PLL2_Config>
 80046e2:	4603      	mov	r3, r0
 80046e4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80046e8:	e00f      	b.n	800470a <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80046ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80046ee:	3328      	adds	r3, #40	@ 0x28
 80046f0:	2101      	movs	r1, #1
 80046f2:	4618      	mov	r0, r3
 80046f4:	f000 ffa8 	bl	8005648 <RCCEx_PLL3_Config>
 80046f8:	4603      	mov	r3, r0
 80046fa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80046fe:	e004      	b.n	800470a <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004700:	2301      	movs	r3, #1
 8004702:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004706:	e000      	b.n	800470a <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 8004708:	bf00      	nop
    }

    if (ret == HAL_OK)
 800470a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800470e:	2b00      	cmp	r3, #0
 8004710:	d10b      	bne.n	800472a <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004712:	4b6c      	ldr	r3, [pc, #432]	@ (80048c4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004714:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004716:	f023 0107 	bic.w	r1, r3, #7
 800471a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800471e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004722:	4a68      	ldr	r2, [pc, #416]	@ (80048c4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004724:	430b      	orrs	r3, r1
 8004726:	6593      	str	r3, [r2, #88]	@ 0x58
 8004728:	e003      	b.n	8004732 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800472a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800472e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004732:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004736:	e9d3 2300 	ldrd	r2, r3, [r3]
 800473a:	f002 0320 	and.w	r3, r2, #32
 800473e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004742:	2300      	movs	r3, #0
 8004744:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8004748:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800474c:	460b      	mov	r3, r1
 800474e:	4313      	orrs	r3, r2
 8004750:	d055      	beq.n	80047fe <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8004752:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004756:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800475a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800475e:	d033      	beq.n	80047c8 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8004760:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004764:	d82c      	bhi.n	80047c0 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8004766:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800476a:	d02f      	beq.n	80047cc <HAL_RCCEx_PeriphCLKConfig+0xba4>
 800476c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004770:	d826      	bhi.n	80047c0 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8004772:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004776:	d02b      	beq.n	80047d0 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8004778:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800477c:	d820      	bhi.n	80047c0 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800477e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004782:	d012      	beq.n	80047aa <HAL_RCCEx_PeriphCLKConfig+0xb82>
 8004784:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004788:	d81a      	bhi.n	80047c0 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800478a:	2b00      	cmp	r3, #0
 800478c:	d022      	beq.n	80047d4 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 800478e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004792:	d115      	bne.n	80047c0 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004794:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004798:	3308      	adds	r3, #8
 800479a:	2100      	movs	r1, #0
 800479c:	4618      	mov	r0, r3
 800479e:	f000 fea1 	bl	80054e4 <RCCEx_PLL2_Config>
 80047a2:	4603      	mov	r3, r0
 80047a4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80047a8:	e015      	b.n	80047d6 <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80047aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80047ae:	3328      	adds	r3, #40	@ 0x28
 80047b0:	2102      	movs	r1, #2
 80047b2:	4618      	mov	r0, r3
 80047b4:	f000 ff48 	bl	8005648 <RCCEx_PLL3_Config>
 80047b8:	4603      	mov	r3, r0
 80047ba:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80047be:	e00a      	b.n	80047d6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80047c0:	2301      	movs	r3, #1
 80047c2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80047c6:	e006      	b.n	80047d6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80047c8:	bf00      	nop
 80047ca:	e004      	b.n	80047d6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80047cc:	bf00      	nop
 80047ce:	e002      	b.n	80047d6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80047d0:	bf00      	nop
 80047d2:	e000      	b.n	80047d6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80047d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80047d6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d10b      	bne.n	80047f6 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80047de:	4b39      	ldr	r3, [pc, #228]	@ (80048c4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80047e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80047e2:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80047e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80047ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80047ee:	4a35      	ldr	r2, [pc, #212]	@ (80048c4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80047f0:	430b      	orrs	r3, r1
 80047f2:	6553      	str	r3, [r2, #84]	@ 0x54
 80047f4:	e003      	b.n	80047fe <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047f6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80047fa:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80047fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004802:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004806:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800480a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800480e:	2300      	movs	r3, #0
 8004810:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004814:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8004818:	460b      	mov	r3, r1
 800481a:	4313      	orrs	r3, r2
 800481c:	d058      	beq.n	80048d0 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800481e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004822:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004826:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800482a:	d033      	beq.n	8004894 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 800482c:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8004830:	d82c      	bhi.n	800488c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8004832:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004836:	d02f      	beq.n	8004898 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8004838:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800483c:	d826      	bhi.n	800488c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800483e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004842:	d02b      	beq.n	800489c <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8004844:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004848:	d820      	bhi.n	800488c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800484a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800484e:	d012      	beq.n	8004876 <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 8004850:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004854:	d81a      	bhi.n	800488c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8004856:	2b00      	cmp	r3, #0
 8004858:	d022      	beq.n	80048a0 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800485a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800485e:	d115      	bne.n	800488c <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004860:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004864:	3308      	adds	r3, #8
 8004866:	2100      	movs	r1, #0
 8004868:	4618      	mov	r0, r3
 800486a:	f000 fe3b 	bl	80054e4 <RCCEx_PLL2_Config>
 800486e:	4603      	mov	r3, r0
 8004870:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004874:	e015      	b.n	80048a2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004876:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800487a:	3328      	adds	r3, #40	@ 0x28
 800487c:	2102      	movs	r1, #2
 800487e:	4618      	mov	r0, r3
 8004880:	f000 fee2 	bl	8005648 <RCCEx_PLL3_Config>
 8004884:	4603      	mov	r3, r0
 8004886:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800488a:	e00a      	b.n	80048a2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800488c:	2301      	movs	r3, #1
 800488e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004892:	e006      	b.n	80048a2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8004894:	bf00      	nop
 8004896:	e004      	b.n	80048a2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8004898:	bf00      	nop
 800489a:	e002      	b.n	80048a2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800489c:	bf00      	nop
 800489e:	e000      	b.n	80048a2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80048a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80048a2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d10e      	bne.n	80048c8 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80048aa:	4b06      	ldr	r3, [pc, #24]	@ (80048c4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80048ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048ae:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 80048b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80048b6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80048ba:	4a02      	ldr	r2, [pc, #8]	@ (80048c4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80048bc:	430b      	orrs	r3, r1
 80048be:	6593      	str	r3, [r2, #88]	@ 0x58
 80048c0:	e006      	b.n	80048d0 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 80048c2:	bf00      	nop
 80048c4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048c8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80048cc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80048d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80048d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048d8:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80048dc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80048e0:	2300      	movs	r3, #0
 80048e2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80048e6:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80048ea:	460b      	mov	r3, r1
 80048ec:	4313      	orrs	r3, r2
 80048ee:	d055      	beq.n	800499c <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80048f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80048f4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80048f8:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80048fc:	d033      	beq.n	8004966 <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 80048fe:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8004902:	d82c      	bhi.n	800495e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8004904:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004908:	d02f      	beq.n	800496a <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800490a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800490e:	d826      	bhi.n	800495e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8004910:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8004914:	d02b      	beq.n	800496e <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8004916:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800491a:	d820      	bhi.n	800495e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800491c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004920:	d012      	beq.n	8004948 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 8004922:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004926:	d81a      	bhi.n	800495e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8004928:	2b00      	cmp	r3, #0
 800492a:	d022      	beq.n	8004972 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800492c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004930:	d115      	bne.n	800495e <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004932:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004936:	3308      	adds	r3, #8
 8004938:	2100      	movs	r1, #0
 800493a:	4618      	mov	r0, r3
 800493c:	f000 fdd2 	bl	80054e4 <RCCEx_PLL2_Config>
 8004940:	4603      	mov	r3, r0
 8004942:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004946:	e015      	b.n	8004974 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004948:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800494c:	3328      	adds	r3, #40	@ 0x28
 800494e:	2102      	movs	r1, #2
 8004950:	4618      	mov	r0, r3
 8004952:	f000 fe79 	bl	8005648 <RCCEx_PLL3_Config>
 8004956:	4603      	mov	r3, r0
 8004958:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800495c:	e00a      	b.n	8004974 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800495e:	2301      	movs	r3, #1
 8004960:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004964:	e006      	b.n	8004974 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8004966:	bf00      	nop
 8004968:	e004      	b.n	8004974 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800496a:	bf00      	nop
 800496c:	e002      	b.n	8004974 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800496e:	bf00      	nop
 8004970:	e000      	b.n	8004974 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8004972:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004974:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004978:	2b00      	cmp	r3, #0
 800497a:	d10b      	bne.n	8004994 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800497c:	4ba0      	ldr	r3, [pc, #640]	@ (8004c00 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800497e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004980:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8004984:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004988:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800498c:	4a9c      	ldr	r2, [pc, #624]	@ (8004c00 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800498e:	430b      	orrs	r3, r1
 8004990:	6593      	str	r3, [r2, #88]	@ 0x58
 8004992:	e003      	b.n	800499c <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004994:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004998:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 800499c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80049a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049a4:	f002 0308 	and.w	r3, r2, #8
 80049a8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80049ac:	2300      	movs	r3, #0
 80049ae:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80049b2:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80049b6:	460b      	mov	r3, r1
 80049b8:	4313      	orrs	r3, r2
 80049ba:	d01e      	beq.n	80049fa <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 80049bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80049c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80049c4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80049c8:	d10c      	bne.n	80049e4 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80049ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80049ce:	3328      	adds	r3, #40	@ 0x28
 80049d0:	2102      	movs	r1, #2
 80049d2:	4618      	mov	r0, r3
 80049d4:	f000 fe38 	bl	8005648 <RCCEx_PLL3_Config>
 80049d8:	4603      	mov	r3, r0
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d002      	beq.n	80049e4 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 80049de:	2301      	movs	r3, #1
 80049e0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 80049e4:	4b86      	ldr	r3, [pc, #536]	@ (8004c00 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80049e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049e8:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80049ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80049f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80049f4:	4a82      	ldr	r2, [pc, #520]	@ (8004c00 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80049f6:	430b      	orrs	r3, r1
 80049f8:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80049fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80049fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a02:	f002 0310 	and.w	r3, r2, #16
 8004a06:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004a0a:	2300      	movs	r3, #0
 8004a0c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004a10:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8004a14:	460b      	mov	r3, r1
 8004a16:	4313      	orrs	r3, r2
 8004a18:	d01e      	beq.n	8004a58 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8004a1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004a1e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004a22:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004a26:	d10c      	bne.n	8004a42 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004a28:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004a2c:	3328      	adds	r3, #40	@ 0x28
 8004a2e:	2102      	movs	r1, #2
 8004a30:	4618      	mov	r0, r3
 8004a32:	f000 fe09 	bl	8005648 <RCCEx_PLL3_Config>
 8004a36:	4603      	mov	r3, r0
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d002      	beq.n	8004a42 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 8004a3c:	2301      	movs	r3, #1
 8004a3e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004a42:	4b6f      	ldr	r3, [pc, #444]	@ (8004c00 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004a44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a46:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004a4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004a4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004a52:	4a6b      	ldr	r2, [pc, #428]	@ (8004c00 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004a54:	430b      	orrs	r3, r1
 8004a56:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004a58:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004a5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a60:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8004a64:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004a66:	2300      	movs	r3, #0
 8004a68:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004a6a:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8004a6e:	460b      	mov	r3, r1
 8004a70:	4313      	orrs	r3, r2
 8004a72:	d03e      	beq.n	8004af2 <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8004a74:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004a78:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004a7c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004a80:	d022      	beq.n	8004ac8 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8004a82:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004a86:	d81b      	bhi.n	8004ac0 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d003      	beq.n	8004a94 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 8004a8c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004a90:	d00b      	beq.n	8004aaa <HAL_RCCEx_PeriphCLKConfig+0xe82>
 8004a92:	e015      	b.n	8004ac0 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004a94:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004a98:	3308      	adds	r3, #8
 8004a9a:	2100      	movs	r1, #0
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	f000 fd21 	bl	80054e4 <RCCEx_PLL2_Config>
 8004aa2:	4603      	mov	r3, r0
 8004aa4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004aa8:	e00f      	b.n	8004aca <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004aaa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004aae:	3328      	adds	r3, #40	@ 0x28
 8004ab0:	2102      	movs	r1, #2
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	f000 fdc8 	bl	8005648 <RCCEx_PLL3_Config>
 8004ab8:	4603      	mov	r3, r0
 8004aba:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004abe:	e004      	b.n	8004aca <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004ac0:	2301      	movs	r3, #1
 8004ac2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004ac6:	e000      	b.n	8004aca <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 8004ac8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004aca:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d10b      	bne.n	8004aea <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004ad2:	4b4b      	ldr	r3, [pc, #300]	@ (8004c00 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004ad4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ad6:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8004ada:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004ade:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004ae2:	4a47      	ldr	r2, [pc, #284]	@ (8004c00 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004ae4:	430b      	orrs	r3, r1
 8004ae6:	6593      	str	r3, [r2, #88]	@ 0x58
 8004ae8:	e003      	b.n	8004af2 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004aea:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004aee:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004af2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004af6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004afa:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8004afe:	673b      	str	r3, [r7, #112]	@ 0x70
 8004b00:	2300      	movs	r3, #0
 8004b02:	677b      	str	r3, [r7, #116]	@ 0x74
 8004b04:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8004b08:	460b      	mov	r3, r1
 8004b0a:	4313      	orrs	r3, r2
 8004b0c:	d03b      	beq.n	8004b86 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8004b0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004b12:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004b16:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004b1a:	d01f      	beq.n	8004b5c <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8004b1c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004b20:	d818      	bhi.n	8004b54 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8004b22:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004b26:	d003      	beq.n	8004b30 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 8004b28:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004b2c:	d007      	beq.n	8004b3e <HAL_RCCEx_PeriphCLKConfig+0xf16>
 8004b2e:	e011      	b.n	8004b54 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004b30:	4b33      	ldr	r3, [pc, #204]	@ (8004c00 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004b32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b34:	4a32      	ldr	r2, [pc, #200]	@ (8004c00 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004b36:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004b3a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8004b3c:	e00f      	b.n	8004b5e <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004b3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004b42:	3328      	adds	r3, #40	@ 0x28
 8004b44:	2101      	movs	r1, #1
 8004b46:	4618      	mov	r0, r3
 8004b48:	f000 fd7e 	bl	8005648 <RCCEx_PLL3_Config>
 8004b4c:	4603      	mov	r3, r0
 8004b4e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 8004b52:	e004      	b.n	8004b5e <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004b54:	2301      	movs	r3, #1
 8004b56:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004b5a:	e000      	b.n	8004b5e <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 8004b5c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004b5e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d10b      	bne.n	8004b7e <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004b66:	4b26      	ldr	r3, [pc, #152]	@ (8004c00 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004b68:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b6a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8004b6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004b72:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004b76:	4a22      	ldr	r2, [pc, #136]	@ (8004c00 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004b78:	430b      	orrs	r3, r1
 8004b7a:	6553      	str	r3, [r2, #84]	@ 0x54
 8004b7c:	e003      	b.n	8004b86 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b7e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004b82:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004b86:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004b8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b8e:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8004b92:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004b94:	2300      	movs	r3, #0
 8004b96:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004b98:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8004b9c:	460b      	mov	r3, r1
 8004b9e:	4313      	orrs	r3, r2
 8004ba0:	d034      	beq.n	8004c0c <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8004ba2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004ba6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d003      	beq.n	8004bb4 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 8004bac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004bb0:	d007      	beq.n	8004bc2 <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 8004bb2:	e011      	b.n	8004bd8 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004bb4:	4b12      	ldr	r3, [pc, #72]	@ (8004c00 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004bb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bb8:	4a11      	ldr	r2, [pc, #68]	@ (8004c00 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004bba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004bbe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004bc0:	e00e      	b.n	8004be0 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004bc2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004bc6:	3308      	adds	r3, #8
 8004bc8:	2102      	movs	r1, #2
 8004bca:	4618      	mov	r0, r3
 8004bcc:	f000 fc8a 	bl	80054e4 <RCCEx_PLL2_Config>
 8004bd0:	4603      	mov	r3, r0
 8004bd2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004bd6:	e003      	b.n	8004be0 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 8004bd8:	2301      	movs	r3, #1
 8004bda:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004bde:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004be0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d10d      	bne.n	8004c04 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004be8:	4b05      	ldr	r3, [pc, #20]	@ (8004c00 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004bea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004bec:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004bf0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004bf4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004bf6:	4a02      	ldr	r2, [pc, #8]	@ (8004c00 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004bf8:	430b      	orrs	r3, r1
 8004bfa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004bfc:	e006      	b.n	8004c0c <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 8004bfe:	bf00      	nop
 8004c00:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c04:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004c08:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004c0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004c10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c14:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8004c18:	663b      	str	r3, [r7, #96]	@ 0x60
 8004c1a:	2300      	movs	r3, #0
 8004c1c:	667b      	str	r3, [r7, #100]	@ 0x64
 8004c1e:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8004c22:	460b      	mov	r3, r1
 8004c24:	4313      	orrs	r3, r2
 8004c26:	d00c      	beq.n	8004c42 <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004c28:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004c2c:	3328      	adds	r3, #40	@ 0x28
 8004c2e:	2102      	movs	r1, #2
 8004c30:	4618      	mov	r0, r3
 8004c32:	f000 fd09 	bl	8005648 <RCCEx_PLL3_Config>
 8004c36:	4603      	mov	r3, r0
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d002      	beq.n	8004c42 <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 8004c3c:	2301      	movs	r3, #1
 8004c3e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004c42:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004c46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c4a:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8004c4e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004c50:	2300      	movs	r3, #0
 8004c52:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004c54:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8004c58:	460b      	mov	r3, r1
 8004c5a:	4313      	orrs	r3, r2
 8004c5c:	d036      	beq.n	8004ccc <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 8004c5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004c62:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004c64:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004c68:	d018      	beq.n	8004c9c <HAL_RCCEx_PeriphCLKConfig+0x1074>
 8004c6a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004c6e:	d811      	bhi.n	8004c94 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8004c70:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004c74:	d014      	beq.n	8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 8004c76:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004c7a:	d80b      	bhi.n	8004c94 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d011      	beq.n	8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8004c80:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004c84:	d106      	bne.n	8004c94 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004c86:	4bb7      	ldr	r3, [pc, #732]	@ (8004f64 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004c88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c8a:	4ab6      	ldr	r2, [pc, #728]	@ (8004f64 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004c8c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004c90:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8004c92:	e008      	b.n	8004ca6 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004c94:	2301      	movs	r3, #1
 8004c96:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004c9a:	e004      	b.n	8004ca6 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8004c9c:	bf00      	nop
 8004c9e:	e002      	b.n	8004ca6 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8004ca0:	bf00      	nop
 8004ca2:	e000      	b.n	8004ca6 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8004ca4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004ca6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d10a      	bne.n	8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004cae:	4bad      	ldr	r3, [pc, #692]	@ (8004f64 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004cb0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004cb2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004cb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004cba:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004cbc:	4aa9      	ldr	r2, [pc, #676]	@ (8004f64 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004cbe:	430b      	orrs	r3, r1
 8004cc0:	6553      	str	r3, [r2, #84]	@ 0x54
 8004cc2:	e003      	b.n	8004ccc <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cc4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004cc8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004ccc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004cd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cd4:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8004cd8:	653b      	str	r3, [r7, #80]	@ 0x50
 8004cda:	2300      	movs	r3, #0
 8004cdc:	657b      	str	r3, [r7, #84]	@ 0x54
 8004cde:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8004ce2:	460b      	mov	r3, r1
 8004ce4:	4313      	orrs	r3, r2
 8004ce6:	d009      	beq.n	8004cfc <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004ce8:	4b9e      	ldr	r3, [pc, #632]	@ (8004f64 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004cea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004cec:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8004cf0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004cf4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004cf6:	4a9b      	ldr	r2, [pc, #620]	@ (8004f64 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004cf8:	430b      	orrs	r3, r1
 8004cfa:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004cfc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004d00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d04:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8004d08:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004d0a:	2300      	movs	r3, #0
 8004d0c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004d0e:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8004d12:	460b      	mov	r3, r1
 8004d14:	4313      	orrs	r3, r2
 8004d16:	d009      	beq.n	8004d2c <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004d18:	4b92      	ldr	r3, [pc, #584]	@ (8004f64 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004d1a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004d1c:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8004d20:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004d24:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004d26:	4a8f      	ldr	r2, [pc, #572]	@ (8004f64 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004d28:	430b      	orrs	r3, r1
 8004d2a:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004d2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004d30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d34:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8004d38:	643b      	str	r3, [r7, #64]	@ 0x40
 8004d3a:	2300      	movs	r3, #0
 8004d3c:	647b      	str	r3, [r7, #68]	@ 0x44
 8004d3e:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8004d42:	460b      	mov	r3, r1
 8004d44:	4313      	orrs	r3, r2
 8004d46:	d00e      	beq.n	8004d66 <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004d48:	4b86      	ldr	r3, [pc, #536]	@ (8004f64 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004d4a:	691b      	ldr	r3, [r3, #16]
 8004d4c:	4a85      	ldr	r2, [pc, #532]	@ (8004f64 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004d4e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004d52:	6113      	str	r3, [r2, #16]
 8004d54:	4b83      	ldr	r3, [pc, #524]	@ (8004f64 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004d56:	6919      	ldr	r1, [r3, #16]
 8004d58:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004d5c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004d60:	4a80      	ldr	r2, [pc, #512]	@ (8004f64 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004d62:	430b      	orrs	r3, r1
 8004d64:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004d66:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004d6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d6e:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8004d72:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004d74:	2300      	movs	r3, #0
 8004d76:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004d78:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8004d7c:	460b      	mov	r3, r1
 8004d7e:	4313      	orrs	r3, r2
 8004d80:	d009      	beq.n	8004d96 <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004d82:	4b78      	ldr	r3, [pc, #480]	@ (8004f64 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004d84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004d86:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8004d8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004d8e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d90:	4a74      	ldr	r2, [pc, #464]	@ (8004f64 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004d92:	430b      	orrs	r3, r1
 8004d94:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004d96:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004d9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d9e:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8004da2:	633b      	str	r3, [r7, #48]	@ 0x30
 8004da4:	2300      	movs	r3, #0
 8004da6:	637b      	str	r3, [r7, #52]	@ 0x34
 8004da8:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8004dac:	460b      	mov	r3, r1
 8004dae:	4313      	orrs	r3, r2
 8004db0:	d00a      	beq.n	8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004db2:	4b6c      	ldr	r3, [pc, #432]	@ (8004f64 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004db4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004db6:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8004dba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004dbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004dc2:	4a68      	ldr	r2, [pc, #416]	@ (8004f64 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004dc4:	430b      	orrs	r3, r1
 8004dc6:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8004dc8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004dcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dd0:	2100      	movs	r1, #0
 8004dd2:	62b9      	str	r1, [r7, #40]	@ 0x28
 8004dd4:	f003 0301 	and.w	r3, r3, #1
 8004dd8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004dda:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8004dde:	460b      	mov	r3, r1
 8004de0:	4313      	orrs	r3, r2
 8004de2:	d011      	beq.n	8004e08 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004de4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004de8:	3308      	adds	r3, #8
 8004dea:	2100      	movs	r1, #0
 8004dec:	4618      	mov	r0, r3
 8004dee:	f000 fb79 	bl	80054e4 <RCCEx_PLL2_Config>
 8004df2:	4603      	mov	r3, r0
 8004df4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8004df8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d003      	beq.n	8004e08 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e00:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004e04:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8004e08:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004e0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e10:	2100      	movs	r1, #0
 8004e12:	6239      	str	r1, [r7, #32]
 8004e14:	f003 0302 	and.w	r3, r3, #2
 8004e18:	627b      	str	r3, [r7, #36]	@ 0x24
 8004e1a:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8004e1e:	460b      	mov	r3, r1
 8004e20:	4313      	orrs	r3, r2
 8004e22:	d011      	beq.n	8004e48 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004e24:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004e28:	3308      	adds	r3, #8
 8004e2a:	2101      	movs	r1, #1
 8004e2c:	4618      	mov	r0, r3
 8004e2e:	f000 fb59 	bl	80054e4 <RCCEx_PLL2_Config>
 8004e32:	4603      	mov	r3, r0
 8004e34:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8004e38:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d003      	beq.n	8004e48 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e40:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004e44:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8004e48:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004e4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e50:	2100      	movs	r1, #0
 8004e52:	61b9      	str	r1, [r7, #24]
 8004e54:	f003 0304 	and.w	r3, r3, #4
 8004e58:	61fb      	str	r3, [r7, #28]
 8004e5a:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8004e5e:	460b      	mov	r3, r1
 8004e60:	4313      	orrs	r3, r2
 8004e62:	d011      	beq.n	8004e88 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004e64:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004e68:	3308      	adds	r3, #8
 8004e6a:	2102      	movs	r1, #2
 8004e6c:	4618      	mov	r0, r3
 8004e6e:	f000 fb39 	bl	80054e4 <RCCEx_PLL2_Config>
 8004e72:	4603      	mov	r3, r0
 8004e74:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8004e78:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d003      	beq.n	8004e88 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e80:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004e84:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8004e88:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004e8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e90:	2100      	movs	r1, #0
 8004e92:	6139      	str	r1, [r7, #16]
 8004e94:	f003 0308 	and.w	r3, r3, #8
 8004e98:	617b      	str	r3, [r7, #20]
 8004e9a:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004e9e:	460b      	mov	r3, r1
 8004ea0:	4313      	orrs	r3, r2
 8004ea2:	d011      	beq.n	8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004ea4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004ea8:	3328      	adds	r3, #40	@ 0x28
 8004eaa:	2100      	movs	r1, #0
 8004eac:	4618      	mov	r0, r3
 8004eae:	f000 fbcb 	bl	8005648 <RCCEx_PLL3_Config>
 8004eb2:	4603      	mov	r3, r0
 8004eb4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 8004eb8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d003      	beq.n	8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ec0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004ec4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8004ec8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004ecc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ed0:	2100      	movs	r1, #0
 8004ed2:	60b9      	str	r1, [r7, #8]
 8004ed4:	f003 0310 	and.w	r3, r3, #16
 8004ed8:	60fb      	str	r3, [r7, #12]
 8004eda:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004ede:	460b      	mov	r3, r1
 8004ee0:	4313      	orrs	r3, r2
 8004ee2:	d011      	beq.n	8004f08 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004ee4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004ee8:	3328      	adds	r3, #40	@ 0x28
 8004eea:	2101      	movs	r1, #1
 8004eec:	4618      	mov	r0, r3
 8004eee:	f000 fbab 	bl	8005648 <RCCEx_PLL3_Config>
 8004ef2:	4603      	mov	r3, r0
 8004ef4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8004ef8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d003      	beq.n	8004f08 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f00:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004f04:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8004f08:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f10:	2100      	movs	r1, #0
 8004f12:	6039      	str	r1, [r7, #0]
 8004f14:	f003 0320 	and.w	r3, r3, #32
 8004f18:	607b      	str	r3, [r7, #4]
 8004f1a:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004f1e:	460b      	mov	r3, r1
 8004f20:	4313      	orrs	r3, r2
 8004f22:	d011      	beq.n	8004f48 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004f24:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f28:	3328      	adds	r3, #40	@ 0x28
 8004f2a:	2102      	movs	r1, #2
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	f000 fb8b 	bl	8005648 <RCCEx_PLL3_Config>
 8004f32:	4603      	mov	r3, r0
 8004f34:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8004f38:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d003      	beq.n	8004f48 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f40:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004f44:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 8004f48:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d101      	bne.n	8004f54 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 8004f50:	2300      	movs	r3, #0
 8004f52:	e000      	b.n	8004f56 <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 8004f54:	2301      	movs	r3, #1
}
 8004f56:	4618      	mov	r0, r3
 8004f58:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004f62:	bf00      	nop
 8004f64:	58024400 	.word	0x58024400

08004f68 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004f68:	b580      	push	{r7, lr}
 8004f6a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004f6c:	f7fe fe00 	bl	8003b70 <HAL_RCC_GetHCLKFreq>
 8004f70:	4602      	mov	r2, r0
 8004f72:	4b06      	ldr	r3, [pc, #24]	@ (8004f8c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004f74:	6a1b      	ldr	r3, [r3, #32]
 8004f76:	091b      	lsrs	r3, r3, #4
 8004f78:	f003 0307 	and.w	r3, r3, #7
 8004f7c:	4904      	ldr	r1, [pc, #16]	@ (8004f90 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8004f7e:	5ccb      	ldrb	r3, [r1, r3]
 8004f80:	f003 031f 	and.w	r3, r3, #31
 8004f84:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8004f88:	4618      	mov	r0, r3
 8004f8a:	bd80      	pop	{r7, pc}
 8004f8c:	58024400 	.word	0x58024400
 8004f90:	0800d188 	.word	0x0800d188

08004f94 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8004f94:	b480      	push	{r7}
 8004f96:	b089      	sub	sp, #36	@ 0x24
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004f9c:	4ba1      	ldr	r3, [pc, #644]	@ (8005224 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004f9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fa0:	f003 0303 	and.w	r3, r3, #3
 8004fa4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8004fa6:	4b9f      	ldr	r3, [pc, #636]	@ (8005224 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004fa8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004faa:	0b1b      	lsrs	r3, r3, #12
 8004fac:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004fb0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004fb2:	4b9c      	ldr	r3, [pc, #624]	@ (8005224 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004fb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fb6:	091b      	lsrs	r3, r3, #4
 8004fb8:	f003 0301 	and.w	r3, r3, #1
 8004fbc:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8004fbe:	4b99      	ldr	r3, [pc, #612]	@ (8005224 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004fc0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004fc2:	08db      	lsrs	r3, r3, #3
 8004fc4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004fc8:	693a      	ldr	r2, [r7, #16]
 8004fca:	fb02 f303 	mul.w	r3, r2, r3
 8004fce:	ee07 3a90 	vmov	s15, r3
 8004fd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004fd6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8004fda:	697b      	ldr	r3, [r7, #20]
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	f000 8111 	beq.w	8005204 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8004fe2:	69bb      	ldr	r3, [r7, #24]
 8004fe4:	2b02      	cmp	r3, #2
 8004fe6:	f000 8083 	beq.w	80050f0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8004fea:	69bb      	ldr	r3, [r7, #24]
 8004fec:	2b02      	cmp	r3, #2
 8004fee:	f200 80a1 	bhi.w	8005134 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8004ff2:	69bb      	ldr	r3, [r7, #24]
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d003      	beq.n	8005000 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8004ff8:	69bb      	ldr	r3, [r7, #24]
 8004ffa:	2b01      	cmp	r3, #1
 8004ffc:	d056      	beq.n	80050ac <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8004ffe:	e099      	b.n	8005134 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005000:	4b88      	ldr	r3, [pc, #544]	@ (8005224 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f003 0320 	and.w	r3, r3, #32
 8005008:	2b00      	cmp	r3, #0
 800500a:	d02d      	beq.n	8005068 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800500c:	4b85      	ldr	r3, [pc, #532]	@ (8005224 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	08db      	lsrs	r3, r3, #3
 8005012:	f003 0303 	and.w	r3, r3, #3
 8005016:	4a84      	ldr	r2, [pc, #528]	@ (8005228 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8005018:	fa22 f303 	lsr.w	r3, r2, r3
 800501c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800501e:	68bb      	ldr	r3, [r7, #8]
 8005020:	ee07 3a90 	vmov	s15, r3
 8005024:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005028:	697b      	ldr	r3, [r7, #20]
 800502a:	ee07 3a90 	vmov	s15, r3
 800502e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005032:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005036:	4b7b      	ldr	r3, [pc, #492]	@ (8005224 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005038:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800503a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800503e:	ee07 3a90 	vmov	s15, r3
 8005042:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005046:	ed97 6a03 	vldr	s12, [r7, #12]
 800504a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800522c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800504e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005052:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005056:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800505a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800505e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005062:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8005066:	e087      	b.n	8005178 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005068:	697b      	ldr	r3, [r7, #20]
 800506a:	ee07 3a90 	vmov	s15, r3
 800506e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005072:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8005230 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8005076:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800507a:	4b6a      	ldr	r3, [pc, #424]	@ (8005224 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800507c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800507e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005082:	ee07 3a90 	vmov	s15, r3
 8005086:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800508a:	ed97 6a03 	vldr	s12, [r7, #12]
 800508e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800522c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005092:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005096:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800509a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800509e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80050a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80050a6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80050aa:	e065      	b.n	8005178 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80050ac:	697b      	ldr	r3, [r7, #20]
 80050ae:	ee07 3a90 	vmov	s15, r3
 80050b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050b6:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8005234 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80050ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80050be:	4b59      	ldr	r3, [pc, #356]	@ (8005224 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80050c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050c6:	ee07 3a90 	vmov	s15, r3
 80050ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80050ce:	ed97 6a03 	vldr	s12, [r7, #12]
 80050d2:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800522c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80050d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80050da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80050de:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80050e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80050e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80050ea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80050ee:	e043      	b.n	8005178 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80050f0:	697b      	ldr	r3, [r7, #20]
 80050f2:	ee07 3a90 	vmov	s15, r3
 80050f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050fa:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8005238 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80050fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005102:	4b48      	ldr	r3, [pc, #288]	@ (8005224 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005104:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005106:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800510a:	ee07 3a90 	vmov	s15, r3
 800510e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005112:	ed97 6a03 	vldr	s12, [r7, #12]
 8005116:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800522c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800511a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800511e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005122:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005126:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800512a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800512e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005132:	e021      	b.n	8005178 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005134:	697b      	ldr	r3, [r7, #20]
 8005136:	ee07 3a90 	vmov	s15, r3
 800513a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800513e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8005234 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005142:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005146:	4b37      	ldr	r3, [pc, #220]	@ (8005224 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005148:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800514a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800514e:	ee07 3a90 	vmov	s15, r3
 8005152:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005156:	ed97 6a03 	vldr	s12, [r7, #12]
 800515a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800522c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800515e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005162:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005166:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800516a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800516e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005172:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005176:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8005178:	4b2a      	ldr	r3, [pc, #168]	@ (8005224 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800517a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800517c:	0a5b      	lsrs	r3, r3, #9
 800517e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005182:	ee07 3a90 	vmov	s15, r3
 8005186:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800518a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800518e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005192:	edd7 6a07 	vldr	s13, [r7, #28]
 8005196:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800519a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800519e:	ee17 2a90 	vmov	r2, s15
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80051a6:	4b1f      	ldr	r3, [pc, #124]	@ (8005224 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80051a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051aa:	0c1b      	lsrs	r3, r3, #16
 80051ac:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80051b0:	ee07 3a90 	vmov	s15, r3
 80051b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051b8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80051bc:	ee37 7a87 	vadd.f32	s14, s15, s14
 80051c0:	edd7 6a07 	vldr	s13, [r7, #28]
 80051c4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80051c8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80051cc:	ee17 2a90 	vmov	r2, s15
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80051d4:	4b13      	ldr	r3, [pc, #76]	@ (8005224 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80051d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051d8:	0e1b      	lsrs	r3, r3, #24
 80051da:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80051de:	ee07 3a90 	vmov	s15, r3
 80051e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051e6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80051ea:	ee37 7a87 	vadd.f32	s14, s15, s14
 80051ee:	edd7 6a07 	vldr	s13, [r7, #28]
 80051f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80051f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80051fa:	ee17 2a90 	vmov	r2, s15
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8005202:	e008      	b.n	8005216 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2200      	movs	r2, #0
 8005208:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	2200      	movs	r2, #0
 800520e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2200      	movs	r2, #0
 8005214:	609a      	str	r2, [r3, #8]
}
 8005216:	bf00      	nop
 8005218:	3724      	adds	r7, #36	@ 0x24
 800521a:	46bd      	mov	sp, r7
 800521c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005220:	4770      	bx	lr
 8005222:	bf00      	nop
 8005224:	58024400 	.word	0x58024400
 8005228:	03d09000 	.word	0x03d09000
 800522c:	46000000 	.word	0x46000000
 8005230:	4c742400 	.word	0x4c742400
 8005234:	4a742400 	.word	0x4a742400
 8005238:	4af42400 	.word	0x4af42400

0800523c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800523c:	b480      	push	{r7}
 800523e:	b089      	sub	sp, #36	@ 0x24
 8005240:	af00      	add	r7, sp, #0
 8005242:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005244:	4ba1      	ldr	r3, [pc, #644]	@ (80054cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005246:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005248:	f003 0303 	and.w	r3, r3, #3
 800524c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800524e:	4b9f      	ldr	r3, [pc, #636]	@ (80054cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005250:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005252:	0d1b      	lsrs	r3, r3, #20
 8005254:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005258:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800525a:	4b9c      	ldr	r3, [pc, #624]	@ (80054cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800525c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800525e:	0a1b      	lsrs	r3, r3, #8
 8005260:	f003 0301 	and.w	r3, r3, #1
 8005264:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8005266:	4b99      	ldr	r3, [pc, #612]	@ (80054cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005268:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800526a:	08db      	lsrs	r3, r3, #3
 800526c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005270:	693a      	ldr	r2, [r7, #16]
 8005272:	fb02 f303 	mul.w	r3, r2, r3
 8005276:	ee07 3a90 	vmov	s15, r3
 800527a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800527e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8005282:	697b      	ldr	r3, [r7, #20]
 8005284:	2b00      	cmp	r3, #0
 8005286:	f000 8111 	beq.w	80054ac <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800528a:	69bb      	ldr	r3, [r7, #24]
 800528c:	2b02      	cmp	r3, #2
 800528e:	f000 8083 	beq.w	8005398 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8005292:	69bb      	ldr	r3, [r7, #24]
 8005294:	2b02      	cmp	r3, #2
 8005296:	f200 80a1 	bhi.w	80053dc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800529a:	69bb      	ldr	r3, [r7, #24]
 800529c:	2b00      	cmp	r3, #0
 800529e:	d003      	beq.n	80052a8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80052a0:	69bb      	ldr	r3, [r7, #24]
 80052a2:	2b01      	cmp	r3, #1
 80052a4:	d056      	beq.n	8005354 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80052a6:	e099      	b.n	80053dc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80052a8:	4b88      	ldr	r3, [pc, #544]	@ (80054cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	f003 0320 	and.w	r3, r3, #32
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d02d      	beq.n	8005310 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80052b4:	4b85      	ldr	r3, [pc, #532]	@ (80054cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	08db      	lsrs	r3, r3, #3
 80052ba:	f003 0303 	and.w	r3, r3, #3
 80052be:	4a84      	ldr	r2, [pc, #528]	@ (80054d0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80052c0:	fa22 f303 	lsr.w	r3, r2, r3
 80052c4:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80052c6:	68bb      	ldr	r3, [r7, #8]
 80052c8:	ee07 3a90 	vmov	s15, r3
 80052cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80052d0:	697b      	ldr	r3, [r7, #20]
 80052d2:	ee07 3a90 	vmov	s15, r3
 80052d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80052da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80052de:	4b7b      	ldr	r3, [pc, #492]	@ (80054cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80052e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80052e6:	ee07 3a90 	vmov	s15, r3
 80052ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80052ee:	ed97 6a03 	vldr	s12, [r7, #12]
 80052f2:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80054d4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80052f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80052fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80052fe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005302:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005306:	ee67 7a27 	vmul.f32	s15, s14, s15
 800530a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800530e:	e087      	b.n	8005420 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005310:	697b      	ldr	r3, [r7, #20]
 8005312:	ee07 3a90 	vmov	s15, r3
 8005316:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800531a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80054d8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800531e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005322:	4b6a      	ldr	r3, [pc, #424]	@ (80054cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005324:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005326:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800532a:	ee07 3a90 	vmov	s15, r3
 800532e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005332:	ed97 6a03 	vldr	s12, [r7, #12]
 8005336:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80054d4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800533a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800533e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005342:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005346:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800534a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800534e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005352:	e065      	b.n	8005420 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005354:	697b      	ldr	r3, [r7, #20]
 8005356:	ee07 3a90 	vmov	s15, r3
 800535a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800535e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80054dc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005362:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005366:	4b59      	ldr	r3, [pc, #356]	@ (80054cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005368:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800536a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800536e:	ee07 3a90 	vmov	s15, r3
 8005372:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005376:	ed97 6a03 	vldr	s12, [r7, #12]
 800537a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80054d4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800537e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005382:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005386:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800538a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800538e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005392:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005396:	e043      	b.n	8005420 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005398:	697b      	ldr	r3, [r7, #20]
 800539a:	ee07 3a90 	vmov	s15, r3
 800539e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053a2:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80054e0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80053a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80053aa:	4b48      	ldr	r3, [pc, #288]	@ (80054cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80053ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80053b2:	ee07 3a90 	vmov	s15, r3
 80053b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80053ba:	ed97 6a03 	vldr	s12, [r7, #12]
 80053be:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80054d4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80053c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80053c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80053ca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80053ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80053d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80053d6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80053da:	e021      	b.n	8005420 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80053dc:	697b      	ldr	r3, [r7, #20]
 80053de:	ee07 3a90 	vmov	s15, r3
 80053e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053e6:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80054dc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80053ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80053ee:	4b37      	ldr	r3, [pc, #220]	@ (80054cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80053f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80053f6:	ee07 3a90 	vmov	s15, r3
 80053fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80053fe:	ed97 6a03 	vldr	s12, [r7, #12]
 8005402:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80054d4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005406:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800540a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800540e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005412:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005416:	ee67 7a27 	vmul.f32	s15, s14, s15
 800541a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800541e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8005420:	4b2a      	ldr	r3, [pc, #168]	@ (80054cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005422:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005424:	0a5b      	lsrs	r3, r3, #9
 8005426:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800542a:	ee07 3a90 	vmov	s15, r3
 800542e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005432:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005436:	ee37 7a87 	vadd.f32	s14, s15, s14
 800543a:	edd7 6a07 	vldr	s13, [r7, #28]
 800543e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005442:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005446:	ee17 2a90 	vmov	r2, s15
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800544e:	4b1f      	ldr	r3, [pc, #124]	@ (80054cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005450:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005452:	0c1b      	lsrs	r3, r3, #16
 8005454:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005458:	ee07 3a90 	vmov	s15, r3
 800545c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005460:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005464:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005468:	edd7 6a07 	vldr	s13, [r7, #28]
 800546c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005470:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005474:	ee17 2a90 	vmov	r2, s15
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800547c:	4b13      	ldr	r3, [pc, #76]	@ (80054cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800547e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005480:	0e1b      	lsrs	r3, r3, #24
 8005482:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005486:	ee07 3a90 	vmov	s15, r3
 800548a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800548e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005492:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005496:	edd7 6a07 	vldr	s13, [r7, #28]
 800549a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800549e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80054a2:	ee17 2a90 	vmov	r2, s15
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80054aa:	e008      	b.n	80054be <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2200      	movs	r2, #0
 80054b0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	2200      	movs	r2, #0
 80054b6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	2200      	movs	r2, #0
 80054bc:	609a      	str	r2, [r3, #8]
}
 80054be:	bf00      	nop
 80054c0:	3724      	adds	r7, #36	@ 0x24
 80054c2:	46bd      	mov	sp, r7
 80054c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c8:	4770      	bx	lr
 80054ca:	bf00      	nop
 80054cc:	58024400 	.word	0x58024400
 80054d0:	03d09000 	.word	0x03d09000
 80054d4:	46000000 	.word	0x46000000
 80054d8:	4c742400 	.word	0x4c742400
 80054dc:	4a742400 	.word	0x4a742400
 80054e0:	4af42400 	.word	0x4af42400

080054e4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80054e4:	b580      	push	{r7, lr}
 80054e6:	b084      	sub	sp, #16
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	6078      	str	r0, [r7, #4]
 80054ec:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80054ee:	2300      	movs	r3, #0
 80054f0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80054f2:	4b53      	ldr	r3, [pc, #332]	@ (8005640 <RCCEx_PLL2_Config+0x15c>)
 80054f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054f6:	f003 0303 	and.w	r3, r3, #3
 80054fa:	2b03      	cmp	r3, #3
 80054fc:	d101      	bne.n	8005502 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80054fe:	2301      	movs	r3, #1
 8005500:	e099      	b.n	8005636 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8005502:	4b4f      	ldr	r3, [pc, #316]	@ (8005640 <RCCEx_PLL2_Config+0x15c>)
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	4a4e      	ldr	r2, [pc, #312]	@ (8005640 <RCCEx_PLL2_Config+0x15c>)
 8005508:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800550c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800550e:	f7fc fcf1 	bl	8001ef4 <HAL_GetTick>
 8005512:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005514:	e008      	b.n	8005528 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005516:	f7fc fced 	bl	8001ef4 <HAL_GetTick>
 800551a:	4602      	mov	r2, r0
 800551c:	68bb      	ldr	r3, [r7, #8]
 800551e:	1ad3      	subs	r3, r2, r3
 8005520:	2b02      	cmp	r3, #2
 8005522:	d901      	bls.n	8005528 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005524:	2303      	movs	r3, #3
 8005526:	e086      	b.n	8005636 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005528:	4b45      	ldr	r3, [pc, #276]	@ (8005640 <RCCEx_PLL2_Config+0x15c>)
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005530:	2b00      	cmp	r3, #0
 8005532:	d1f0      	bne.n	8005516 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8005534:	4b42      	ldr	r3, [pc, #264]	@ (8005640 <RCCEx_PLL2_Config+0x15c>)
 8005536:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005538:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	031b      	lsls	r3, r3, #12
 8005542:	493f      	ldr	r1, [pc, #252]	@ (8005640 <RCCEx_PLL2_Config+0x15c>)
 8005544:	4313      	orrs	r3, r2
 8005546:	628b      	str	r3, [r1, #40]	@ 0x28
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	685b      	ldr	r3, [r3, #4]
 800554c:	3b01      	subs	r3, #1
 800554e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	689b      	ldr	r3, [r3, #8]
 8005556:	3b01      	subs	r3, #1
 8005558:	025b      	lsls	r3, r3, #9
 800555a:	b29b      	uxth	r3, r3
 800555c:	431a      	orrs	r2, r3
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	68db      	ldr	r3, [r3, #12]
 8005562:	3b01      	subs	r3, #1
 8005564:	041b      	lsls	r3, r3, #16
 8005566:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800556a:	431a      	orrs	r2, r3
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	691b      	ldr	r3, [r3, #16]
 8005570:	3b01      	subs	r3, #1
 8005572:	061b      	lsls	r3, r3, #24
 8005574:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005578:	4931      	ldr	r1, [pc, #196]	@ (8005640 <RCCEx_PLL2_Config+0x15c>)
 800557a:	4313      	orrs	r3, r2
 800557c:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800557e:	4b30      	ldr	r3, [pc, #192]	@ (8005640 <RCCEx_PLL2_Config+0x15c>)
 8005580:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005582:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	695b      	ldr	r3, [r3, #20]
 800558a:	492d      	ldr	r1, [pc, #180]	@ (8005640 <RCCEx_PLL2_Config+0x15c>)
 800558c:	4313      	orrs	r3, r2
 800558e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8005590:	4b2b      	ldr	r3, [pc, #172]	@ (8005640 <RCCEx_PLL2_Config+0x15c>)
 8005592:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005594:	f023 0220 	bic.w	r2, r3, #32
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	699b      	ldr	r3, [r3, #24]
 800559c:	4928      	ldr	r1, [pc, #160]	@ (8005640 <RCCEx_PLL2_Config+0x15c>)
 800559e:	4313      	orrs	r3, r2
 80055a0:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80055a2:	4b27      	ldr	r3, [pc, #156]	@ (8005640 <RCCEx_PLL2_Config+0x15c>)
 80055a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055a6:	4a26      	ldr	r2, [pc, #152]	@ (8005640 <RCCEx_PLL2_Config+0x15c>)
 80055a8:	f023 0310 	bic.w	r3, r3, #16
 80055ac:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80055ae:	4b24      	ldr	r3, [pc, #144]	@ (8005640 <RCCEx_PLL2_Config+0x15c>)
 80055b0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80055b2:	4b24      	ldr	r3, [pc, #144]	@ (8005644 <RCCEx_PLL2_Config+0x160>)
 80055b4:	4013      	ands	r3, r2
 80055b6:	687a      	ldr	r2, [r7, #4]
 80055b8:	69d2      	ldr	r2, [r2, #28]
 80055ba:	00d2      	lsls	r2, r2, #3
 80055bc:	4920      	ldr	r1, [pc, #128]	@ (8005640 <RCCEx_PLL2_Config+0x15c>)
 80055be:	4313      	orrs	r3, r2
 80055c0:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80055c2:	4b1f      	ldr	r3, [pc, #124]	@ (8005640 <RCCEx_PLL2_Config+0x15c>)
 80055c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055c6:	4a1e      	ldr	r2, [pc, #120]	@ (8005640 <RCCEx_PLL2_Config+0x15c>)
 80055c8:	f043 0310 	orr.w	r3, r3, #16
 80055cc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80055ce:	683b      	ldr	r3, [r7, #0]
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d106      	bne.n	80055e2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80055d4:	4b1a      	ldr	r3, [pc, #104]	@ (8005640 <RCCEx_PLL2_Config+0x15c>)
 80055d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055d8:	4a19      	ldr	r2, [pc, #100]	@ (8005640 <RCCEx_PLL2_Config+0x15c>)
 80055da:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80055de:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80055e0:	e00f      	b.n	8005602 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80055e2:	683b      	ldr	r3, [r7, #0]
 80055e4:	2b01      	cmp	r3, #1
 80055e6:	d106      	bne.n	80055f6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80055e8:	4b15      	ldr	r3, [pc, #84]	@ (8005640 <RCCEx_PLL2_Config+0x15c>)
 80055ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055ec:	4a14      	ldr	r2, [pc, #80]	@ (8005640 <RCCEx_PLL2_Config+0x15c>)
 80055ee:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80055f2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80055f4:	e005      	b.n	8005602 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80055f6:	4b12      	ldr	r3, [pc, #72]	@ (8005640 <RCCEx_PLL2_Config+0x15c>)
 80055f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055fa:	4a11      	ldr	r2, [pc, #68]	@ (8005640 <RCCEx_PLL2_Config+0x15c>)
 80055fc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005600:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8005602:	4b0f      	ldr	r3, [pc, #60]	@ (8005640 <RCCEx_PLL2_Config+0x15c>)
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	4a0e      	ldr	r2, [pc, #56]	@ (8005640 <RCCEx_PLL2_Config+0x15c>)
 8005608:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800560c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800560e:	f7fc fc71 	bl	8001ef4 <HAL_GetTick>
 8005612:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005614:	e008      	b.n	8005628 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005616:	f7fc fc6d 	bl	8001ef4 <HAL_GetTick>
 800561a:	4602      	mov	r2, r0
 800561c:	68bb      	ldr	r3, [r7, #8]
 800561e:	1ad3      	subs	r3, r2, r3
 8005620:	2b02      	cmp	r3, #2
 8005622:	d901      	bls.n	8005628 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005624:	2303      	movs	r3, #3
 8005626:	e006      	b.n	8005636 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005628:	4b05      	ldr	r3, [pc, #20]	@ (8005640 <RCCEx_PLL2_Config+0x15c>)
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005630:	2b00      	cmp	r3, #0
 8005632:	d0f0      	beq.n	8005616 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8005634:	7bfb      	ldrb	r3, [r7, #15]
}
 8005636:	4618      	mov	r0, r3
 8005638:	3710      	adds	r7, #16
 800563a:	46bd      	mov	sp, r7
 800563c:	bd80      	pop	{r7, pc}
 800563e:	bf00      	nop
 8005640:	58024400 	.word	0x58024400
 8005644:	ffff0007 	.word	0xffff0007

08005648 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8005648:	b580      	push	{r7, lr}
 800564a:	b084      	sub	sp, #16
 800564c:	af00      	add	r7, sp, #0
 800564e:	6078      	str	r0, [r7, #4]
 8005650:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005652:	2300      	movs	r3, #0
 8005654:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005656:	4b53      	ldr	r3, [pc, #332]	@ (80057a4 <RCCEx_PLL3_Config+0x15c>)
 8005658:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800565a:	f003 0303 	and.w	r3, r3, #3
 800565e:	2b03      	cmp	r3, #3
 8005660:	d101      	bne.n	8005666 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8005662:	2301      	movs	r3, #1
 8005664:	e099      	b.n	800579a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8005666:	4b4f      	ldr	r3, [pc, #316]	@ (80057a4 <RCCEx_PLL3_Config+0x15c>)
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	4a4e      	ldr	r2, [pc, #312]	@ (80057a4 <RCCEx_PLL3_Config+0x15c>)
 800566c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005670:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005672:	f7fc fc3f 	bl	8001ef4 <HAL_GetTick>
 8005676:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005678:	e008      	b.n	800568c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800567a:	f7fc fc3b 	bl	8001ef4 <HAL_GetTick>
 800567e:	4602      	mov	r2, r0
 8005680:	68bb      	ldr	r3, [r7, #8]
 8005682:	1ad3      	subs	r3, r2, r3
 8005684:	2b02      	cmp	r3, #2
 8005686:	d901      	bls.n	800568c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005688:	2303      	movs	r3, #3
 800568a:	e086      	b.n	800579a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800568c:	4b45      	ldr	r3, [pc, #276]	@ (80057a4 <RCCEx_PLL3_Config+0x15c>)
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005694:	2b00      	cmp	r3, #0
 8005696:	d1f0      	bne.n	800567a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8005698:	4b42      	ldr	r3, [pc, #264]	@ (80057a4 <RCCEx_PLL3_Config+0x15c>)
 800569a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800569c:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	051b      	lsls	r3, r3, #20
 80056a6:	493f      	ldr	r1, [pc, #252]	@ (80057a4 <RCCEx_PLL3_Config+0x15c>)
 80056a8:	4313      	orrs	r3, r2
 80056aa:	628b      	str	r3, [r1, #40]	@ 0x28
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	685b      	ldr	r3, [r3, #4]
 80056b0:	3b01      	subs	r3, #1
 80056b2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	689b      	ldr	r3, [r3, #8]
 80056ba:	3b01      	subs	r3, #1
 80056bc:	025b      	lsls	r3, r3, #9
 80056be:	b29b      	uxth	r3, r3
 80056c0:	431a      	orrs	r2, r3
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	68db      	ldr	r3, [r3, #12]
 80056c6:	3b01      	subs	r3, #1
 80056c8:	041b      	lsls	r3, r3, #16
 80056ca:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80056ce:	431a      	orrs	r2, r3
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	691b      	ldr	r3, [r3, #16]
 80056d4:	3b01      	subs	r3, #1
 80056d6:	061b      	lsls	r3, r3, #24
 80056d8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80056dc:	4931      	ldr	r1, [pc, #196]	@ (80057a4 <RCCEx_PLL3_Config+0x15c>)
 80056de:	4313      	orrs	r3, r2
 80056e0:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80056e2:	4b30      	ldr	r3, [pc, #192]	@ (80057a4 <RCCEx_PLL3_Config+0x15c>)
 80056e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056e6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	695b      	ldr	r3, [r3, #20]
 80056ee:	492d      	ldr	r1, [pc, #180]	@ (80057a4 <RCCEx_PLL3_Config+0x15c>)
 80056f0:	4313      	orrs	r3, r2
 80056f2:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80056f4:	4b2b      	ldr	r3, [pc, #172]	@ (80057a4 <RCCEx_PLL3_Config+0x15c>)
 80056f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056f8:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	699b      	ldr	r3, [r3, #24]
 8005700:	4928      	ldr	r1, [pc, #160]	@ (80057a4 <RCCEx_PLL3_Config+0x15c>)
 8005702:	4313      	orrs	r3, r2
 8005704:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8005706:	4b27      	ldr	r3, [pc, #156]	@ (80057a4 <RCCEx_PLL3_Config+0x15c>)
 8005708:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800570a:	4a26      	ldr	r2, [pc, #152]	@ (80057a4 <RCCEx_PLL3_Config+0x15c>)
 800570c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005710:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8005712:	4b24      	ldr	r3, [pc, #144]	@ (80057a4 <RCCEx_PLL3_Config+0x15c>)
 8005714:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005716:	4b24      	ldr	r3, [pc, #144]	@ (80057a8 <RCCEx_PLL3_Config+0x160>)
 8005718:	4013      	ands	r3, r2
 800571a:	687a      	ldr	r2, [r7, #4]
 800571c:	69d2      	ldr	r2, [r2, #28]
 800571e:	00d2      	lsls	r2, r2, #3
 8005720:	4920      	ldr	r1, [pc, #128]	@ (80057a4 <RCCEx_PLL3_Config+0x15c>)
 8005722:	4313      	orrs	r3, r2
 8005724:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8005726:	4b1f      	ldr	r3, [pc, #124]	@ (80057a4 <RCCEx_PLL3_Config+0x15c>)
 8005728:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800572a:	4a1e      	ldr	r2, [pc, #120]	@ (80057a4 <RCCEx_PLL3_Config+0x15c>)
 800572c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005730:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8005732:	683b      	ldr	r3, [r7, #0]
 8005734:	2b00      	cmp	r3, #0
 8005736:	d106      	bne.n	8005746 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8005738:	4b1a      	ldr	r3, [pc, #104]	@ (80057a4 <RCCEx_PLL3_Config+0x15c>)
 800573a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800573c:	4a19      	ldr	r2, [pc, #100]	@ (80057a4 <RCCEx_PLL3_Config+0x15c>)
 800573e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8005742:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005744:	e00f      	b.n	8005766 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8005746:	683b      	ldr	r3, [r7, #0]
 8005748:	2b01      	cmp	r3, #1
 800574a:	d106      	bne.n	800575a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800574c:	4b15      	ldr	r3, [pc, #84]	@ (80057a4 <RCCEx_PLL3_Config+0x15c>)
 800574e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005750:	4a14      	ldr	r2, [pc, #80]	@ (80057a4 <RCCEx_PLL3_Config+0x15c>)
 8005752:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005756:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005758:	e005      	b.n	8005766 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800575a:	4b12      	ldr	r3, [pc, #72]	@ (80057a4 <RCCEx_PLL3_Config+0x15c>)
 800575c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800575e:	4a11      	ldr	r2, [pc, #68]	@ (80057a4 <RCCEx_PLL3_Config+0x15c>)
 8005760:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005764:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8005766:	4b0f      	ldr	r3, [pc, #60]	@ (80057a4 <RCCEx_PLL3_Config+0x15c>)
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	4a0e      	ldr	r2, [pc, #56]	@ (80057a4 <RCCEx_PLL3_Config+0x15c>)
 800576c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005770:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005772:	f7fc fbbf 	bl	8001ef4 <HAL_GetTick>
 8005776:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005778:	e008      	b.n	800578c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800577a:	f7fc fbbb 	bl	8001ef4 <HAL_GetTick>
 800577e:	4602      	mov	r2, r0
 8005780:	68bb      	ldr	r3, [r7, #8]
 8005782:	1ad3      	subs	r3, r2, r3
 8005784:	2b02      	cmp	r3, #2
 8005786:	d901      	bls.n	800578c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005788:	2303      	movs	r3, #3
 800578a:	e006      	b.n	800579a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800578c:	4b05      	ldr	r3, [pc, #20]	@ (80057a4 <RCCEx_PLL3_Config+0x15c>)
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005794:	2b00      	cmp	r3, #0
 8005796:	d0f0      	beq.n	800577a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8005798:	7bfb      	ldrb	r3, [r7, #15]
}
 800579a:	4618      	mov	r0, r3
 800579c:	3710      	adds	r7, #16
 800579e:	46bd      	mov	sp, r7
 80057a0:	bd80      	pop	{r7, pc}
 80057a2:	bf00      	nop
 80057a4:	58024400 	.word	0x58024400
 80057a8:	ffff0007 	.word	0xffff0007

080057ac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80057ac:	b580      	push	{r7, lr}
 80057ae:	b082      	sub	sp, #8
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d101      	bne.n	80057be <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80057ba:	2301      	movs	r3, #1
 80057bc:	e049      	b.n	8005852 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80057c4:	b2db      	uxtb	r3, r3
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d106      	bne.n	80057d8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	2200      	movs	r2, #0
 80057ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80057d2:	6878      	ldr	r0, [r7, #4]
 80057d4:	f7fb ff4c 	bl	8001670 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	2202      	movs	r2, #2
 80057dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681a      	ldr	r2, [r3, #0]
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	3304      	adds	r3, #4
 80057e8:	4619      	mov	r1, r3
 80057ea:	4610      	mov	r0, r2
 80057ec:	f000 fbbe 	bl	8005f6c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2201      	movs	r2, #1
 80057f4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	2201      	movs	r2, #1
 80057fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2201      	movs	r2, #1
 8005804:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2201      	movs	r2, #1
 800580c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2201      	movs	r2, #1
 8005814:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	2201      	movs	r2, #1
 800581c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	2201      	movs	r2, #1
 8005824:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	2201      	movs	r2, #1
 800582c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	2201      	movs	r2, #1
 8005834:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	2201      	movs	r2, #1
 800583c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	2201      	movs	r2, #1
 8005844:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2201      	movs	r2, #1
 800584c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005850:	2300      	movs	r3, #0
}
 8005852:	4618      	mov	r0, r3
 8005854:	3708      	adds	r7, #8
 8005856:	46bd      	mov	sp, r7
 8005858:	bd80      	pop	{r7, pc}

0800585a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800585a:	b580      	push	{r7, lr}
 800585c:	b082      	sub	sp, #8
 800585e:	af00      	add	r7, sp, #0
 8005860:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	2b00      	cmp	r3, #0
 8005866:	d101      	bne.n	800586c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005868:	2301      	movs	r3, #1
 800586a:	e049      	b.n	8005900 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005872:	b2db      	uxtb	r3, r3
 8005874:	2b00      	cmp	r3, #0
 8005876:	d106      	bne.n	8005886 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	2200      	movs	r2, #0
 800587c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005880:	6878      	ldr	r0, [r7, #4]
 8005882:	f000 f841 	bl	8005908 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	2202      	movs	r2, #2
 800588a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681a      	ldr	r2, [r3, #0]
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	3304      	adds	r3, #4
 8005896:	4619      	mov	r1, r3
 8005898:	4610      	mov	r0, r2
 800589a:	f000 fb67 	bl	8005f6c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	2201      	movs	r2, #1
 80058a2:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	2201      	movs	r2, #1
 80058aa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	2201      	movs	r2, #1
 80058b2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	2201      	movs	r2, #1
 80058ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	2201      	movs	r2, #1
 80058c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	2201      	movs	r2, #1
 80058ca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	2201      	movs	r2, #1
 80058d2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	2201      	movs	r2, #1
 80058da:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	2201      	movs	r2, #1
 80058e2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	2201      	movs	r2, #1
 80058ea:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	2201      	movs	r2, #1
 80058f2:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	2201      	movs	r2, #1
 80058fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80058fe:	2300      	movs	r3, #0
}
 8005900:	4618      	mov	r0, r3
 8005902:	3708      	adds	r7, #8
 8005904:	46bd      	mov	sp, r7
 8005906:	bd80      	pop	{r7, pc}

08005908 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005908:	b480      	push	{r7}
 800590a:	b083      	sub	sp, #12
 800590c:	af00      	add	r7, sp, #0
 800590e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005910:	bf00      	nop
 8005912:	370c      	adds	r7, #12
 8005914:	46bd      	mov	sp, r7
 8005916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591a:	4770      	bx	lr

0800591c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800591c:	b580      	push	{r7, lr}
 800591e:	b084      	sub	sp, #16
 8005920:	af00      	add	r7, sp, #0
 8005922:	6078      	str	r0, [r7, #4]
 8005924:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005926:	683b      	ldr	r3, [r7, #0]
 8005928:	2b00      	cmp	r3, #0
 800592a:	d109      	bne.n	8005940 <HAL_TIM_PWM_Start+0x24>
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005932:	b2db      	uxtb	r3, r3
 8005934:	2b01      	cmp	r3, #1
 8005936:	bf14      	ite	ne
 8005938:	2301      	movne	r3, #1
 800593a:	2300      	moveq	r3, #0
 800593c:	b2db      	uxtb	r3, r3
 800593e:	e03c      	b.n	80059ba <HAL_TIM_PWM_Start+0x9e>
 8005940:	683b      	ldr	r3, [r7, #0]
 8005942:	2b04      	cmp	r3, #4
 8005944:	d109      	bne.n	800595a <HAL_TIM_PWM_Start+0x3e>
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800594c:	b2db      	uxtb	r3, r3
 800594e:	2b01      	cmp	r3, #1
 8005950:	bf14      	ite	ne
 8005952:	2301      	movne	r3, #1
 8005954:	2300      	moveq	r3, #0
 8005956:	b2db      	uxtb	r3, r3
 8005958:	e02f      	b.n	80059ba <HAL_TIM_PWM_Start+0x9e>
 800595a:	683b      	ldr	r3, [r7, #0]
 800595c:	2b08      	cmp	r3, #8
 800595e:	d109      	bne.n	8005974 <HAL_TIM_PWM_Start+0x58>
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005966:	b2db      	uxtb	r3, r3
 8005968:	2b01      	cmp	r3, #1
 800596a:	bf14      	ite	ne
 800596c:	2301      	movne	r3, #1
 800596e:	2300      	moveq	r3, #0
 8005970:	b2db      	uxtb	r3, r3
 8005972:	e022      	b.n	80059ba <HAL_TIM_PWM_Start+0x9e>
 8005974:	683b      	ldr	r3, [r7, #0]
 8005976:	2b0c      	cmp	r3, #12
 8005978:	d109      	bne.n	800598e <HAL_TIM_PWM_Start+0x72>
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005980:	b2db      	uxtb	r3, r3
 8005982:	2b01      	cmp	r3, #1
 8005984:	bf14      	ite	ne
 8005986:	2301      	movne	r3, #1
 8005988:	2300      	moveq	r3, #0
 800598a:	b2db      	uxtb	r3, r3
 800598c:	e015      	b.n	80059ba <HAL_TIM_PWM_Start+0x9e>
 800598e:	683b      	ldr	r3, [r7, #0]
 8005990:	2b10      	cmp	r3, #16
 8005992:	d109      	bne.n	80059a8 <HAL_TIM_PWM_Start+0x8c>
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800599a:	b2db      	uxtb	r3, r3
 800599c:	2b01      	cmp	r3, #1
 800599e:	bf14      	ite	ne
 80059a0:	2301      	movne	r3, #1
 80059a2:	2300      	moveq	r3, #0
 80059a4:	b2db      	uxtb	r3, r3
 80059a6:	e008      	b.n	80059ba <HAL_TIM_PWM_Start+0x9e>
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80059ae:	b2db      	uxtb	r3, r3
 80059b0:	2b01      	cmp	r3, #1
 80059b2:	bf14      	ite	ne
 80059b4:	2301      	movne	r3, #1
 80059b6:	2300      	moveq	r3, #0
 80059b8:	b2db      	uxtb	r3, r3
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d001      	beq.n	80059c2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80059be:	2301      	movs	r3, #1
 80059c0:	e0ab      	b.n	8005b1a <HAL_TIM_PWM_Start+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80059c2:	683b      	ldr	r3, [r7, #0]
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d104      	bne.n	80059d2 <HAL_TIM_PWM_Start+0xb6>
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	2202      	movs	r2, #2
 80059cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80059d0:	e023      	b.n	8005a1a <HAL_TIM_PWM_Start+0xfe>
 80059d2:	683b      	ldr	r3, [r7, #0]
 80059d4:	2b04      	cmp	r3, #4
 80059d6:	d104      	bne.n	80059e2 <HAL_TIM_PWM_Start+0xc6>
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	2202      	movs	r2, #2
 80059dc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80059e0:	e01b      	b.n	8005a1a <HAL_TIM_PWM_Start+0xfe>
 80059e2:	683b      	ldr	r3, [r7, #0]
 80059e4:	2b08      	cmp	r3, #8
 80059e6:	d104      	bne.n	80059f2 <HAL_TIM_PWM_Start+0xd6>
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	2202      	movs	r2, #2
 80059ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80059f0:	e013      	b.n	8005a1a <HAL_TIM_PWM_Start+0xfe>
 80059f2:	683b      	ldr	r3, [r7, #0]
 80059f4:	2b0c      	cmp	r3, #12
 80059f6:	d104      	bne.n	8005a02 <HAL_TIM_PWM_Start+0xe6>
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	2202      	movs	r2, #2
 80059fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005a00:	e00b      	b.n	8005a1a <HAL_TIM_PWM_Start+0xfe>
 8005a02:	683b      	ldr	r3, [r7, #0]
 8005a04:	2b10      	cmp	r3, #16
 8005a06:	d104      	bne.n	8005a12 <HAL_TIM_PWM_Start+0xf6>
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	2202      	movs	r2, #2
 8005a0c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005a10:	e003      	b.n	8005a1a <HAL_TIM_PWM_Start+0xfe>
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	2202      	movs	r2, #2
 8005a16:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	2201      	movs	r2, #1
 8005a20:	6839      	ldr	r1, [r7, #0]
 8005a22:	4618      	mov	r0, r3
 8005a24:	f000 fec8 	bl	80067b8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	4a3d      	ldr	r2, [pc, #244]	@ (8005b24 <HAL_TIM_PWM_Start+0x208>)
 8005a2e:	4293      	cmp	r3, r2
 8005a30:	d013      	beq.n	8005a5a <HAL_TIM_PWM_Start+0x13e>
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	4a3c      	ldr	r2, [pc, #240]	@ (8005b28 <HAL_TIM_PWM_Start+0x20c>)
 8005a38:	4293      	cmp	r3, r2
 8005a3a:	d00e      	beq.n	8005a5a <HAL_TIM_PWM_Start+0x13e>
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	4a3a      	ldr	r2, [pc, #232]	@ (8005b2c <HAL_TIM_PWM_Start+0x210>)
 8005a42:	4293      	cmp	r3, r2
 8005a44:	d009      	beq.n	8005a5a <HAL_TIM_PWM_Start+0x13e>
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	4a39      	ldr	r2, [pc, #228]	@ (8005b30 <HAL_TIM_PWM_Start+0x214>)
 8005a4c:	4293      	cmp	r3, r2
 8005a4e:	d004      	beq.n	8005a5a <HAL_TIM_PWM_Start+0x13e>
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	4a37      	ldr	r2, [pc, #220]	@ (8005b34 <HAL_TIM_PWM_Start+0x218>)
 8005a56:	4293      	cmp	r3, r2
 8005a58:	d101      	bne.n	8005a5e <HAL_TIM_PWM_Start+0x142>
 8005a5a:	2301      	movs	r3, #1
 8005a5c:	e000      	b.n	8005a60 <HAL_TIM_PWM_Start+0x144>
 8005a5e:	2300      	movs	r3, #0
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d007      	beq.n	8005a74 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005a72:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	4a2a      	ldr	r2, [pc, #168]	@ (8005b24 <HAL_TIM_PWM_Start+0x208>)
 8005a7a:	4293      	cmp	r3, r2
 8005a7c:	d02c      	beq.n	8005ad8 <HAL_TIM_PWM_Start+0x1bc>
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005a86:	d027      	beq.n	8005ad8 <HAL_TIM_PWM_Start+0x1bc>
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	4a2a      	ldr	r2, [pc, #168]	@ (8005b38 <HAL_TIM_PWM_Start+0x21c>)
 8005a8e:	4293      	cmp	r3, r2
 8005a90:	d022      	beq.n	8005ad8 <HAL_TIM_PWM_Start+0x1bc>
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	4a29      	ldr	r2, [pc, #164]	@ (8005b3c <HAL_TIM_PWM_Start+0x220>)
 8005a98:	4293      	cmp	r3, r2
 8005a9a:	d01d      	beq.n	8005ad8 <HAL_TIM_PWM_Start+0x1bc>
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	4a27      	ldr	r2, [pc, #156]	@ (8005b40 <HAL_TIM_PWM_Start+0x224>)
 8005aa2:	4293      	cmp	r3, r2
 8005aa4:	d018      	beq.n	8005ad8 <HAL_TIM_PWM_Start+0x1bc>
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	4a1f      	ldr	r2, [pc, #124]	@ (8005b28 <HAL_TIM_PWM_Start+0x20c>)
 8005aac:	4293      	cmp	r3, r2
 8005aae:	d013      	beq.n	8005ad8 <HAL_TIM_PWM_Start+0x1bc>
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	4a23      	ldr	r2, [pc, #140]	@ (8005b44 <HAL_TIM_PWM_Start+0x228>)
 8005ab6:	4293      	cmp	r3, r2
 8005ab8:	d00e      	beq.n	8005ad8 <HAL_TIM_PWM_Start+0x1bc>
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	4a1b      	ldr	r2, [pc, #108]	@ (8005b2c <HAL_TIM_PWM_Start+0x210>)
 8005ac0:	4293      	cmp	r3, r2
 8005ac2:	d009      	beq.n	8005ad8 <HAL_TIM_PWM_Start+0x1bc>
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	4a1f      	ldr	r2, [pc, #124]	@ (8005b48 <HAL_TIM_PWM_Start+0x22c>)
 8005aca:	4293      	cmp	r3, r2
 8005acc:	d004      	beq.n	8005ad8 <HAL_TIM_PWM_Start+0x1bc>
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	4a1e      	ldr	r2, [pc, #120]	@ (8005b4c <HAL_TIM_PWM_Start+0x230>)
 8005ad4:	4293      	cmp	r3, r2
 8005ad6:	d115      	bne.n	8005b04 <HAL_TIM_PWM_Start+0x1e8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	689a      	ldr	r2, [r3, #8]
 8005ade:	4b1c      	ldr	r3, [pc, #112]	@ (8005b50 <HAL_TIM_PWM_Start+0x234>)
 8005ae0:	4013      	ands	r3, r2
 8005ae2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	2b06      	cmp	r3, #6
 8005ae8:	d015      	beq.n	8005b16 <HAL_TIM_PWM_Start+0x1fa>
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005af0:	d011      	beq.n	8005b16 <HAL_TIM_PWM_Start+0x1fa>
    {
      __HAL_TIM_ENABLE(htim);
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	681a      	ldr	r2, [r3, #0]
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	f042 0201 	orr.w	r2, r2, #1
 8005b00:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b02:	e008      	b.n	8005b16 <HAL_TIM_PWM_Start+0x1fa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	681a      	ldr	r2, [r3, #0]
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	f042 0201 	orr.w	r2, r2, #1
 8005b12:	601a      	str	r2, [r3, #0]
 8005b14:	e000      	b.n	8005b18 <HAL_TIM_PWM_Start+0x1fc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b16:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005b18:	2300      	movs	r3, #0
}
 8005b1a:	4618      	mov	r0, r3
 8005b1c:	3710      	adds	r7, #16
 8005b1e:	46bd      	mov	sp, r7
 8005b20:	bd80      	pop	{r7, pc}
 8005b22:	bf00      	nop
 8005b24:	40010000 	.word	0x40010000
 8005b28:	40010400 	.word	0x40010400
 8005b2c:	40014000 	.word	0x40014000
 8005b30:	40014400 	.word	0x40014400
 8005b34:	40014800 	.word	0x40014800
 8005b38:	40000400 	.word	0x40000400
 8005b3c:	40000800 	.word	0x40000800
 8005b40:	40000c00 	.word	0x40000c00
 8005b44:	40001800 	.word	0x40001800
 8005b48:	4000e000 	.word	0x4000e000
 8005b4c:	4000e400 	.word	0x4000e400
 8005b50:	00010007 	.word	0x00010007

08005b54 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005b54:	b580      	push	{r7, lr}
 8005b56:	b086      	sub	sp, #24
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	60f8      	str	r0, [r7, #12]
 8005b5c:	60b9      	str	r1, [r7, #8]
 8005b5e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005b60:	2300      	movs	r3, #0
 8005b62:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005b6a:	2b01      	cmp	r3, #1
 8005b6c:	d101      	bne.n	8005b72 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005b6e:	2302      	movs	r3, #2
 8005b70:	e0ff      	b.n	8005d72 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	2201      	movs	r2, #1
 8005b76:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	2b14      	cmp	r3, #20
 8005b7e:	f200 80f0 	bhi.w	8005d62 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005b82:	a201      	add	r2, pc, #4	@ (adr r2, 8005b88 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005b84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b88:	08005bdd 	.word	0x08005bdd
 8005b8c:	08005d63 	.word	0x08005d63
 8005b90:	08005d63 	.word	0x08005d63
 8005b94:	08005d63 	.word	0x08005d63
 8005b98:	08005c1d 	.word	0x08005c1d
 8005b9c:	08005d63 	.word	0x08005d63
 8005ba0:	08005d63 	.word	0x08005d63
 8005ba4:	08005d63 	.word	0x08005d63
 8005ba8:	08005c5f 	.word	0x08005c5f
 8005bac:	08005d63 	.word	0x08005d63
 8005bb0:	08005d63 	.word	0x08005d63
 8005bb4:	08005d63 	.word	0x08005d63
 8005bb8:	08005c9f 	.word	0x08005c9f
 8005bbc:	08005d63 	.word	0x08005d63
 8005bc0:	08005d63 	.word	0x08005d63
 8005bc4:	08005d63 	.word	0x08005d63
 8005bc8:	08005ce1 	.word	0x08005ce1
 8005bcc:	08005d63 	.word	0x08005d63
 8005bd0:	08005d63 	.word	0x08005d63
 8005bd4:	08005d63 	.word	0x08005d63
 8005bd8:	08005d21 	.word	0x08005d21
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	68b9      	ldr	r1, [r7, #8]
 8005be2:	4618      	mov	r0, r3
 8005be4:	f000 fa74 	bl	80060d0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	699a      	ldr	r2, [r3, #24]
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	f042 0208 	orr.w	r2, r2, #8
 8005bf6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	699a      	ldr	r2, [r3, #24]
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	f022 0204 	bic.w	r2, r2, #4
 8005c06:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	6999      	ldr	r1, [r3, #24]
 8005c0e:	68bb      	ldr	r3, [r7, #8]
 8005c10:	691a      	ldr	r2, [r3, #16]
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	430a      	orrs	r2, r1
 8005c18:	619a      	str	r2, [r3, #24]
      break;
 8005c1a:	e0a5      	b.n	8005d68 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	68b9      	ldr	r1, [r7, #8]
 8005c22:	4618      	mov	r0, r3
 8005c24:	f000 fae4 	bl	80061f0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	699a      	ldr	r2, [r3, #24]
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005c36:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	699a      	ldr	r2, [r3, #24]
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005c46:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	6999      	ldr	r1, [r3, #24]
 8005c4e:	68bb      	ldr	r3, [r7, #8]
 8005c50:	691b      	ldr	r3, [r3, #16]
 8005c52:	021a      	lsls	r2, r3, #8
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	430a      	orrs	r2, r1
 8005c5a:	619a      	str	r2, [r3, #24]
      break;
 8005c5c:	e084      	b.n	8005d68 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	68b9      	ldr	r1, [r7, #8]
 8005c64:	4618      	mov	r0, r3
 8005c66:	f000 fb4d 	bl	8006304 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	69da      	ldr	r2, [r3, #28]
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	f042 0208 	orr.w	r2, r2, #8
 8005c78:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	69da      	ldr	r2, [r3, #28]
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	f022 0204 	bic.w	r2, r2, #4
 8005c88:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	69d9      	ldr	r1, [r3, #28]
 8005c90:	68bb      	ldr	r3, [r7, #8]
 8005c92:	691a      	ldr	r2, [r3, #16]
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	430a      	orrs	r2, r1
 8005c9a:	61da      	str	r2, [r3, #28]
      break;
 8005c9c:	e064      	b.n	8005d68 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	68b9      	ldr	r1, [r7, #8]
 8005ca4:	4618      	mov	r0, r3
 8005ca6:	f000 fbb5 	bl	8006414 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	69da      	ldr	r2, [r3, #28]
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005cb8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	69da      	ldr	r2, [r3, #28]
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005cc8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	69d9      	ldr	r1, [r3, #28]
 8005cd0:	68bb      	ldr	r3, [r7, #8]
 8005cd2:	691b      	ldr	r3, [r3, #16]
 8005cd4:	021a      	lsls	r2, r3, #8
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	430a      	orrs	r2, r1
 8005cdc:	61da      	str	r2, [r3, #28]
      break;
 8005cde:	e043      	b.n	8005d68 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	68b9      	ldr	r1, [r7, #8]
 8005ce6:	4618      	mov	r0, r3
 8005ce8:	f000 fbfe 	bl	80064e8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	f042 0208 	orr.w	r2, r2, #8
 8005cfa:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	f022 0204 	bic.w	r2, r2, #4
 8005d0a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8005d12:	68bb      	ldr	r3, [r7, #8]
 8005d14:	691a      	ldr	r2, [r3, #16]
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	430a      	orrs	r2, r1
 8005d1c:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8005d1e:	e023      	b.n	8005d68 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	68b9      	ldr	r1, [r7, #8]
 8005d26:	4618      	mov	r0, r3
 8005d28:	f000 fc42 	bl	80065b0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005d3a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005d4a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8005d52:	68bb      	ldr	r3, [r7, #8]
 8005d54:	691b      	ldr	r3, [r3, #16]
 8005d56:	021a      	lsls	r2, r3, #8
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	430a      	orrs	r2, r1
 8005d5e:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8005d60:	e002      	b.n	8005d68 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005d62:	2301      	movs	r3, #1
 8005d64:	75fb      	strb	r3, [r7, #23]
      break;
 8005d66:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	2200      	movs	r2, #0
 8005d6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005d70:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d72:	4618      	mov	r0, r3
 8005d74:	3718      	adds	r7, #24
 8005d76:	46bd      	mov	sp, r7
 8005d78:	bd80      	pop	{r7, pc}
 8005d7a:	bf00      	nop

08005d7c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005d7c:	b580      	push	{r7, lr}
 8005d7e:	b084      	sub	sp, #16
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	6078      	str	r0, [r7, #4]
 8005d84:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005d86:	2300      	movs	r3, #0
 8005d88:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005d90:	2b01      	cmp	r3, #1
 8005d92:	d101      	bne.n	8005d98 <HAL_TIM_ConfigClockSource+0x1c>
 8005d94:	2302      	movs	r3, #2
 8005d96:	e0dc      	b.n	8005f52 <HAL_TIM_ConfigClockSource+0x1d6>
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2201      	movs	r2, #1
 8005d9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	2202      	movs	r2, #2
 8005da4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	689b      	ldr	r3, [r3, #8]
 8005dae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005db0:	68ba      	ldr	r2, [r7, #8]
 8005db2:	4b6a      	ldr	r3, [pc, #424]	@ (8005f5c <HAL_TIM_ConfigClockSource+0x1e0>)
 8005db4:	4013      	ands	r3, r2
 8005db6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005db8:	68bb      	ldr	r3, [r7, #8]
 8005dba:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005dbe:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	68ba      	ldr	r2, [r7, #8]
 8005dc6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005dc8:	683b      	ldr	r3, [r7, #0]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	4a64      	ldr	r2, [pc, #400]	@ (8005f60 <HAL_TIM_ConfigClockSource+0x1e4>)
 8005dce:	4293      	cmp	r3, r2
 8005dd0:	f000 80a9 	beq.w	8005f26 <HAL_TIM_ConfigClockSource+0x1aa>
 8005dd4:	4a62      	ldr	r2, [pc, #392]	@ (8005f60 <HAL_TIM_ConfigClockSource+0x1e4>)
 8005dd6:	4293      	cmp	r3, r2
 8005dd8:	f200 80ae 	bhi.w	8005f38 <HAL_TIM_ConfigClockSource+0x1bc>
 8005ddc:	4a61      	ldr	r2, [pc, #388]	@ (8005f64 <HAL_TIM_ConfigClockSource+0x1e8>)
 8005dde:	4293      	cmp	r3, r2
 8005de0:	f000 80a1 	beq.w	8005f26 <HAL_TIM_ConfigClockSource+0x1aa>
 8005de4:	4a5f      	ldr	r2, [pc, #380]	@ (8005f64 <HAL_TIM_ConfigClockSource+0x1e8>)
 8005de6:	4293      	cmp	r3, r2
 8005de8:	f200 80a6 	bhi.w	8005f38 <HAL_TIM_ConfigClockSource+0x1bc>
 8005dec:	4a5e      	ldr	r2, [pc, #376]	@ (8005f68 <HAL_TIM_ConfigClockSource+0x1ec>)
 8005dee:	4293      	cmp	r3, r2
 8005df0:	f000 8099 	beq.w	8005f26 <HAL_TIM_ConfigClockSource+0x1aa>
 8005df4:	4a5c      	ldr	r2, [pc, #368]	@ (8005f68 <HAL_TIM_ConfigClockSource+0x1ec>)
 8005df6:	4293      	cmp	r3, r2
 8005df8:	f200 809e 	bhi.w	8005f38 <HAL_TIM_ConfigClockSource+0x1bc>
 8005dfc:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8005e00:	f000 8091 	beq.w	8005f26 <HAL_TIM_ConfigClockSource+0x1aa>
 8005e04:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8005e08:	f200 8096 	bhi.w	8005f38 <HAL_TIM_ConfigClockSource+0x1bc>
 8005e0c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005e10:	f000 8089 	beq.w	8005f26 <HAL_TIM_ConfigClockSource+0x1aa>
 8005e14:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005e18:	f200 808e 	bhi.w	8005f38 <HAL_TIM_ConfigClockSource+0x1bc>
 8005e1c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005e20:	d03e      	beq.n	8005ea0 <HAL_TIM_ConfigClockSource+0x124>
 8005e22:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005e26:	f200 8087 	bhi.w	8005f38 <HAL_TIM_ConfigClockSource+0x1bc>
 8005e2a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005e2e:	f000 8086 	beq.w	8005f3e <HAL_TIM_ConfigClockSource+0x1c2>
 8005e32:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005e36:	d87f      	bhi.n	8005f38 <HAL_TIM_ConfigClockSource+0x1bc>
 8005e38:	2b70      	cmp	r3, #112	@ 0x70
 8005e3a:	d01a      	beq.n	8005e72 <HAL_TIM_ConfigClockSource+0xf6>
 8005e3c:	2b70      	cmp	r3, #112	@ 0x70
 8005e3e:	d87b      	bhi.n	8005f38 <HAL_TIM_ConfigClockSource+0x1bc>
 8005e40:	2b60      	cmp	r3, #96	@ 0x60
 8005e42:	d050      	beq.n	8005ee6 <HAL_TIM_ConfigClockSource+0x16a>
 8005e44:	2b60      	cmp	r3, #96	@ 0x60
 8005e46:	d877      	bhi.n	8005f38 <HAL_TIM_ConfigClockSource+0x1bc>
 8005e48:	2b50      	cmp	r3, #80	@ 0x50
 8005e4a:	d03c      	beq.n	8005ec6 <HAL_TIM_ConfigClockSource+0x14a>
 8005e4c:	2b50      	cmp	r3, #80	@ 0x50
 8005e4e:	d873      	bhi.n	8005f38 <HAL_TIM_ConfigClockSource+0x1bc>
 8005e50:	2b40      	cmp	r3, #64	@ 0x40
 8005e52:	d058      	beq.n	8005f06 <HAL_TIM_ConfigClockSource+0x18a>
 8005e54:	2b40      	cmp	r3, #64	@ 0x40
 8005e56:	d86f      	bhi.n	8005f38 <HAL_TIM_ConfigClockSource+0x1bc>
 8005e58:	2b30      	cmp	r3, #48	@ 0x30
 8005e5a:	d064      	beq.n	8005f26 <HAL_TIM_ConfigClockSource+0x1aa>
 8005e5c:	2b30      	cmp	r3, #48	@ 0x30
 8005e5e:	d86b      	bhi.n	8005f38 <HAL_TIM_ConfigClockSource+0x1bc>
 8005e60:	2b20      	cmp	r3, #32
 8005e62:	d060      	beq.n	8005f26 <HAL_TIM_ConfigClockSource+0x1aa>
 8005e64:	2b20      	cmp	r3, #32
 8005e66:	d867      	bhi.n	8005f38 <HAL_TIM_ConfigClockSource+0x1bc>
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d05c      	beq.n	8005f26 <HAL_TIM_ConfigClockSource+0x1aa>
 8005e6c:	2b10      	cmp	r3, #16
 8005e6e:	d05a      	beq.n	8005f26 <HAL_TIM_ConfigClockSource+0x1aa>
 8005e70:	e062      	b.n	8005f38 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005e76:	683b      	ldr	r3, [r7, #0]
 8005e78:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005e7a:	683b      	ldr	r3, [r7, #0]
 8005e7c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005e7e:	683b      	ldr	r3, [r7, #0]
 8005e80:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005e82:	f000 fc79 	bl	8006778 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	689b      	ldr	r3, [r3, #8]
 8005e8c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005e8e:	68bb      	ldr	r3, [r7, #8]
 8005e90:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005e94:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	68ba      	ldr	r2, [r7, #8]
 8005e9c:	609a      	str	r2, [r3, #8]
      break;
 8005e9e:	e04f      	b.n	8005f40 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005ea4:	683b      	ldr	r3, [r7, #0]
 8005ea6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005ea8:	683b      	ldr	r3, [r7, #0]
 8005eaa:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005eac:	683b      	ldr	r3, [r7, #0]
 8005eae:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005eb0:	f000 fc62 	bl	8006778 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	689a      	ldr	r2, [r3, #8]
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005ec2:	609a      	str	r2, [r3, #8]
      break;
 8005ec4:	e03c      	b.n	8005f40 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005eca:	683b      	ldr	r3, [r7, #0]
 8005ecc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005ece:	683b      	ldr	r3, [r7, #0]
 8005ed0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005ed2:	461a      	mov	r2, r3
 8005ed4:	f000 fbd2 	bl	800667c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	2150      	movs	r1, #80	@ 0x50
 8005ede:	4618      	mov	r0, r3
 8005ee0:	f000 fc2c 	bl	800673c <TIM_ITRx_SetConfig>
      break;
 8005ee4:	e02c      	b.n	8005f40 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005eea:	683b      	ldr	r3, [r7, #0]
 8005eec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005eee:	683b      	ldr	r3, [r7, #0]
 8005ef0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005ef2:	461a      	mov	r2, r3
 8005ef4:	f000 fbf1 	bl	80066da <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	2160      	movs	r1, #96	@ 0x60
 8005efe:	4618      	mov	r0, r3
 8005f00:	f000 fc1c 	bl	800673c <TIM_ITRx_SetConfig>
      break;
 8005f04:	e01c      	b.n	8005f40 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005f0a:	683b      	ldr	r3, [r7, #0]
 8005f0c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005f0e:	683b      	ldr	r3, [r7, #0]
 8005f10:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f12:	461a      	mov	r2, r3
 8005f14:	f000 fbb2 	bl	800667c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	2140      	movs	r1, #64	@ 0x40
 8005f1e:	4618      	mov	r0, r3
 8005f20:	f000 fc0c 	bl	800673c <TIM_ITRx_SetConfig>
      break;
 8005f24:	e00c      	b.n	8005f40 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681a      	ldr	r2, [r3, #0]
 8005f2a:	683b      	ldr	r3, [r7, #0]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	4619      	mov	r1, r3
 8005f30:	4610      	mov	r0, r2
 8005f32:	f000 fc03 	bl	800673c <TIM_ITRx_SetConfig>
      break;
 8005f36:	e003      	b.n	8005f40 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8005f38:	2301      	movs	r3, #1
 8005f3a:	73fb      	strb	r3, [r7, #15]
      break;
 8005f3c:	e000      	b.n	8005f40 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8005f3e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	2201      	movs	r2, #1
 8005f44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	2200      	movs	r2, #0
 8005f4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005f50:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f52:	4618      	mov	r0, r3
 8005f54:	3710      	adds	r7, #16
 8005f56:	46bd      	mov	sp, r7
 8005f58:	bd80      	pop	{r7, pc}
 8005f5a:	bf00      	nop
 8005f5c:	ffceff88 	.word	0xffceff88
 8005f60:	00100040 	.word	0x00100040
 8005f64:	00100030 	.word	0x00100030
 8005f68:	00100020 	.word	0x00100020

08005f6c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005f6c:	b480      	push	{r7}
 8005f6e:	b085      	sub	sp, #20
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	6078      	str	r0, [r7, #4]
 8005f74:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	4a4a      	ldr	r2, [pc, #296]	@ (80060a8 <TIM_Base_SetConfig+0x13c>)
 8005f80:	4293      	cmp	r3, r2
 8005f82:	d013      	beq.n	8005fac <TIM_Base_SetConfig+0x40>
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005f8a:	d00f      	beq.n	8005fac <TIM_Base_SetConfig+0x40>
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	4a47      	ldr	r2, [pc, #284]	@ (80060ac <TIM_Base_SetConfig+0x140>)
 8005f90:	4293      	cmp	r3, r2
 8005f92:	d00b      	beq.n	8005fac <TIM_Base_SetConfig+0x40>
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	4a46      	ldr	r2, [pc, #280]	@ (80060b0 <TIM_Base_SetConfig+0x144>)
 8005f98:	4293      	cmp	r3, r2
 8005f9a:	d007      	beq.n	8005fac <TIM_Base_SetConfig+0x40>
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	4a45      	ldr	r2, [pc, #276]	@ (80060b4 <TIM_Base_SetConfig+0x148>)
 8005fa0:	4293      	cmp	r3, r2
 8005fa2:	d003      	beq.n	8005fac <TIM_Base_SetConfig+0x40>
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	4a44      	ldr	r2, [pc, #272]	@ (80060b8 <TIM_Base_SetConfig+0x14c>)
 8005fa8:	4293      	cmp	r3, r2
 8005faa:	d108      	bne.n	8005fbe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005fb2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005fb4:	683b      	ldr	r3, [r7, #0]
 8005fb6:	685b      	ldr	r3, [r3, #4]
 8005fb8:	68fa      	ldr	r2, [r7, #12]
 8005fba:	4313      	orrs	r3, r2
 8005fbc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	4a39      	ldr	r2, [pc, #228]	@ (80060a8 <TIM_Base_SetConfig+0x13c>)
 8005fc2:	4293      	cmp	r3, r2
 8005fc4:	d027      	beq.n	8006016 <TIM_Base_SetConfig+0xaa>
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005fcc:	d023      	beq.n	8006016 <TIM_Base_SetConfig+0xaa>
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	4a36      	ldr	r2, [pc, #216]	@ (80060ac <TIM_Base_SetConfig+0x140>)
 8005fd2:	4293      	cmp	r3, r2
 8005fd4:	d01f      	beq.n	8006016 <TIM_Base_SetConfig+0xaa>
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	4a35      	ldr	r2, [pc, #212]	@ (80060b0 <TIM_Base_SetConfig+0x144>)
 8005fda:	4293      	cmp	r3, r2
 8005fdc:	d01b      	beq.n	8006016 <TIM_Base_SetConfig+0xaa>
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	4a34      	ldr	r2, [pc, #208]	@ (80060b4 <TIM_Base_SetConfig+0x148>)
 8005fe2:	4293      	cmp	r3, r2
 8005fe4:	d017      	beq.n	8006016 <TIM_Base_SetConfig+0xaa>
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	4a33      	ldr	r2, [pc, #204]	@ (80060b8 <TIM_Base_SetConfig+0x14c>)
 8005fea:	4293      	cmp	r3, r2
 8005fec:	d013      	beq.n	8006016 <TIM_Base_SetConfig+0xaa>
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	4a32      	ldr	r2, [pc, #200]	@ (80060bc <TIM_Base_SetConfig+0x150>)
 8005ff2:	4293      	cmp	r3, r2
 8005ff4:	d00f      	beq.n	8006016 <TIM_Base_SetConfig+0xaa>
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	4a31      	ldr	r2, [pc, #196]	@ (80060c0 <TIM_Base_SetConfig+0x154>)
 8005ffa:	4293      	cmp	r3, r2
 8005ffc:	d00b      	beq.n	8006016 <TIM_Base_SetConfig+0xaa>
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	4a30      	ldr	r2, [pc, #192]	@ (80060c4 <TIM_Base_SetConfig+0x158>)
 8006002:	4293      	cmp	r3, r2
 8006004:	d007      	beq.n	8006016 <TIM_Base_SetConfig+0xaa>
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	4a2f      	ldr	r2, [pc, #188]	@ (80060c8 <TIM_Base_SetConfig+0x15c>)
 800600a:	4293      	cmp	r3, r2
 800600c:	d003      	beq.n	8006016 <TIM_Base_SetConfig+0xaa>
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	4a2e      	ldr	r2, [pc, #184]	@ (80060cc <TIM_Base_SetConfig+0x160>)
 8006012:	4293      	cmp	r3, r2
 8006014:	d108      	bne.n	8006028 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800601c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800601e:	683b      	ldr	r3, [r7, #0]
 8006020:	68db      	ldr	r3, [r3, #12]
 8006022:	68fa      	ldr	r2, [r7, #12]
 8006024:	4313      	orrs	r3, r2
 8006026:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800602e:	683b      	ldr	r3, [r7, #0]
 8006030:	695b      	ldr	r3, [r3, #20]
 8006032:	4313      	orrs	r3, r2
 8006034:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	68fa      	ldr	r2, [r7, #12]
 800603a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800603c:	683b      	ldr	r3, [r7, #0]
 800603e:	689a      	ldr	r2, [r3, #8]
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006044:	683b      	ldr	r3, [r7, #0]
 8006046:	681a      	ldr	r2, [r3, #0]
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	4a16      	ldr	r2, [pc, #88]	@ (80060a8 <TIM_Base_SetConfig+0x13c>)
 8006050:	4293      	cmp	r3, r2
 8006052:	d00f      	beq.n	8006074 <TIM_Base_SetConfig+0x108>
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	4a18      	ldr	r2, [pc, #96]	@ (80060b8 <TIM_Base_SetConfig+0x14c>)
 8006058:	4293      	cmp	r3, r2
 800605a:	d00b      	beq.n	8006074 <TIM_Base_SetConfig+0x108>
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	4a17      	ldr	r2, [pc, #92]	@ (80060bc <TIM_Base_SetConfig+0x150>)
 8006060:	4293      	cmp	r3, r2
 8006062:	d007      	beq.n	8006074 <TIM_Base_SetConfig+0x108>
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	4a16      	ldr	r2, [pc, #88]	@ (80060c0 <TIM_Base_SetConfig+0x154>)
 8006068:	4293      	cmp	r3, r2
 800606a:	d003      	beq.n	8006074 <TIM_Base_SetConfig+0x108>
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	4a15      	ldr	r2, [pc, #84]	@ (80060c4 <TIM_Base_SetConfig+0x158>)
 8006070:	4293      	cmp	r3, r2
 8006072:	d103      	bne.n	800607c <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006074:	683b      	ldr	r3, [r7, #0]
 8006076:	691a      	ldr	r2, [r3, #16]
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	2201      	movs	r2, #1
 8006080:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	691b      	ldr	r3, [r3, #16]
 8006086:	f003 0301 	and.w	r3, r3, #1
 800608a:	2b01      	cmp	r3, #1
 800608c:	d105      	bne.n	800609a <TIM_Base_SetConfig+0x12e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	691b      	ldr	r3, [r3, #16]
 8006092:	f023 0201 	bic.w	r2, r3, #1
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	611a      	str	r2, [r3, #16]
  }
}
 800609a:	bf00      	nop
 800609c:	3714      	adds	r7, #20
 800609e:	46bd      	mov	sp, r7
 80060a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a4:	4770      	bx	lr
 80060a6:	bf00      	nop
 80060a8:	40010000 	.word	0x40010000
 80060ac:	40000400 	.word	0x40000400
 80060b0:	40000800 	.word	0x40000800
 80060b4:	40000c00 	.word	0x40000c00
 80060b8:	40010400 	.word	0x40010400
 80060bc:	40014000 	.word	0x40014000
 80060c0:	40014400 	.word	0x40014400
 80060c4:	40014800 	.word	0x40014800
 80060c8:	4000e000 	.word	0x4000e000
 80060cc:	4000e400 	.word	0x4000e400

080060d0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80060d0:	b480      	push	{r7}
 80060d2:	b087      	sub	sp, #28
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	6078      	str	r0, [r7, #4]
 80060d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	6a1b      	ldr	r3, [r3, #32]
 80060de:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	6a1b      	ldr	r3, [r3, #32]
 80060e4:	f023 0201 	bic.w	r2, r3, #1
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	685b      	ldr	r3, [r3, #4]
 80060f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	699b      	ldr	r3, [r3, #24]
 80060f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80060f8:	68fa      	ldr	r2, [r7, #12]
 80060fa:	4b37      	ldr	r3, [pc, #220]	@ (80061d8 <TIM_OC1_SetConfig+0x108>)
 80060fc:	4013      	ands	r3, r2
 80060fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	f023 0303 	bic.w	r3, r3, #3
 8006106:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006108:	683b      	ldr	r3, [r7, #0]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	68fa      	ldr	r2, [r7, #12]
 800610e:	4313      	orrs	r3, r2
 8006110:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006112:	697b      	ldr	r3, [r7, #20]
 8006114:	f023 0302 	bic.w	r3, r3, #2
 8006118:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800611a:	683b      	ldr	r3, [r7, #0]
 800611c:	689b      	ldr	r3, [r3, #8]
 800611e:	697a      	ldr	r2, [r7, #20]
 8006120:	4313      	orrs	r3, r2
 8006122:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	4a2d      	ldr	r2, [pc, #180]	@ (80061dc <TIM_OC1_SetConfig+0x10c>)
 8006128:	4293      	cmp	r3, r2
 800612a:	d00f      	beq.n	800614c <TIM_OC1_SetConfig+0x7c>
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	4a2c      	ldr	r2, [pc, #176]	@ (80061e0 <TIM_OC1_SetConfig+0x110>)
 8006130:	4293      	cmp	r3, r2
 8006132:	d00b      	beq.n	800614c <TIM_OC1_SetConfig+0x7c>
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	4a2b      	ldr	r2, [pc, #172]	@ (80061e4 <TIM_OC1_SetConfig+0x114>)
 8006138:	4293      	cmp	r3, r2
 800613a:	d007      	beq.n	800614c <TIM_OC1_SetConfig+0x7c>
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	4a2a      	ldr	r2, [pc, #168]	@ (80061e8 <TIM_OC1_SetConfig+0x118>)
 8006140:	4293      	cmp	r3, r2
 8006142:	d003      	beq.n	800614c <TIM_OC1_SetConfig+0x7c>
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	4a29      	ldr	r2, [pc, #164]	@ (80061ec <TIM_OC1_SetConfig+0x11c>)
 8006148:	4293      	cmp	r3, r2
 800614a:	d10c      	bne.n	8006166 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800614c:	697b      	ldr	r3, [r7, #20]
 800614e:	f023 0308 	bic.w	r3, r3, #8
 8006152:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006154:	683b      	ldr	r3, [r7, #0]
 8006156:	68db      	ldr	r3, [r3, #12]
 8006158:	697a      	ldr	r2, [r7, #20]
 800615a:	4313      	orrs	r3, r2
 800615c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800615e:	697b      	ldr	r3, [r7, #20]
 8006160:	f023 0304 	bic.w	r3, r3, #4
 8006164:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	4a1c      	ldr	r2, [pc, #112]	@ (80061dc <TIM_OC1_SetConfig+0x10c>)
 800616a:	4293      	cmp	r3, r2
 800616c:	d00f      	beq.n	800618e <TIM_OC1_SetConfig+0xbe>
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	4a1b      	ldr	r2, [pc, #108]	@ (80061e0 <TIM_OC1_SetConfig+0x110>)
 8006172:	4293      	cmp	r3, r2
 8006174:	d00b      	beq.n	800618e <TIM_OC1_SetConfig+0xbe>
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	4a1a      	ldr	r2, [pc, #104]	@ (80061e4 <TIM_OC1_SetConfig+0x114>)
 800617a:	4293      	cmp	r3, r2
 800617c:	d007      	beq.n	800618e <TIM_OC1_SetConfig+0xbe>
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	4a19      	ldr	r2, [pc, #100]	@ (80061e8 <TIM_OC1_SetConfig+0x118>)
 8006182:	4293      	cmp	r3, r2
 8006184:	d003      	beq.n	800618e <TIM_OC1_SetConfig+0xbe>
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	4a18      	ldr	r2, [pc, #96]	@ (80061ec <TIM_OC1_SetConfig+0x11c>)
 800618a:	4293      	cmp	r3, r2
 800618c:	d111      	bne.n	80061b2 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800618e:	693b      	ldr	r3, [r7, #16]
 8006190:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006194:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006196:	693b      	ldr	r3, [r7, #16]
 8006198:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800619c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800619e:	683b      	ldr	r3, [r7, #0]
 80061a0:	695b      	ldr	r3, [r3, #20]
 80061a2:	693a      	ldr	r2, [r7, #16]
 80061a4:	4313      	orrs	r3, r2
 80061a6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80061a8:	683b      	ldr	r3, [r7, #0]
 80061aa:	699b      	ldr	r3, [r3, #24]
 80061ac:	693a      	ldr	r2, [r7, #16]
 80061ae:	4313      	orrs	r3, r2
 80061b0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	693a      	ldr	r2, [r7, #16]
 80061b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	68fa      	ldr	r2, [r7, #12]
 80061bc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80061be:	683b      	ldr	r3, [r7, #0]
 80061c0:	685a      	ldr	r2, [r3, #4]
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	697a      	ldr	r2, [r7, #20]
 80061ca:	621a      	str	r2, [r3, #32]
}
 80061cc:	bf00      	nop
 80061ce:	371c      	adds	r7, #28
 80061d0:	46bd      	mov	sp, r7
 80061d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d6:	4770      	bx	lr
 80061d8:	fffeff8f 	.word	0xfffeff8f
 80061dc:	40010000 	.word	0x40010000
 80061e0:	40010400 	.word	0x40010400
 80061e4:	40014000 	.word	0x40014000
 80061e8:	40014400 	.word	0x40014400
 80061ec:	40014800 	.word	0x40014800

080061f0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80061f0:	b480      	push	{r7}
 80061f2:	b087      	sub	sp, #28
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	6078      	str	r0, [r7, #4]
 80061f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	6a1b      	ldr	r3, [r3, #32]
 80061fe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	6a1b      	ldr	r3, [r3, #32]
 8006204:	f023 0210 	bic.w	r2, r3, #16
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	685b      	ldr	r3, [r3, #4]
 8006210:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	699b      	ldr	r3, [r3, #24]
 8006216:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006218:	68fa      	ldr	r2, [r7, #12]
 800621a:	4b34      	ldr	r3, [pc, #208]	@ (80062ec <TIM_OC2_SetConfig+0xfc>)
 800621c:	4013      	ands	r3, r2
 800621e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006226:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006228:	683b      	ldr	r3, [r7, #0]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	021b      	lsls	r3, r3, #8
 800622e:	68fa      	ldr	r2, [r7, #12]
 8006230:	4313      	orrs	r3, r2
 8006232:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006234:	697b      	ldr	r3, [r7, #20]
 8006236:	f023 0320 	bic.w	r3, r3, #32
 800623a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800623c:	683b      	ldr	r3, [r7, #0]
 800623e:	689b      	ldr	r3, [r3, #8]
 8006240:	011b      	lsls	r3, r3, #4
 8006242:	697a      	ldr	r2, [r7, #20]
 8006244:	4313      	orrs	r3, r2
 8006246:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	4a29      	ldr	r2, [pc, #164]	@ (80062f0 <TIM_OC2_SetConfig+0x100>)
 800624c:	4293      	cmp	r3, r2
 800624e:	d003      	beq.n	8006258 <TIM_OC2_SetConfig+0x68>
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	4a28      	ldr	r2, [pc, #160]	@ (80062f4 <TIM_OC2_SetConfig+0x104>)
 8006254:	4293      	cmp	r3, r2
 8006256:	d10d      	bne.n	8006274 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006258:	697b      	ldr	r3, [r7, #20]
 800625a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800625e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006260:	683b      	ldr	r3, [r7, #0]
 8006262:	68db      	ldr	r3, [r3, #12]
 8006264:	011b      	lsls	r3, r3, #4
 8006266:	697a      	ldr	r2, [r7, #20]
 8006268:	4313      	orrs	r3, r2
 800626a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800626c:	697b      	ldr	r3, [r7, #20]
 800626e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006272:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	4a1e      	ldr	r2, [pc, #120]	@ (80062f0 <TIM_OC2_SetConfig+0x100>)
 8006278:	4293      	cmp	r3, r2
 800627a:	d00f      	beq.n	800629c <TIM_OC2_SetConfig+0xac>
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	4a1d      	ldr	r2, [pc, #116]	@ (80062f4 <TIM_OC2_SetConfig+0x104>)
 8006280:	4293      	cmp	r3, r2
 8006282:	d00b      	beq.n	800629c <TIM_OC2_SetConfig+0xac>
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	4a1c      	ldr	r2, [pc, #112]	@ (80062f8 <TIM_OC2_SetConfig+0x108>)
 8006288:	4293      	cmp	r3, r2
 800628a:	d007      	beq.n	800629c <TIM_OC2_SetConfig+0xac>
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	4a1b      	ldr	r2, [pc, #108]	@ (80062fc <TIM_OC2_SetConfig+0x10c>)
 8006290:	4293      	cmp	r3, r2
 8006292:	d003      	beq.n	800629c <TIM_OC2_SetConfig+0xac>
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	4a1a      	ldr	r2, [pc, #104]	@ (8006300 <TIM_OC2_SetConfig+0x110>)
 8006298:	4293      	cmp	r3, r2
 800629a:	d113      	bne.n	80062c4 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800629c:	693b      	ldr	r3, [r7, #16]
 800629e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80062a2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80062a4:	693b      	ldr	r3, [r7, #16]
 80062a6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80062aa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80062ac:	683b      	ldr	r3, [r7, #0]
 80062ae:	695b      	ldr	r3, [r3, #20]
 80062b0:	009b      	lsls	r3, r3, #2
 80062b2:	693a      	ldr	r2, [r7, #16]
 80062b4:	4313      	orrs	r3, r2
 80062b6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80062b8:	683b      	ldr	r3, [r7, #0]
 80062ba:	699b      	ldr	r3, [r3, #24]
 80062bc:	009b      	lsls	r3, r3, #2
 80062be:	693a      	ldr	r2, [r7, #16]
 80062c0:	4313      	orrs	r3, r2
 80062c2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	693a      	ldr	r2, [r7, #16]
 80062c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	68fa      	ldr	r2, [r7, #12]
 80062ce:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80062d0:	683b      	ldr	r3, [r7, #0]
 80062d2:	685a      	ldr	r2, [r3, #4]
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	697a      	ldr	r2, [r7, #20]
 80062dc:	621a      	str	r2, [r3, #32]
}
 80062de:	bf00      	nop
 80062e0:	371c      	adds	r7, #28
 80062e2:	46bd      	mov	sp, r7
 80062e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e8:	4770      	bx	lr
 80062ea:	bf00      	nop
 80062ec:	feff8fff 	.word	0xfeff8fff
 80062f0:	40010000 	.word	0x40010000
 80062f4:	40010400 	.word	0x40010400
 80062f8:	40014000 	.word	0x40014000
 80062fc:	40014400 	.word	0x40014400
 8006300:	40014800 	.word	0x40014800

08006304 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006304:	b480      	push	{r7}
 8006306:	b087      	sub	sp, #28
 8006308:	af00      	add	r7, sp, #0
 800630a:	6078      	str	r0, [r7, #4]
 800630c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	6a1b      	ldr	r3, [r3, #32]
 8006312:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	6a1b      	ldr	r3, [r3, #32]
 8006318:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	685b      	ldr	r3, [r3, #4]
 8006324:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	69db      	ldr	r3, [r3, #28]
 800632a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800632c:	68fa      	ldr	r2, [r7, #12]
 800632e:	4b33      	ldr	r3, [pc, #204]	@ (80063fc <TIM_OC3_SetConfig+0xf8>)
 8006330:	4013      	ands	r3, r2
 8006332:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	f023 0303 	bic.w	r3, r3, #3
 800633a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800633c:	683b      	ldr	r3, [r7, #0]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	68fa      	ldr	r2, [r7, #12]
 8006342:	4313      	orrs	r3, r2
 8006344:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006346:	697b      	ldr	r3, [r7, #20]
 8006348:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800634c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800634e:	683b      	ldr	r3, [r7, #0]
 8006350:	689b      	ldr	r3, [r3, #8]
 8006352:	021b      	lsls	r3, r3, #8
 8006354:	697a      	ldr	r2, [r7, #20]
 8006356:	4313      	orrs	r3, r2
 8006358:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	4a28      	ldr	r2, [pc, #160]	@ (8006400 <TIM_OC3_SetConfig+0xfc>)
 800635e:	4293      	cmp	r3, r2
 8006360:	d003      	beq.n	800636a <TIM_OC3_SetConfig+0x66>
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	4a27      	ldr	r2, [pc, #156]	@ (8006404 <TIM_OC3_SetConfig+0x100>)
 8006366:	4293      	cmp	r3, r2
 8006368:	d10d      	bne.n	8006386 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800636a:	697b      	ldr	r3, [r7, #20]
 800636c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006370:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006372:	683b      	ldr	r3, [r7, #0]
 8006374:	68db      	ldr	r3, [r3, #12]
 8006376:	021b      	lsls	r3, r3, #8
 8006378:	697a      	ldr	r2, [r7, #20]
 800637a:	4313      	orrs	r3, r2
 800637c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800637e:	697b      	ldr	r3, [r7, #20]
 8006380:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006384:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	4a1d      	ldr	r2, [pc, #116]	@ (8006400 <TIM_OC3_SetConfig+0xfc>)
 800638a:	4293      	cmp	r3, r2
 800638c:	d00f      	beq.n	80063ae <TIM_OC3_SetConfig+0xaa>
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	4a1c      	ldr	r2, [pc, #112]	@ (8006404 <TIM_OC3_SetConfig+0x100>)
 8006392:	4293      	cmp	r3, r2
 8006394:	d00b      	beq.n	80063ae <TIM_OC3_SetConfig+0xaa>
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	4a1b      	ldr	r2, [pc, #108]	@ (8006408 <TIM_OC3_SetConfig+0x104>)
 800639a:	4293      	cmp	r3, r2
 800639c:	d007      	beq.n	80063ae <TIM_OC3_SetConfig+0xaa>
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	4a1a      	ldr	r2, [pc, #104]	@ (800640c <TIM_OC3_SetConfig+0x108>)
 80063a2:	4293      	cmp	r3, r2
 80063a4:	d003      	beq.n	80063ae <TIM_OC3_SetConfig+0xaa>
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	4a19      	ldr	r2, [pc, #100]	@ (8006410 <TIM_OC3_SetConfig+0x10c>)
 80063aa:	4293      	cmp	r3, r2
 80063ac:	d113      	bne.n	80063d6 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80063ae:	693b      	ldr	r3, [r7, #16]
 80063b0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80063b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80063b6:	693b      	ldr	r3, [r7, #16]
 80063b8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80063bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80063be:	683b      	ldr	r3, [r7, #0]
 80063c0:	695b      	ldr	r3, [r3, #20]
 80063c2:	011b      	lsls	r3, r3, #4
 80063c4:	693a      	ldr	r2, [r7, #16]
 80063c6:	4313      	orrs	r3, r2
 80063c8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80063ca:	683b      	ldr	r3, [r7, #0]
 80063cc:	699b      	ldr	r3, [r3, #24]
 80063ce:	011b      	lsls	r3, r3, #4
 80063d0:	693a      	ldr	r2, [r7, #16]
 80063d2:	4313      	orrs	r3, r2
 80063d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	693a      	ldr	r2, [r7, #16]
 80063da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	68fa      	ldr	r2, [r7, #12]
 80063e0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80063e2:	683b      	ldr	r3, [r7, #0]
 80063e4:	685a      	ldr	r2, [r3, #4]
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	697a      	ldr	r2, [r7, #20]
 80063ee:	621a      	str	r2, [r3, #32]
}
 80063f0:	bf00      	nop
 80063f2:	371c      	adds	r7, #28
 80063f4:	46bd      	mov	sp, r7
 80063f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063fa:	4770      	bx	lr
 80063fc:	fffeff8f 	.word	0xfffeff8f
 8006400:	40010000 	.word	0x40010000
 8006404:	40010400 	.word	0x40010400
 8006408:	40014000 	.word	0x40014000
 800640c:	40014400 	.word	0x40014400
 8006410:	40014800 	.word	0x40014800

08006414 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006414:	b480      	push	{r7}
 8006416:	b087      	sub	sp, #28
 8006418:	af00      	add	r7, sp, #0
 800641a:	6078      	str	r0, [r7, #4]
 800641c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	6a1b      	ldr	r3, [r3, #32]
 8006422:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	6a1b      	ldr	r3, [r3, #32]
 8006428:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	685b      	ldr	r3, [r3, #4]
 8006434:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	69db      	ldr	r3, [r3, #28]
 800643a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800643c:	68fa      	ldr	r2, [r7, #12]
 800643e:	4b24      	ldr	r3, [pc, #144]	@ (80064d0 <TIM_OC4_SetConfig+0xbc>)
 8006440:	4013      	ands	r3, r2
 8006442:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800644a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800644c:	683b      	ldr	r3, [r7, #0]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	021b      	lsls	r3, r3, #8
 8006452:	68fa      	ldr	r2, [r7, #12]
 8006454:	4313      	orrs	r3, r2
 8006456:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006458:	693b      	ldr	r3, [r7, #16]
 800645a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800645e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006460:	683b      	ldr	r3, [r7, #0]
 8006462:	689b      	ldr	r3, [r3, #8]
 8006464:	031b      	lsls	r3, r3, #12
 8006466:	693a      	ldr	r2, [r7, #16]
 8006468:	4313      	orrs	r3, r2
 800646a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	4a19      	ldr	r2, [pc, #100]	@ (80064d4 <TIM_OC4_SetConfig+0xc0>)
 8006470:	4293      	cmp	r3, r2
 8006472:	d00f      	beq.n	8006494 <TIM_OC4_SetConfig+0x80>
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	4a18      	ldr	r2, [pc, #96]	@ (80064d8 <TIM_OC4_SetConfig+0xc4>)
 8006478:	4293      	cmp	r3, r2
 800647a:	d00b      	beq.n	8006494 <TIM_OC4_SetConfig+0x80>
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	4a17      	ldr	r2, [pc, #92]	@ (80064dc <TIM_OC4_SetConfig+0xc8>)
 8006480:	4293      	cmp	r3, r2
 8006482:	d007      	beq.n	8006494 <TIM_OC4_SetConfig+0x80>
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	4a16      	ldr	r2, [pc, #88]	@ (80064e0 <TIM_OC4_SetConfig+0xcc>)
 8006488:	4293      	cmp	r3, r2
 800648a:	d003      	beq.n	8006494 <TIM_OC4_SetConfig+0x80>
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	4a15      	ldr	r2, [pc, #84]	@ (80064e4 <TIM_OC4_SetConfig+0xd0>)
 8006490:	4293      	cmp	r3, r2
 8006492:	d109      	bne.n	80064a8 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006494:	697b      	ldr	r3, [r7, #20]
 8006496:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800649a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800649c:	683b      	ldr	r3, [r7, #0]
 800649e:	695b      	ldr	r3, [r3, #20]
 80064a0:	019b      	lsls	r3, r3, #6
 80064a2:	697a      	ldr	r2, [r7, #20]
 80064a4:	4313      	orrs	r3, r2
 80064a6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	697a      	ldr	r2, [r7, #20]
 80064ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	68fa      	ldr	r2, [r7, #12]
 80064b2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80064b4:	683b      	ldr	r3, [r7, #0]
 80064b6:	685a      	ldr	r2, [r3, #4]
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	693a      	ldr	r2, [r7, #16]
 80064c0:	621a      	str	r2, [r3, #32]
}
 80064c2:	bf00      	nop
 80064c4:	371c      	adds	r7, #28
 80064c6:	46bd      	mov	sp, r7
 80064c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064cc:	4770      	bx	lr
 80064ce:	bf00      	nop
 80064d0:	feff8fff 	.word	0xfeff8fff
 80064d4:	40010000 	.word	0x40010000
 80064d8:	40010400 	.word	0x40010400
 80064dc:	40014000 	.word	0x40014000
 80064e0:	40014400 	.word	0x40014400
 80064e4:	40014800 	.word	0x40014800

080064e8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80064e8:	b480      	push	{r7}
 80064ea:	b087      	sub	sp, #28
 80064ec:	af00      	add	r7, sp, #0
 80064ee:	6078      	str	r0, [r7, #4]
 80064f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	6a1b      	ldr	r3, [r3, #32]
 80064f6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	6a1b      	ldr	r3, [r3, #32]
 80064fc:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	685b      	ldr	r3, [r3, #4]
 8006508:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800650e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006510:	68fa      	ldr	r2, [r7, #12]
 8006512:	4b21      	ldr	r3, [pc, #132]	@ (8006598 <TIM_OC5_SetConfig+0xb0>)
 8006514:	4013      	ands	r3, r2
 8006516:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006518:	683b      	ldr	r3, [r7, #0]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	68fa      	ldr	r2, [r7, #12]
 800651e:	4313      	orrs	r3, r2
 8006520:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006522:	693b      	ldr	r3, [r7, #16]
 8006524:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8006528:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800652a:	683b      	ldr	r3, [r7, #0]
 800652c:	689b      	ldr	r3, [r3, #8]
 800652e:	041b      	lsls	r3, r3, #16
 8006530:	693a      	ldr	r2, [r7, #16]
 8006532:	4313      	orrs	r3, r2
 8006534:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	4a18      	ldr	r2, [pc, #96]	@ (800659c <TIM_OC5_SetConfig+0xb4>)
 800653a:	4293      	cmp	r3, r2
 800653c:	d00f      	beq.n	800655e <TIM_OC5_SetConfig+0x76>
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	4a17      	ldr	r2, [pc, #92]	@ (80065a0 <TIM_OC5_SetConfig+0xb8>)
 8006542:	4293      	cmp	r3, r2
 8006544:	d00b      	beq.n	800655e <TIM_OC5_SetConfig+0x76>
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	4a16      	ldr	r2, [pc, #88]	@ (80065a4 <TIM_OC5_SetConfig+0xbc>)
 800654a:	4293      	cmp	r3, r2
 800654c:	d007      	beq.n	800655e <TIM_OC5_SetConfig+0x76>
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	4a15      	ldr	r2, [pc, #84]	@ (80065a8 <TIM_OC5_SetConfig+0xc0>)
 8006552:	4293      	cmp	r3, r2
 8006554:	d003      	beq.n	800655e <TIM_OC5_SetConfig+0x76>
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	4a14      	ldr	r2, [pc, #80]	@ (80065ac <TIM_OC5_SetConfig+0xc4>)
 800655a:	4293      	cmp	r3, r2
 800655c:	d109      	bne.n	8006572 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800655e:	697b      	ldr	r3, [r7, #20]
 8006560:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006564:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006566:	683b      	ldr	r3, [r7, #0]
 8006568:	695b      	ldr	r3, [r3, #20]
 800656a:	021b      	lsls	r3, r3, #8
 800656c:	697a      	ldr	r2, [r7, #20]
 800656e:	4313      	orrs	r3, r2
 8006570:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	697a      	ldr	r2, [r7, #20]
 8006576:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	68fa      	ldr	r2, [r7, #12]
 800657c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800657e:	683b      	ldr	r3, [r7, #0]
 8006580:	685a      	ldr	r2, [r3, #4]
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	693a      	ldr	r2, [r7, #16]
 800658a:	621a      	str	r2, [r3, #32]
}
 800658c:	bf00      	nop
 800658e:	371c      	adds	r7, #28
 8006590:	46bd      	mov	sp, r7
 8006592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006596:	4770      	bx	lr
 8006598:	fffeff8f 	.word	0xfffeff8f
 800659c:	40010000 	.word	0x40010000
 80065a0:	40010400 	.word	0x40010400
 80065a4:	40014000 	.word	0x40014000
 80065a8:	40014400 	.word	0x40014400
 80065ac:	40014800 	.word	0x40014800

080065b0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80065b0:	b480      	push	{r7}
 80065b2:	b087      	sub	sp, #28
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	6078      	str	r0, [r7, #4]
 80065b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	6a1b      	ldr	r3, [r3, #32]
 80065be:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	6a1b      	ldr	r3, [r3, #32]
 80065c4:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	685b      	ldr	r3, [r3, #4]
 80065d0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80065d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80065d8:	68fa      	ldr	r2, [r7, #12]
 80065da:	4b22      	ldr	r3, [pc, #136]	@ (8006664 <TIM_OC6_SetConfig+0xb4>)
 80065dc:	4013      	ands	r3, r2
 80065de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80065e0:	683b      	ldr	r3, [r7, #0]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	021b      	lsls	r3, r3, #8
 80065e6:	68fa      	ldr	r2, [r7, #12]
 80065e8:	4313      	orrs	r3, r2
 80065ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80065ec:	693b      	ldr	r3, [r7, #16]
 80065ee:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80065f2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80065f4:	683b      	ldr	r3, [r7, #0]
 80065f6:	689b      	ldr	r3, [r3, #8]
 80065f8:	051b      	lsls	r3, r3, #20
 80065fa:	693a      	ldr	r2, [r7, #16]
 80065fc:	4313      	orrs	r3, r2
 80065fe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	4a19      	ldr	r2, [pc, #100]	@ (8006668 <TIM_OC6_SetConfig+0xb8>)
 8006604:	4293      	cmp	r3, r2
 8006606:	d00f      	beq.n	8006628 <TIM_OC6_SetConfig+0x78>
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	4a18      	ldr	r2, [pc, #96]	@ (800666c <TIM_OC6_SetConfig+0xbc>)
 800660c:	4293      	cmp	r3, r2
 800660e:	d00b      	beq.n	8006628 <TIM_OC6_SetConfig+0x78>
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	4a17      	ldr	r2, [pc, #92]	@ (8006670 <TIM_OC6_SetConfig+0xc0>)
 8006614:	4293      	cmp	r3, r2
 8006616:	d007      	beq.n	8006628 <TIM_OC6_SetConfig+0x78>
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	4a16      	ldr	r2, [pc, #88]	@ (8006674 <TIM_OC6_SetConfig+0xc4>)
 800661c:	4293      	cmp	r3, r2
 800661e:	d003      	beq.n	8006628 <TIM_OC6_SetConfig+0x78>
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	4a15      	ldr	r2, [pc, #84]	@ (8006678 <TIM_OC6_SetConfig+0xc8>)
 8006624:	4293      	cmp	r3, r2
 8006626:	d109      	bne.n	800663c <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006628:	697b      	ldr	r3, [r7, #20]
 800662a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800662e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006630:	683b      	ldr	r3, [r7, #0]
 8006632:	695b      	ldr	r3, [r3, #20]
 8006634:	029b      	lsls	r3, r3, #10
 8006636:	697a      	ldr	r2, [r7, #20]
 8006638:	4313      	orrs	r3, r2
 800663a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	697a      	ldr	r2, [r7, #20]
 8006640:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	68fa      	ldr	r2, [r7, #12]
 8006646:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006648:	683b      	ldr	r3, [r7, #0]
 800664a:	685a      	ldr	r2, [r3, #4]
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	693a      	ldr	r2, [r7, #16]
 8006654:	621a      	str	r2, [r3, #32]
}
 8006656:	bf00      	nop
 8006658:	371c      	adds	r7, #28
 800665a:	46bd      	mov	sp, r7
 800665c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006660:	4770      	bx	lr
 8006662:	bf00      	nop
 8006664:	feff8fff 	.word	0xfeff8fff
 8006668:	40010000 	.word	0x40010000
 800666c:	40010400 	.word	0x40010400
 8006670:	40014000 	.word	0x40014000
 8006674:	40014400 	.word	0x40014400
 8006678:	40014800 	.word	0x40014800

0800667c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800667c:	b480      	push	{r7}
 800667e:	b087      	sub	sp, #28
 8006680:	af00      	add	r7, sp, #0
 8006682:	60f8      	str	r0, [r7, #12]
 8006684:	60b9      	str	r1, [r7, #8]
 8006686:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	6a1b      	ldr	r3, [r3, #32]
 800668c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	6a1b      	ldr	r3, [r3, #32]
 8006692:	f023 0201 	bic.w	r2, r3, #1
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	699b      	ldr	r3, [r3, #24]
 800669e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80066a0:	693b      	ldr	r3, [r7, #16]
 80066a2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80066a6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	011b      	lsls	r3, r3, #4
 80066ac:	693a      	ldr	r2, [r7, #16]
 80066ae:	4313      	orrs	r3, r2
 80066b0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80066b2:	697b      	ldr	r3, [r7, #20]
 80066b4:	f023 030a 	bic.w	r3, r3, #10
 80066b8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80066ba:	697a      	ldr	r2, [r7, #20]
 80066bc:	68bb      	ldr	r3, [r7, #8]
 80066be:	4313      	orrs	r3, r2
 80066c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	693a      	ldr	r2, [r7, #16]
 80066c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	697a      	ldr	r2, [r7, #20]
 80066cc:	621a      	str	r2, [r3, #32]
}
 80066ce:	bf00      	nop
 80066d0:	371c      	adds	r7, #28
 80066d2:	46bd      	mov	sp, r7
 80066d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d8:	4770      	bx	lr

080066da <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80066da:	b480      	push	{r7}
 80066dc:	b087      	sub	sp, #28
 80066de:	af00      	add	r7, sp, #0
 80066e0:	60f8      	str	r0, [r7, #12]
 80066e2:	60b9      	str	r1, [r7, #8]
 80066e4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	6a1b      	ldr	r3, [r3, #32]
 80066ea:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	6a1b      	ldr	r3, [r3, #32]
 80066f0:	f023 0210 	bic.w	r2, r3, #16
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	699b      	ldr	r3, [r3, #24]
 80066fc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80066fe:	693b      	ldr	r3, [r7, #16]
 8006700:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006704:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	031b      	lsls	r3, r3, #12
 800670a:	693a      	ldr	r2, [r7, #16]
 800670c:	4313      	orrs	r3, r2
 800670e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006710:	697b      	ldr	r3, [r7, #20]
 8006712:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006716:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006718:	68bb      	ldr	r3, [r7, #8]
 800671a:	011b      	lsls	r3, r3, #4
 800671c:	697a      	ldr	r2, [r7, #20]
 800671e:	4313      	orrs	r3, r2
 8006720:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	693a      	ldr	r2, [r7, #16]
 8006726:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	697a      	ldr	r2, [r7, #20]
 800672c:	621a      	str	r2, [r3, #32]
}
 800672e:	bf00      	nop
 8006730:	371c      	adds	r7, #28
 8006732:	46bd      	mov	sp, r7
 8006734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006738:	4770      	bx	lr
	...

0800673c <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800673c:	b480      	push	{r7}
 800673e:	b085      	sub	sp, #20
 8006740:	af00      	add	r7, sp, #0
 8006742:	6078      	str	r0, [r7, #4]
 8006744:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	689b      	ldr	r3, [r3, #8]
 800674a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800674c:	68fa      	ldr	r2, [r7, #12]
 800674e:	4b09      	ldr	r3, [pc, #36]	@ (8006774 <TIM_ITRx_SetConfig+0x38>)
 8006750:	4013      	ands	r3, r2
 8006752:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006754:	683a      	ldr	r2, [r7, #0]
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	4313      	orrs	r3, r2
 800675a:	f043 0307 	orr.w	r3, r3, #7
 800675e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	68fa      	ldr	r2, [r7, #12]
 8006764:	609a      	str	r2, [r3, #8]
}
 8006766:	bf00      	nop
 8006768:	3714      	adds	r7, #20
 800676a:	46bd      	mov	sp, r7
 800676c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006770:	4770      	bx	lr
 8006772:	bf00      	nop
 8006774:	ffcfff8f 	.word	0xffcfff8f

08006778 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006778:	b480      	push	{r7}
 800677a:	b087      	sub	sp, #28
 800677c:	af00      	add	r7, sp, #0
 800677e:	60f8      	str	r0, [r7, #12]
 8006780:	60b9      	str	r1, [r7, #8]
 8006782:	607a      	str	r2, [r7, #4]
 8006784:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	689b      	ldr	r3, [r3, #8]
 800678a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800678c:	697b      	ldr	r3, [r7, #20]
 800678e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006792:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006794:	683b      	ldr	r3, [r7, #0]
 8006796:	021a      	lsls	r2, r3, #8
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	431a      	orrs	r2, r3
 800679c:	68bb      	ldr	r3, [r7, #8]
 800679e:	4313      	orrs	r3, r2
 80067a0:	697a      	ldr	r2, [r7, #20]
 80067a2:	4313      	orrs	r3, r2
 80067a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	697a      	ldr	r2, [r7, #20]
 80067aa:	609a      	str	r2, [r3, #8]
}
 80067ac:	bf00      	nop
 80067ae:	371c      	adds	r7, #28
 80067b0:	46bd      	mov	sp, r7
 80067b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b6:	4770      	bx	lr

080067b8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80067b8:	b480      	push	{r7}
 80067ba:	b087      	sub	sp, #28
 80067bc:	af00      	add	r7, sp, #0
 80067be:	60f8      	str	r0, [r7, #12]
 80067c0:	60b9      	str	r1, [r7, #8]
 80067c2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80067c4:	68bb      	ldr	r3, [r7, #8]
 80067c6:	f003 031f 	and.w	r3, r3, #31
 80067ca:	2201      	movs	r2, #1
 80067cc:	fa02 f303 	lsl.w	r3, r2, r3
 80067d0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	6a1a      	ldr	r2, [r3, #32]
 80067d6:	697b      	ldr	r3, [r7, #20]
 80067d8:	43db      	mvns	r3, r3
 80067da:	401a      	ands	r2, r3
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	6a1a      	ldr	r2, [r3, #32]
 80067e4:	68bb      	ldr	r3, [r7, #8]
 80067e6:	f003 031f 	and.w	r3, r3, #31
 80067ea:	6879      	ldr	r1, [r7, #4]
 80067ec:	fa01 f303 	lsl.w	r3, r1, r3
 80067f0:	431a      	orrs	r2, r3
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	621a      	str	r2, [r3, #32]
}
 80067f6:	bf00      	nop
 80067f8:	371c      	adds	r7, #28
 80067fa:	46bd      	mov	sp, r7
 80067fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006800:	4770      	bx	lr
	...

08006804 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006804:	b480      	push	{r7}
 8006806:	b085      	sub	sp, #20
 8006808:	af00      	add	r7, sp, #0
 800680a:	6078      	str	r0, [r7, #4]
 800680c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006814:	2b01      	cmp	r3, #1
 8006816:	d101      	bne.n	800681c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006818:	2302      	movs	r3, #2
 800681a:	e077      	b.n	800690c <HAL_TIMEx_MasterConfigSynchronization+0x108>
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	2201      	movs	r2, #1
 8006820:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	2202      	movs	r2, #2
 8006828:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	685b      	ldr	r3, [r3, #4]
 8006832:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	689b      	ldr	r3, [r3, #8]
 800683a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	4a35      	ldr	r2, [pc, #212]	@ (8006918 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006842:	4293      	cmp	r3, r2
 8006844:	d004      	beq.n	8006850 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	4a34      	ldr	r2, [pc, #208]	@ (800691c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800684c:	4293      	cmp	r3, r2
 800684e:	d108      	bne.n	8006862 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8006856:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006858:	683b      	ldr	r3, [r7, #0]
 800685a:	685b      	ldr	r3, [r3, #4]
 800685c:	68fa      	ldr	r2, [r7, #12]
 800685e:	4313      	orrs	r3, r2
 8006860:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006868:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800686a:	683b      	ldr	r3, [r7, #0]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	68fa      	ldr	r2, [r7, #12]
 8006870:	4313      	orrs	r3, r2
 8006872:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	68fa      	ldr	r2, [r7, #12]
 800687a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	4a25      	ldr	r2, [pc, #148]	@ (8006918 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006882:	4293      	cmp	r3, r2
 8006884:	d02c      	beq.n	80068e0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800688e:	d027      	beq.n	80068e0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	4a22      	ldr	r2, [pc, #136]	@ (8006920 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8006896:	4293      	cmp	r3, r2
 8006898:	d022      	beq.n	80068e0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	4a21      	ldr	r2, [pc, #132]	@ (8006924 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 80068a0:	4293      	cmp	r3, r2
 80068a2:	d01d      	beq.n	80068e0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	4a1f      	ldr	r2, [pc, #124]	@ (8006928 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 80068aa:	4293      	cmp	r3, r2
 80068ac:	d018      	beq.n	80068e0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	4a1a      	ldr	r2, [pc, #104]	@ (800691c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80068b4:	4293      	cmp	r3, r2
 80068b6:	d013      	beq.n	80068e0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	4a1b      	ldr	r2, [pc, #108]	@ (800692c <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 80068be:	4293      	cmp	r3, r2
 80068c0:	d00e      	beq.n	80068e0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	4a1a      	ldr	r2, [pc, #104]	@ (8006930 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 80068c8:	4293      	cmp	r3, r2
 80068ca:	d009      	beq.n	80068e0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	4a18      	ldr	r2, [pc, #96]	@ (8006934 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 80068d2:	4293      	cmp	r3, r2
 80068d4:	d004      	beq.n	80068e0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	4a17      	ldr	r2, [pc, #92]	@ (8006938 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 80068dc:	4293      	cmp	r3, r2
 80068de:	d10c      	bne.n	80068fa <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80068e0:	68bb      	ldr	r3, [r7, #8]
 80068e2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80068e6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80068e8:	683b      	ldr	r3, [r7, #0]
 80068ea:	689b      	ldr	r3, [r3, #8]
 80068ec:	68ba      	ldr	r2, [r7, #8]
 80068ee:	4313      	orrs	r3, r2
 80068f0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	68ba      	ldr	r2, [r7, #8]
 80068f8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	2201      	movs	r2, #1
 80068fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	2200      	movs	r2, #0
 8006906:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800690a:	2300      	movs	r3, #0
}
 800690c:	4618      	mov	r0, r3
 800690e:	3714      	adds	r7, #20
 8006910:	46bd      	mov	sp, r7
 8006912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006916:	4770      	bx	lr
 8006918:	40010000 	.word	0x40010000
 800691c:	40010400 	.word	0x40010400
 8006920:	40000400 	.word	0x40000400
 8006924:	40000800 	.word	0x40000800
 8006928:	40000c00 	.word	0x40000c00
 800692c:	40001800 	.word	0x40001800
 8006930:	40014000 	.word	0x40014000
 8006934:	4000e000 	.word	0x4000e000
 8006938:	4000e400 	.word	0x4000e400

0800693c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800693c:	b480      	push	{r7}
 800693e:	b085      	sub	sp, #20
 8006940:	af00      	add	r7, sp, #0
 8006942:	6078      	str	r0, [r7, #4]
 8006944:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006946:	2300      	movs	r3, #0
 8006948:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006950:	2b01      	cmp	r3, #1
 8006952:	d101      	bne.n	8006958 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006954:	2302      	movs	r3, #2
 8006956:	e073      	b.n	8006a40 <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	2201      	movs	r2, #1
 800695c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8006966:	683b      	ldr	r3, [r7, #0]
 8006968:	68db      	ldr	r3, [r3, #12]
 800696a:	4313      	orrs	r3, r2
 800696c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006974:	683b      	ldr	r3, [r7, #0]
 8006976:	689b      	ldr	r3, [r3, #8]
 8006978:	4313      	orrs	r3, r2
 800697a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8006982:	683b      	ldr	r3, [r7, #0]
 8006984:	685b      	ldr	r3, [r3, #4]
 8006986:	4313      	orrs	r3, r2
 8006988:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8006990:	683b      	ldr	r3, [r7, #0]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	4313      	orrs	r3, r2
 8006996:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800699e:	683b      	ldr	r3, [r7, #0]
 80069a0:	691b      	ldr	r3, [r3, #16]
 80069a2:	4313      	orrs	r3, r2
 80069a4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80069ac:	683b      	ldr	r3, [r7, #0]
 80069ae:	695b      	ldr	r3, [r3, #20]
 80069b0:	4313      	orrs	r3, r2
 80069b2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80069ba:	683b      	ldr	r3, [r7, #0]
 80069bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80069be:	4313      	orrs	r3, r2
 80069c0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 80069c8:	683b      	ldr	r3, [r7, #0]
 80069ca:	699b      	ldr	r3, [r3, #24]
 80069cc:	041b      	lsls	r3, r3, #16
 80069ce:	4313      	orrs	r3, r2
 80069d0:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80069d8:	683b      	ldr	r3, [r7, #0]
 80069da:	69db      	ldr	r3, [r3, #28]
 80069dc:	4313      	orrs	r3, r2
 80069de:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	4a19      	ldr	r2, [pc, #100]	@ (8006a4c <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 80069e6:	4293      	cmp	r3, r2
 80069e8:	d004      	beq.n	80069f4 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	4a18      	ldr	r2, [pc, #96]	@ (8006a50 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 80069f0:	4293      	cmp	r3, r2
 80069f2:	d11c      	bne.n	8006a2e <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 80069fa:	683b      	ldr	r3, [r7, #0]
 80069fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069fe:	051b      	lsls	r3, r3, #20
 8006a00:	4313      	orrs	r3, r2
 8006a02:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8006a0a:	683b      	ldr	r3, [r7, #0]
 8006a0c:	6a1b      	ldr	r3, [r3, #32]
 8006a0e:	4313      	orrs	r3, r2
 8006a10:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8006a18:	683b      	ldr	r3, [r7, #0]
 8006a1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a1c:	4313      	orrs	r3, r2
 8006a1e:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8006a26:	683b      	ldr	r3, [r7, #0]
 8006a28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a2a:	4313      	orrs	r3, r2
 8006a2c:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	68fa      	ldr	r2, [r7, #12]
 8006a34:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	2200      	movs	r2, #0
 8006a3a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006a3e:	2300      	movs	r3, #0
}
 8006a40:	4618      	mov	r0, r3
 8006a42:	3714      	adds	r7, #20
 8006a44:	46bd      	mov	sp, r7
 8006a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a4a:	4770      	bx	lr
 8006a4c:	40010000 	.word	0x40010000
 8006a50:	40010400 	.word	0x40010400

08006a54 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006a54:	b580      	push	{r7, lr}
 8006a56:	b082      	sub	sp, #8
 8006a58:	af00      	add	r7, sp, #0
 8006a5a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d101      	bne.n	8006a66 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006a62:	2301      	movs	r3, #1
 8006a64:	e042      	b.n	8006aec <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d106      	bne.n	8006a7e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	2200      	movs	r2, #0
 8006a74:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006a78:	6878      	ldr	r0, [r7, #4]
 8006a7a:	f7fa fff3 	bl	8001a64 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	2224      	movs	r2, #36	@ 0x24
 8006a82:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	681a      	ldr	r2, [r3, #0]
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	f022 0201 	bic.w	r2, r2, #1
 8006a94:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d002      	beq.n	8006aa4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8006a9e:	6878      	ldr	r0, [r7, #4]
 8006aa0:	f000 ffea 	bl	8007a78 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006aa4:	6878      	ldr	r0, [r7, #4]
 8006aa6:	f000 f97b 	bl	8006da0 <UART_SetConfig>
 8006aaa:	4603      	mov	r3, r0
 8006aac:	2b01      	cmp	r3, #1
 8006aae:	d101      	bne.n	8006ab4 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8006ab0:	2301      	movs	r3, #1
 8006ab2:	e01b      	b.n	8006aec <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	685a      	ldr	r2, [r3, #4]
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006ac2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	689a      	ldr	r2, [r3, #8]
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006ad2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	681a      	ldr	r2, [r3, #0]
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	f042 0201 	orr.w	r2, r2, #1
 8006ae2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006ae4:	6878      	ldr	r0, [r7, #4]
 8006ae6:	f001 f869 	bl	8007bbc <UART_CheckIdleState>
 8006aea:	4603      	mov	r3, r0
}
 8006aec:	4618      	mov	r0, r3
 8006aee:	3708      	adds	r7, #8
 8006af0:	46bd      	mov	sp, r7
 8006af2:	bd80      	pop	{r7, pc}

08006af4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006af4:	b580      	push	{r7, lr}
 8006af6:	b08a      	sub	sp, #40	@ 0x28
 8006af8:	af02      	add	r7, sp, #8
 8006afa:	60f8      	str	r0, [r7, #12]
 8006afc:	60b9      	str	r1, [r7, #8]
 8006afe:	603b      	str	r3, [r7, #0]
 8006b00:	4613      	mov	r3, r2
 8006b02:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b0a:	2b20      	cmp	r3, #32
 8006b0c:	d17b      	bne.n	8006c06 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8006b0e:	68bb      	ldr	r3, [r7, #8]
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d002      	beq.n	8006b1a <HAL_UART_Transmit+0x26>
 8006b14:	88fb      	ldrh	r3, [r7, #6]
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d101      	bne.n	8006b1e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8006b1a:	2301      	movs	r3, #1
 8006b1c:	e074      	b.n	8006c08 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	2200      	movs	r2, #0
 8006b22:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	2221      	movs	r2, #33	@ 0x21
 8006b2a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006b2e:	f7fb f9e1 	bl	8001ef4 <HAL_GetTick>
 8006b32:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	88fa      	ldrh	r2, [r7, #6]
 8006b38:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	88fa      	ldrh	r2, [r7, #6]
 8006b40:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	689b      	ldr	r3, [r3, #8]
 8006b48:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006b4c:	d108      	bne.n	8006b60 <HAL_UART_Transmit+0x6c>
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	691b      	ldr	r3, [r3, #16]
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d104      	bne.n	8006b60 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006b56:	2300      	movs	r3, #0
 8006b58:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006b5a:	68bb      	ldr	r3, [r7, #8]
 8006b5c:	61bb      	str	r3, [r7, #24]
 8006b5e:	e003      	b.n	8006b68 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006b60:	68bb      	ldr	r3, [r7, #8]
 8006b62:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006b64:	2300      	movs	r3, #0
 8006b66:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006b68:	e030      	b.n	8006bcc <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006b6a:	683b      	ldr	r3, [r7, #0]
 8006b6c:	9300      	str	r3, [sp, #0]
 8006b6e:	697b      	ldr	r3, [r7, #20]
 8006b70:	2200      	movs	r2, #0
 8006b72:	2180      	movs	r1, #128	@ 0x80
 8006b74:	68f8      	ldr	r0, [r7, #12]
 8006b76:	f001 f8cb 	bl	8007d10 <UART_WaitOnFlagUntilTimeout>
 8006b7a:	4603      	mov	r3, r0
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d005      	beq.n	8006b8c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	2220      	movs	r2, #32
 8006b84:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8006b88:	2303      	movs	r3, #3
 8006b8a:	e03d      	b.n	8006c08 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8006b8c:	69fb      	ldr	r3, [r7, #28]
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d10b      	bne.n	8006baa <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006b92:	69bb      	ldr	r3, [r7, #24]
 8006b94:	881b      	ldrh	r3, [r3, #0]
 8006b96:	461a      	mov	r2, r3
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006ba0:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8006ba2:	69bb      	ldr	r3, [r7, #24]
 8006ba4:	3302      	adds	r3, #2
 8006ba6:	61bb      	str	r3, [r7, #24]
 8006ba8:	e007      	b.n	8006bba <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006baa:	69fb      	ldr	r3, [r7, #28]
 8006bac:	781a      	ldrb	r2, [r3, #0]
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8006bb4:	69fb      	ldr	r3, [r7, #28]
 8006bb6:	3301      	adds	r3, #1
 8006bb8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006bc0:	b29b      	uxth	r3, r3
 8006bc2:	3b01      	subs	r3, #1
 8006bc4:	b29a      	uxth	r2, r3
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006bd2:	b29b      	uxth	r3, r3
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d1c8      	bne.n	8006b6a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006bd8:	683b      	ldr	r3, [r7, #0]
 8006bda:	9300      	str	r3, [sp, #0]
 8006bdc:	697b      	ldr	r3, [r7, #20]
 8006bde:	2200      	movs	r2, #0
 8006be0:	2140      	movs	r1, #64	@ 0x40
 8006be2:	68f8      	ldr	r0, [r7, #12]
 8006be4:	f001 f894 	bl	8007d10 <UART_WaitOnFlagUntilTimeout>
 8006be8:	4603      	mov	r3, r0
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d005      	beq.n	8006bfa <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	2220      	movs	r2, #32
 8006bf2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8006bf6:	2303      	movs	r3, #3
 8006bf8:	e006      	b.n	8006c08 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	2220      	movs	r2, #32
 8006bfe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8006c02:	2300      	movs	r3, #0
 8006c04:	e000      	b.n	8006c08 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8006c06:	2302      	movs	r3, #2
  }
}
 8006c08:	4618      	mov	r0, r3
 8006c0a:	3720      	adds	r7, #32
 8006c0c:	46bd      	mov	sp, r7
 8006c0e:	bd80      	pop	{r7, pc}

08006c10 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006c10:	b580      	push	{r7, lr}
 8006c12:	b08a      	sub	sp, #40	@ 0x28
 8006c14:	af02      	add	r7, sp, #8
 8006c16:	60f8      	str	r0, [r7, #12]
 8006c18:	60b9      	str	r1, [r7, #8]
 8006c1a:	603b      	str	r3, [r7, #0]
 8006c1c:	4613      	mov	r3, r2
 8006c1e:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006c26:	2b20      	cmp	r3, #32
 8006c28:	f040 80b5 	bne.w	8006d96 <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 8006c2c:	68bb      	ldr	r3, [r7, #8]
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d002      	beq.n	8006c38 <HAL_UART_Receive+0x28>
 8006c32:	88fb      	ldrh	r3, [r7, #6]
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d101      	bne.n	8006c3c <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8006c38:	2301      	movs	r3, #1
 8006c3a:	e0ad      	b.n	8006d98 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	2200      	movs	r2, #0
 8006c40:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	2222      	movs	r2, #34	@ 0x22
 8006c48:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	2200      	movs	r2, #0
 8006c50:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006c52:	f7fb f94f 	bl	8001ef4 <HAL_GetTick>
 8006c56:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	88fa      	ldrh	r2, [r7, #6]
 8006c5c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	88fa      	ldrh	r2, [r7, #6]
 8006c64:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	689b      	ldr	r3, [r3, #8]
 8006c6c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006c70:	d10e      	bne.n	8006c90 <HAL_UART_Receive+0x80>
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	691b      	ldr	r3, [r3, #16]
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d105      	bne.n	8006c86 <HAL_UART_Receive+0x76>
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8006c80:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006c84:	e02d      	b.n	8006ce2 <HAL_UART_Receive+0xd2>
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	22ff      	movs	r2, #255	@ 0xff
 8006c8a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006c8e:	e028      	b.n	8006ce2 <HAL_UART_Receive+0xd2>
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	689b      	ldr	r3, [r3, #8]
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d10d      	bne.n	8006cb4 <HAL_UART_Receive+0xa4>
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	691b      	ldr	r3, [r3, #16]
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d104      	bne.n	8006caa <HAL_UART_Receive+0x9a>
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	22ff      	movs	r2, #255	@ 0xff
 8006ca4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006ca8:	e01b      	b.n	8006ce2 <HAL_UART_Receive+0xd2>
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	227f      	movs	r2, #127	@ 0x7f
 8006cae:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006cb2:	e016      	b.n	8006ce2 <HAL_UART_Receive+0xd2>
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	689b      	ldr	r3, [r3, #8]
 8006cb8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006cbc:	d10d      	bne.n	8006cda <HAL_UART_Receive+0xca>
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	691b      	ldr	r3, [r3, #16]
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d104      	bne.n	8006cd0 <HAL_UART_Receive+0xc0>
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	227f      	movs	r2, #127	@ 0x7f
 8006cca:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006cce:	e008      	b.n	8006ce2 <HAL_UART_Receive+0xd2>
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	223f      	movs	r2, #63	@ 0x3f
 8006cd4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006cd8:	e003      	b.n	8006ce2 <HAL_UART_Receive+0xd2>
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	2200      	movs	r2, #0
 8006cde:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8006ce8:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	689b      	ldr	r3, [r3, #8]
 8006cee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006cf2:	d108      	bne.n	8006d06 <HAL_UART_Receive+0xf6>
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	691b      	ldr	r3, [r3, #16]
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d104      	bne.n	8006d06 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8006cfc:	2300      	movs	r3, #0
 8006cfe:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006d00:	68bb      	ldr	r3, [r7, #8]
 8006d02:	61bb      	str	r3, [r7, #24]
 8006d04:	e003      	b.n	8006d0e <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8006d06:	68bb      	ldr	r3, [r7, #8]
 8006d08:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006d0a:	2300      	movs	r3, #0
 8006d0c:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8006d0e:	e036      	b.n	8006d7e <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8006d10:	683b      	ldr	r3, [r7, #0]
 8006d12:	9300      	str	r3, [sp, #0]
 8006d14:	697b      	ldr	r3, [r7, #20]
 8006d16:	2200      	movs	r2, #0
 8006d18:	2120      	movs	r1, #32
 8006d1a:	68f8      	ldr	r0, [r7, #12]
 8006d1c:	f000 fff8 	bl	8007d10 <UART_WaitOnFlagUntilTimeout>
 8006d20:	4603      	mov	r3, r0
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d005      	beq.n	8006d32 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	2220      	movs	r2, #32
 8006d2a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        return HAL_TIMEOUT;
 8006d2e:	2303      	movs	r3, #3
 8006d30:	e032      	b.n	8006d98 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 8006d32:	69fb      	ldr	r3, [r7, #28]
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d10c      	bne.n	8006d52 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d3e:	b29a      	uxth	r2, r3
 8006d40:	8a7b      	ldrh	r3, [r7, #18]
 8006d42:	4013      	ands	r3, r2
 8006d44:	b29a      	uxth	r2, r3
 8006d46:	69bb      	ldr	r3, [r7, #24]
 8006d48:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8006d4a:	69bb      	ldr	r3, [r7, #24]
 8006d4c:	3302      	adds	r3, #2
 8006d4e:	61bb      	str	r3, [r7, #24]
 8006d50:	e00c      	b.n	8006d6c <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d58:	b2da      	uxtb	r2, r3
 8006d5a:	8a7b      	ldrh	r3, [r7, #18]
 8006d5c:	b2db      	uxtb	r3, r3
 8006d5e:	4013      	ands	r3, r2
 8006d60:	b2da      	uxtb	r2, r3
 8006d62:	69fb      	ldr	r3, [r7, #28]
 8006d64:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8006d66:	69fb      	ldr	r3, [r7, #28]
 8006d68:	3301      	adds	r3, #1
 8006d6a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006d72:	b29b      	uxth	r3, r3
 8006d74:	3b01      	subs	r3, #1
 8006d76:	b29a      	uxth	r2, r3
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006d84:	b29b      	uxth	r3, r3
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d1c2      	bne.n	8006d10 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	2220      	movs	r2, #32
 8006d8e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    return HAL_OK;
 8006d92:	2300      	movs	r3, #0
 8006d94:	e000      	b.n	8006d98 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 8006d96:	2302      	movs	r3, #2
  }
}
 8006d98:	4618      	mov	r0, r3
 8006d9a:	3720      	adds	r7, #32
 8006d9c:	46bd      	mov	sp, r7
 8006d9e:	bd80      	pop	{r7, pc}

08006da0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006da0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006da4:	b092      	sub	sp, #72	@ 0x48
 8006da6:	af00      	add	r7, sp, #0
 8006da8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006daa:	2300      	movs	r3, #0
 8006dac:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006db0:	697b      	ldr	r3, [r7, #20]
 8006db2:	689a      	ldr	r2, [r3, #8]
 8006db4:	697b      	ldr	r3, [r7, #20]
 8006db6:	691b      	ldr	r3, [r3, #16]
 8006db8:	431a      	orrs	r2, r3
 8006dba:	697b      	ldr	r3, [r7, #20]
 8006dbc:	695b      	ldr	r3, [r3, #20]
 8006dbe:	431a      	orrs	r2, r3
 8006dc0:	697b      	ldr	r3, [r7, #20]
 8006dc2:	69db      	ldr	r3, [r3, #28]
 8006dc4:	4313      	orrs	r3, r2
 8006dc6:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006dc8:	697b      	ldr	r3, [r7, #20]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	681a      	ldr	r2, [r3, #0]
 8006dce:	4bbe      	ldr	r3, [pc, #760]	@ (80070c8 <UART_SetConfig+0x328>)
 8006dd0:	4013      	ands	r3, r2
 8006dd2:	697a      	ldr	r2, [r7, #20]
 8006dd4:	6812      	ldr	r2, [r2, #0]
 8006dd6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006dd8:	430b      	orrs	r3, r1
 8006dda:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006ddc:	697b      	ldr	r3, [r7, #20]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	685b      	ldr	r3, [r3, #4]
 8006de2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006de6:	697b      	ldr	r3, [r7, #20]
 8006de8:	68da      	ldr	r2, [r3, #12]
 8006dea:	697b      	ldr	r3, [r7, #20]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	430a      	orrs	r2, r1
 8006df0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006df2:	697b      	ldr	r3, [r7, #20]
 8006df4:	699b      	ldr	r3, [r3, #24]
 8006df6:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006df8:	697b      	ldr	r3, [r7, #20]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	4ab3      	ldr	r2, [pc, #716]	@ (80070cc <UART_SetConfig+0x32c>)
 8006dfe:	4293      	cmp	r3, r2
 8006e00:	d004      	beq.n	8006e0c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006e02:	697b      	ldr	r3, [r7, #20]
 8006e04:	6a1b      	ldr	r3, [r3, #32]
 8006e06:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006e08:	4313      	orrs	r3, r2
 8006e0a:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006e0c:	697b      	ldr	r3, [r7, #20]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	689a      	ldr	r2, [r3, #8]
 8006e12:	4baf      	ldr	r3, [pc, #700]	@ (80070d0 <UART_SetConfig+0x330>)
 8006e14:	4013      	ands	r3, r2
 8006e16:	697a      	ldr	r2, [r7, #20]
 8006e18:	6812      	ldr	r2, [r2, #0]
 8006e1a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006e1c:	430b      	orrs	r3, r1
 8006e1e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006e20:	697b      	ldr	r3, [r7, #20]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e26:	f023 010f 	bic.w	r1, r3, #15
 8006e2a:	697b      	ldr	r3, [r7, #20]
 8006e2c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006e2e:	697b      	ldr	r3, [r7, #20]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	430a      	orrs	r2, r1
 8006e34:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006e36:	697b      	ldr	r3, [r7, #20]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	4aa6      	ldr	r2, [pc, #664]	@ (80070d4 <UART_SetConfig+0x334>)
 8006e3c:	4293      	cmp	r3, r2
 8006e3e:	d177      	bne.n	8006f30 <UART_SetConfig+0x190>
 8006e40:	4ba5      	ldr	r3, [pc, #660]	@ (80070d8 <UART_SetConfig+0x338>)
 8006e42:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006e44:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006e48:	2b28      	cmp	r3, #40	@ 0x28
 8006e4a:	d86d      	bhi.n	8006f28 <UART_SetConfig+0x188>
 8006e4c:	a201      	add	r2, pc, #4	@ (adr r2, 8006e54 <UART_SetConfig+0xb4>)
 8006e4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e52:	bf00      	nop
 8006e54:	08006ef9 	.word	0x08006ef9
 8006e58:	08006f29 	.word	0x08006f29
 8006e5c:	08006f29 	.word	0x08006f29
 8006e60:	08006f29 	.word	0x08006f29
 8006e64:	08006f29 	.word	0x08006f29
 8006e68:	08006f29 	.word	0x08006f29
 8006e6c:	08006f29 	.word	0x08006f29
 8006e70:	08006f29 	.word	0x08006f29
 8006e74:	08006f01 	.word	0x08006f01
 8006e78:	08006f29 	.word	0x08006f29
 8006e7c:	08006f29 	.word	0x08006f29
 8006e80:	08006f29 	.word	0x08006f29
 8006e84:	08006f29 	.word	0x08006f29
 8006e88:	08006f29 	.word	0x08006f29
 8006e8c:	08006f29 	.word	0x08006f29
 8006e90:	08006f29 	.word	0x08006f29
 8006e94:	08006f09 	.word	0x08006f09
 8006e98:	08006f29 	.word	0x08006f29
 8006e9c:	08006f29 	.word	0x08006f29
 8006ea0:	08006f29 	.word	0x08006f29
 8006ea4:	08006f29 	.word	0x08006f29
 8006ea8:	08006f29 	.word	0x08006f29
 8006eac:	08006f29 	.word	0x08006f29
 8006eb0:	08006f29 	.word	0x08006f29
 8006eb4:	08006f11 	.word	0x08006f11
 8006eb8:	08006f29 	.word	0x08006f29
 8006ebc:	08006f29 	.word	0x08006f29
 8006ec0:	08006f29 	.word	0x08006f29
 8006ec4:	08006f29 	.word	0x08006f29
 8006ec8:	08006f29 	.word	0x08006f29
 8006ecc:	08006f29 	.word	0x08006f29
 8006ed0:	08006f29 	.word	0x08006f29
 8006ed4:	08006f19 	.word	0x08006f19
 8006ed8:	08006f29 	.word	0x08006f29
 8006edc:	08006f29 	.word	0x08006f29
 8006ee0:	08006f29 	.word	0x08006f29
 8006ee4:	08006f29 	.word	0x08006f29
 8006ee8:	08006f29 	.word	0x08006f29
 8006eec:	08006f29 	.word	0x08006f29
 8006ef0:	08006f29 	.word	0x08006f29
 8006ef4:	08006f21 	.word	0x08006f21
 8006ef8:	2301      	movs	r3, #1
 8006efa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006efe:	e326      	b.n	800754e <UART_SetConfig+0x7ae>
 8006f00:	2304      	movs	r3, #4
 8006f02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006f06:	e322      	b.n	800754e <UART_SetConfig+0x7ae>
 8006f08:	2308      	movs	r3, #8
 8006f0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006f0e:	e31e      	b.n	800754e <UART_SetConfig+0x7ae>
 8006f10:	2310      	movs	r3, #16
 8006f12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006f16:	e31a      	b.n	800754e <UART_SetConfig+0x7ae>
 8006f18:	2320      	movs	r3, #32
 8006f1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006f1e:	e316      	b.n	800754e <UART_SetConfig+0x7ae>
 8006f20:	2340      	movs	r3, #64	@ 0x40
 8006f22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006f26:	e312      	b.n	800754e <UART_SetConfig+0x7ae>
 8006f28:	2380      	movs	r3, #128	@ 0x80
 8006f2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006f2e:	e30e      	b.n	800754e <UART_SetConfig+0x7ae>
 8006f30:	697b      	ldr	r3, [r7, #20]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	4a69      	ldr	r2, [pc, #420]	@ (80070dc <UART_SetConfig+0x33c>)
 8006f36:	4293      	cmp	r3, r2
 8006f38:	d130      	bne.n	8006f9c <UART_SetConfig+0x1fc>
 8006f3a:	4b67      	ldr	r3, [pc, #412]	@ (80070d8 <UART_SetConfig+0x338>)
 8006f3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006f3e:	f003 0307 	and.w	r3, r3, #7
 8006f42:	2b05      	cmp	r3, #5
 8006f44:	d826      	bhi.n	8006f94 <UART_SetConfig+0x1f4>
 8006f46:	a201      	add	r2, pc, #4	@ (adr r2, 8006f4c <UART_SetConfig+0x1ac>)
 8006f48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f4c:	08006f65 	.word	0x08006f65
 8006f50:	08006f6d 	.word	0x08006f6d
 8006f54:	08006f75 	.word	0x08006f75
 8006f58:	08006f7d 	.word	0x08006f7d
 8006f5c:	08006f85 	.word	0x08006f85
 8006f60:	08006f8d 	.word	0x08006f8d
 8006f64:	2300      	movs	r3, #0
 8006f66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006f6a:	e2f0      	b.n	800754e <UART_SetConfig+0x7ae>
 8006f6c:	2304      	movs	r3, #4
 8006f6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006f72:	e2ec      	b.n	800754e <UART_SetConfig+0x7ae>
 8006f74:	2308      	movs	r3, #8
 8006f76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006f7a:	e2e8      	b.n	800754e <UART_SetConfig+0x7ae>
 8006f7c:	2310      	movs	r3, #16
 8006f7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006f82:	e2e4      	b.n	800754e <UART_SetConfig+0x7ae>
 8006f84:	2320      	movs	r3, #32
 8006f86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006f8a:	e2e0      	b.n	800754e <UART_SetConfig+0x7ae>
 8006f8c:	2340      	movs	r3, #64	@ 0x40
 8006f8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006f92:	e2dc      	b.n	800754e <UART_SetConfig+0x7ae>
 8006f94:	2380      	movs	r3, #128	@ 0x80
 8006f96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006f9a:	e2d8      	b.n	800754e <UART_SetConfig+0x7ae>
 8006f9c:	697b      	ldr	r3, [r7, #20]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	4a4f      	ldr	r2, [pc, #316]	@ (80070e0 <UART_SetConfig+0x340>)
 8006fa2:	4293      	cmp	r3, r2
 8006fa4:	d130      	bne.n	8007008 <UART_SetConfig+0x268>
 8006fa6:	4b4c      	ldr	r3, [pc, #304]	@ (80070d8 <UART_SetConfig+0x338>)
 8006fa8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006faa:	f003 0307 	and.w	r3, r3, #7
 8006fae:	2b05      	cmp	r3, #5
 8006fb0:	d826      	bhi.n	8007000 <UART_SetConfig+0x260>
 8006fb2:	a201      	add	r2, pc, #4	@ (adr r2, 8006fb8 <UART_SetConfig+0x218>)
 8006fb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fb8:	08006fd1 	.word	0x08006fd1
 8006fbc:	08006fd9 	.word	0x08006fd9
 8006fc0:	08006fe1 	.word	0x08006fe1
 8006fc4:	08006fe9 	.word	0x08006fe9
 8006fc8:	08006ff1 	.word	0x08006ff1
 8006fcc:	08006ff9 	.word	0x08006ff9
 8006fd0:	2300      	movs	r3, #0
 8006fd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006fd6:	e2ba      	b.n	800754e <UART_SetConfig+0x7ae>
 8006fd8:	2304      	movs	r3, #4
 8006fda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006fde:	e2b6      	b.n	800754e <UART_SetConfig+0x7ae>
 8006fe0:	2308      	movs	r3, #8
 8006fe2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006fe6:	e2b2      	b.n	800754e <UART_SetConfig+0x7ae>
 8006fe8:	2310      	movs	r3, #16
 8006fea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006fee:	e2ae      	b.n	800754e <UART_SetConfig+0x7ae>
 8006ff0:	2320      	movs	r3, #32
 8006ff2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006ff6:	e2aa      	b.n	800754e <UART_SetConfig+0x7ae>
 8006ff8:	2340      	movs	r3, #64	@ 0x40
 8006ffa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006ffe:	e2a6      	b.n	800754e <UART_SetConfig+0x7ae>
 8007000:	2380      	movs	r3, #128	@ 0x80
 8007002:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007006:	e2a2      	b.n	800754e <UART_SetConfig+0x7ae>
 8007008:	697b      	ldr	r3, [r7, #20]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	4a35      	ldr	r2, [pc, #212]	@ (80070e4 <UART_SetConfig+0x344>)
 800700e:	4293      	cmp	r3, r2
 8007010:	d130      	bne.n	8007074 <UART_SetConfig+0x2d4>
 8007012:	4b31      	ldr	r3, [pc, #196]	@ (80070d8 <UART_SetConfig+0x338>)
 8007014:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007016:	f003 0307 	and.w	r3, r3, #7
 800701a:	2b05      	cmp	r3, #5
 800701c:	d826      	bhi.n	800706c <UART_SetConfig+0x2cc>
 800701e:	a201      	add	r2, pc, #4	@ (adr r2, 8007024 <UART_SetConfig+0x284>)
 8007020:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007024:	0800703d 	.word	0x0800703d
 8007028:	08007045 	.word	0x08007045
 800702c:	0800704d 	.word	0x0800704d
 8007030:	08007055 	.word	0x08007055
 8007034:	0800705d 	.word	0x0800705d
 8007038:	08007065 	.word	0x08007065
 800703c:	2300      	movs	r3, #0
 800703e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007042:	e284      	b.n	800754e <UART_SetConfig+0x7ae>
 8007044:	2304      	movs	r3, #4
 8007046:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800704a:	e280      	b.n	800754e <UART_SetConfig+0x7ae>
 800704c:	2308      	movs	r3, #8
 800704e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007052:	e27c      	b.n	800754e <UART_SetConfig+0x7ae>
 8007054:	2310      	movs	r3, #16
 8007056:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800705a:	e278      	b.n	800754e <UART_SetConfig+0x7ae>
 800705c:	2320      	movs	r3, #32
 800705e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007062:	e274      	b.n	800754e <UART_SetConfig+0x7ae>
 8007064:	2340      	movs	r3, #64	@ 0x40
 8007066:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800706a:	e270      	b.n	800754e <UART_SetConfig+0x7ae>
 800706c:	2380      	movs	r3, #128	@ 0x80
 800706e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007072:	e26c      	b.n	800754e <UART_SetConfig+0x7ae>
 8007074:	697b      	ldr	r3, [r7, #20]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	4a1b      	ldr	r2, [pc, #108]	@ (80070e8 <UART_SetConfig+0x348>)
 800707a:	4293      	cmp	r3, r2
 800707c:	d142      	bne.n	8007104 <UART_SetConfig+0x364>
 800707e:	4b16      	ldr	r3, [pc, #88]	@ (80070d8 <UART_SetConfig+0x338>)
 8007080:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007082:	f003 0307 	and.w	r3, r3, #7
 8007086:	2b05      	cmp	r3, #5
 8007088:	d838      	bhi.n	80070fc <UART_SetConfig+0x35c>
 800708a:	a201      	add	r2, pc, #4	@ (adr r2, 8007090 <UART_SetConfig+0x2f0>)
 800708c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007090:	080070a9 	.word	0x080070a9
 8007094:	080070b1 	.word	0x080070b1
 8007098:	080070b9 	.word	0x080070b9
 800709c:	080070c1 	.word	0x080070c1
 80070a0:	080070ed 	.word	0x080070ed
 80070a4:	080070f5 	.word	0x080070f5
 80070a8:	2300      	movs	r3, #0
 80070aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80070ae:	e24e      	b.n	800754e <UART_SetConfig+0x7ae>
 80070b0:	2304      	movs	r3, #4
 80070b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80070b6:	e24a      	b.n	800754e <UART_SetConfig+0x7ae>
 80070b8:	2308      	movs	r3, #8
 80070ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80070be:	e246      	b.n	800754e <UART_SetConfig+0x7ae>
 80070c0:	2310      	movs	r3, #16
 80070c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80070c6:	e242      	b.n	800754e <UART_SetConfig+0x7ae>
 80070c8:	cfff69f3 	.word	0xcfff69f3
 80070cc:	58000c00 	.word	0x58000c00
 80070d0:	11fff4ff 	.word	0x11fff4ff
 80070d4:	40011000 	.word	0x40011000
 80070d8:	58024400 	.word	0x58024400
 80070dc:	40004400 	.word	0x40004400
 80070e0:	40004800 	.word	0x40004800
 80070e4:	40004c00 	.word	0x40004c00
 80070e8:	40005000 	.word	0x40005000
 80070ec:	2320      	movs	r3, #32
 80070ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80070f2:	e22c      	b.n	800754e <UART_SetConfig+0x7ae>
 80070f4:	2340      	movs	r3, #64	@ 0x40
 80070f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80070fa:	e228      	b.n	800754e <UART_SetConfig+0x7ae>
 80070fc:	2380      	movs	r3, #128	@ 0x80
 80070fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007102:	e224      	b.n	800754e <UART_SetConfig+0x7ae>
 8007104:	697b      	ldr	r3, [r7, #20]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	4ab1      	ldr	r2, [pc, #708]	@ (80073d0 <UART_SetConfig+0x630>)
 800710a:	4293      	cmp	r3, r2
 800710c:	d176      	bne.n	80071fc <UART_SetConfig+0x45c>
 800710e:	4bb1      	ldr	r3, [pc, #708]	@ (80073d4 <UART_SetConfig+0x634>)
 8007110:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007112:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007116:	2b28      	cmp	r3, #40	@ 0x28
 8007118:	d86c      	bhi.n	80071f4 <UART_SetConfig+0x454>
 800711a:	a201      	add	r2, pc, #4	@ (adr r2, 8007120 <UART_SetConfig+0x380>)
 800711c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007120:	080071c5 	.word	0x080071c5
 8007124:	080071f5 	.word	0x080071f5
 8007128:	080071f5 	.word	0x080071f5
 800712c:	080071f5 	.word	0x080071f5
 8007130:	080071f5 	.word	0x080071f5
 8007134:	080071f5 	.word	0x080071f5
 8007138:	080071f5 	.word	0x080071f5
 800713c:	080071f5 	.word	0x080071f5
 8007140:	080071cd 	.word	0x080071cd
 8007144:	080071f5 	.word	0x080071f5
 8007148:	080071f5 	.word	0x080071f5
 800714c:	080071f5 	.word	0x080071f5
 8007150:	080071f5 	.word	0x080071f5
 8007154:	080071f5 	.word	0x080071f5
 8007158:	080071f5 	.word	0x080071f5
 800715c:	080071f5 	.word	0x080071f5
 8007160:	080071d5 	.word	0x080071d5
 8007164:	080071f5 	.word	0x080071f5
 8007168:	080071f5 	.word	0x080071f5
 800716c:	080071f5 	.word	0x080071f5
 8007170:	080071f5 	.word	0x080071f5
 8007174:	080071f5 	.word	0x080071f5
 8007178:	080071f5 	.word	0x080071f5
 800717c:	080071f5 	.word	0x080071f5
 8007180:	080071dd 	.word	0x080071dd
 8007184:	080071f5 	.word	0x080071f5
 8007188:	080071f5 	.word	0x080071f5
 800718c:	080071f5 	.word	0x080071f5
 8007190:	080071f5 	.word	0x080071f5
 8007194:	080071f5 	.word	0x080071f5
 8007198:	080071f5 	.word	0x080071f5
 800719c:	080071f5 	.word	0x080071f5
 80071a0:	080071e5 	.word	0x080071e5
 80071a4:	080071f5 	.word	0x080071f5
 80071a8:	080071f5 	.word	0x080071f5
 80071ac:	080071f5 	.word	0x080071f5
 80071b0:	080071f5 	.word	0x080071f5
 80071b4:	080071f5 	.word	0x080071f5
 80071b8:	080071f5 	.word	0x080071f5
 80071bc:	080071f5 	.word	0x080071f5
 80071c0:	080071ed 	.word	0x080071ed
 80071c4:	2301      	movs	r3, #1
 80071c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80071ca:	e1c0      	b.n	800754e <UART_SetConfig+0x7ae>
 80071cc:	2304      	movs	r3, #4
 80071ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80071d2:	e1bc      	b.n	800754e <UART_SetConfig+0x7ae>
 80071d4:	2308      	movs	r3, #8
 80071d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80071da:	e1b8      	b.n	800754e <UART_SetConfig+0x7ae>
 80071dc:	2310      	movs	r3, #16
 80071de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80071e2:	e1b4      	b.n	800754e <UART_SetConfig+0x7ae>
 80071e4:	2320      	movs	r3, #32
 80071e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80071ea:	e1b0      	b.n	800754e <UART_SetConfig+0x7ae>
 80071ec:	2340      	movs	r3, #64	@ 0x40
 80071ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80071f2:	e1ac      	b.n	800754e <UART_SetConfig+0x7ae>
 80071f4:	2380      	movs	r3, #128	@ 0x80
 80071f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80071fa:	e1a8      	b.n	800754e <UART_SetConfig+0x7ae>
 80071fc:	697b      	ldr	r3, [r7, #20]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	4a75      	ldr	r2, [pc, #468]	@ (80073d8 <UART_SetConfig+0x638>)
 8007202:	4293      	cmp	r3, r2
 8007204:	d130      	bne.n	8007268 <UART_SetConfig+0x4c8>
 8007206:	4b73      	ldr	r3, [pc, #460]	@ (80073d4 <UART_SetConfig+0x634>)
 8007208:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800720a:	f003 0307 	and.w	r3, r3, #7
 800720e:	2b05      	cmp	r3, #5
 8007210:	d826      	bhi.n	8007260 <UART_SetConfig+0x4c0>
 8007212:	a201      	add	r2, pc, #4	@ (adr r2, 8007218 <UART_SetConfig+0x478>)
 8007214:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007218:	08007231 	.word	0x08007231
 800721c:	08007239 	.word	0x08007239
 8007220:	08007241 	.word	0x08007241
 8007224:	08007249 	.word	0x08007249
 8007228:	08007251 	.word	0x08007251
 800722c:	08007259 	.word	0x08007259
 8007230:	2300      	movs	r3, #0
 8007232:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007236:	e18a      	b.n	800754e <UART_SetConfig+0x7ae>
 8007238:	2304      	movs	r3, #4
 800723a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800723e:	e186      	b.n	800754e <UART_SetConfig+0x7ae>
 8007240:	2308      	movs	r3, #8
 8007242:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007246:	e182      	b.n	800754e <UART_SetConfig+0x7ae>
 8007248:	2310      	movs	r3, #16
 800724a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800724e:	e17e      	b.n	800754e <UART_SetConfig+0x7ae>
 8007250:	2320      	movs	r3, #32
 8007252:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007256:	e17a      	b.n	800754e <UART_SetConfig+0x7ae>
 8007258:	2340      	movs	r3, #64	@ 0x40
 800725a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800725e:	e176      	b.n	800754e <UART_SetConfig+0x7ae>
 8007260:	2380      	movs	r3, #128	@ 0x80
 8007262:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007266:	e172      	b.n	800754e <UART_SetConfig+0x7ae>
 8007268:	697b      	ldr	r3, [r7, #20]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	4a5b      	ldr	r2, [pc, #364]	@ (80073dc <UART_SetConfig+0x63c>)
 800726e:	4293      	cmp	r3, r2
 8007270:	d130      	bne.n	80072d4 <UART_SetConfig+0x534>
 8007272:	4b58      	ldr	r3, [pc, #352]	@ (80073d4 <UART_SetConfig+0x634>)
 8007274:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007276:	f003 0307 	and.w	r3, r3, #7
 800727a:	2b05      	cmp	r3, #5
 800727c:	d826      	bhi.n	80072cc <UART_SetConfig+0x52c>
 800727e:	a201      	add	r2, pc, #4	@ (adr r2, 8007284 <UART_SetConfig+0x4e4>)
 8007280:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007284:	0800729d 	.word	0x0800729d
 8007288:	080072a5 	.word	0x080072a5
 800728c:	080072ad 	.word	0x080072ad
 8007290:	080072b5 	.word	0x080072b5
 8007294:	080072bd 	.word	0x080072bd
 8007298:	080072c5 	.word	0x080072c5
 800729c:	2300      	movs	r3, #0
 800729e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80072a2:	e154      	b.n	800754e <UART_SetConfig+0x7ae>
 80072a4:	2304      	movs	r3, #4
 80072a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80072aa:	e150      	b.n	800754e <UART_SetConfig+0x7ae>
 80072ac:	2308      	movs	r3, #8
 80072ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80072b2:	e14c      	b.n	800754e <UART_SetConfig+0x7ae>
 80072b4:	2310      	movs	r3, #16
 80072b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80072ba:	e148      	b.n	800754e <UART_SetConfig+0x7ae>
 80072bc:	2320      	movs	r3, #32
 80072be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80072c2:	e144      	b.n	800754e <UART_SetConfig+0x7ae>
 80072c4:	2340      	movs	r3, #64	@ 0x40
 80072c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80072ca:	e140      	b.n	800754e <UART_SetConfig+0x7ae>
 80072cc:	2380      	movs	r3, #128	@ 0x80
 80072ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80072d2:	e13c      	b.n	800754e <UART_SetConfig+0x7ae>
 80072d4:	697b      	ldr	r3, [r7, #20]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	4a41      	ldr	r2, [pc, #260]	@ (80073e0 <UART_SetConfig+0x640>)
 80072da:	4293      	cmp	r3, r2
 80072dc:	f040 8082 	bne.w	80073e4 <UART_SetConfig+0x644>
 80072e0:	4b3c      	ldr	r3, [pc, #240]	@ (80073d4 <UART_SetConfig+0x634>)
 80072e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80072e4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80072e8:	2b28      	cmp	r3, #40	@ 0x28
 80072ea:	d86d      	bhi.n	80073c8 <UART_SetConfig+0x628>
 80072ec:	a201      	add	r2, pc, #4	@ (adr r2, 80072f4 <UART_SetConfig+0x554>)
 80072ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072f2:	bf00      	nop
 80072f4:	08007399 	.word	0x08007399
 80072f8:	080073c9 	.word	0x080073c9
 80072fc:	080073c9 	.word	0x080073c9
 8007300:	080073c9 	.word	0x080073c9
 8007304:	080073c9 	.word	0x080073c9
 8007308:	080073c9 	.word	0x080073c9
 800730c:	080073c9 	.word	0x080073c9
 8007310:	080073c9 	.word	0x080073c9
 8007314:	080073a1 	.word	0x080073a1
 8007318:	080073c9 	.word	0x080073c9
 800731c:	080073c9 	.word	0x080073c9
 8007320:	080073c9 	.word	0x080073c9
 8007324:	080073c9 	.word	0x080073c9
 8007328:	080073c9 	.word	0x080073c9
 800732c:	080073c9 	.word	0x080073c9
 8007330:	080073c9 	.word	0x080073c9
 8007334:	080073a9 	.word	0x080073a9
 8007338:	080073c9 	.word	0x080073c9
 800733c:	080073c9 	.word	0x080073c9
 8007340:	080073c9 	.word	0x080073c9
 8007344:	080073c9 	.word	0x080073c9
 8007348:	080073c9 	.word	0x080073c9
 800734c:	080073c9 	.word	0x080073c9
 8007350:	080073c9 	.word	0x080073c9
 8007354:	080073b1 	.word	0x080073b1
 8007358:	080073c9 	.word	0x080073c9
 800735c:	080073c9 	.word	0x080073c9
 8007360:	080073c9 	.word	0x080073c9
 8007364:	080073c9 	.word	0x080073c9
 8007368:	080073c9 	.word	0x080073c9
 800736c:	080073c9 	.word	0x080073c9
 8007370:	080073c9 	.word	0x080073c9
 8007374:	080073b9 	.word	0x080073b9
 8007378:	080073c9 	.word	0x080073c9
 800737c:	080073c9 	.word	0x080073c9
 8007380:	080073c9 	.word	0x080073c9
 8007384:	080073c9 	.word	0x080073c9
 8007388:	080073c9 	.word	0x080073c9
 800738c:	080073c9 	.word	0x080073c9
 8007390:	080073c9 	.word	0x080073c9
 8007394:	080073c1 	.word	0x080073c1
 8007398:	2301      	movs	r3, #1
 800739a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800739e:	e0d6      	b.n	800754e <UART_SetConfig+0x7ae>
 80073a0:	2304      	movs	r3, #4
 80073a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80073a6:	e0d2      	b.n	800754e <UART_SetConfig+0x7ae>
 80073a8:	2308      	movs	r3, #8
 80073aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80073ae:	e0ce      	b.n	800754e <UART_SetConfig+0x7ae>
 80073b0:	2310      	movs	r3, #16
 80073b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80073b6:	e0ca      	b.n	800754e <UART_SetConfig+0x7ae>
 80073b8:	2320      	movs	r3, #32
 80073ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80073be:	e0c6      	b.n	800754e <UART_SetConfig+0x7ae>
 80073c0:	2340      	movs	r3, #64	@ 0x40
 80073c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80073c6:	e0c2      	b.n	800754e <UART_SetConfig+0x7ae>
 80073c8:	2380      	movs	r3, #128	@ 0x80
 80073ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80073ce:	e0be      	b.n	800754e <UART_SetConfig+0x7ae>
 80073d0:	40011400 	.word	0x40011400
 80073d4:	58024400 	.word	0x58024400
 80073d8:	40007800 	.word	0x40007800
 80073dc:	40007c00 	.word	0x40007c00
 80073e0:	40011800 	.word	0x40011800
 80073e4:	697b      	ldr	r3, [r7, #20]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	4aad      	ldr	r2, [pc, #692]	@ (80076a0 <UART_SetConfig+0x900>)
 80073ea:	4293      	cmp	r3, r2
 80073ec:	d176      	bne.n	80074dc <UART_SetConfig+0x73c>
 80073ee:	4bad      	ldr	r3, [pc, #692]	@ (80076a4 <UART_SetConfig+0x904>)
 80073f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80073f2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80073f6:	2b28      	cmp	r3, #40	@ 0x28
 80073f8:	d86c      	bhi.n	80074d4 <UART_SetConfig+0x734>
 80073fa:	a201      	add	r2, pc, #4	@ (adr r2, 8007400 <UART_SetConfig+0x660>)
 80073fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007400:	080074a5 	.word	0x080074a5
 8007404:	080074d5 	.word	0x080074d5
 8007408:	080074d5 	.word	0x080074d5
 800740c:	080074d5 	.word	0x080074d5
 8007410:	080074d5 	.word	0x080074d5
 8007414:	080074d5 	.word	0x080074d5
 8007418:	080074d5 	.word	0x080074d5
 800741c:	080074d5 	.word	0x080074d5
 8007420:	080074ad 	.word	0x080074ad
 8007424:	080074d5 	.word	0x080074d5
 8007428:	080074d5 	.word	0x080074d5
 800742c:	080074d5 	.word	0x080074d5
 8007430:	080074d5 	.word	0x080074d5
 8007434:	080074d5 	.word	0x080074d5
 8007438:	080074d5 	.word	0x080074d5
 800743c:	080074d5 	.word	0x080074d5
 8007440:	080074b5 	.word	0x080074b5
 8007444:	080074d5 	.word	0x080074d5
 8007448:	080074d5 	.word	0x080074d5
 800744c:	080074d5 	.word	0x080074d5
 8007450:	080074d5 	.word	0x080074d5
 8007454:	080074d5 	.word	0x080074d5
 8007458:	080074d5 	.word	0x080074d5
 800745c:	080074d5 	.word	0x080074d5
 8007460:	080074bd 	.word	0x080074bd
 8007464:	080074d5 	.word	0x080074d5
 8007468:	080074d5 	.word	0x080074d5
 800746c:	080074d5 	.word	0x080074d5
 8007470:	080074d5 	.word	0x080074d5
 8007474:	080074d5 	.word	0x080074d5
 8007478:	080074d5 	.word	0x080074d5
 800747c:	080074d5 	.word	0x080074d5
 8007480:	080074c5 	.word	0x080074c5
 8007484:	080074d5 	.word	0x080074d5
 8007488:	080074d5 	.word	0x080074d5
 800748c:	080074d5 	.word	0x080074d5
 8007490:	080074d5 	.word	0x080074d5
 8007494:	080074d5 	.word	0x080074d5
 8007498:	080074d5 	.word	0x080074d5
 800749c:	080074d5 	.word	0x080074d5
 80074a0:	080074cd 	.word	0x080074cd
 80074a4:	2301      	movs	r3, #1
 80074a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80074aa:	e050      	b.n	800754e <UART_SetConfig+0x7ae>
 80074ac:	2304      	movs	r3, #4
 80074ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80074b2:	e04c      	b.n	800754e <UART_SetConfig+0x7ae>
 80074b4:	2308      	movs	r3, #8
 80074b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80074ba:	e048      	b.n	800754e <UART_SetConfig+0x7ae>
 80074bc:	2310      	movs	r3, #16
 80074be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80074c2:	e044      	b.n	800754e <UART_SetConfig+0x7ae>
 80074c4:	2320      	movs	r3, #32
 80074c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80074ca:	e040      	b.n	800754e <UART_SetConfig+0x7ae>
 80074cc:	2340      	movs	r3, #64	@ 0x40
 80074ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80074d2:	e03c      	b.n	800754e <UART_SetConfig+0x7ae>
 80074d4:	2380      	movs	r3, #128	@ 0x80
 80074d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80074da:	e038      	b.n	800754e <UART_SetConfig+0x7ae>
 80074dc:	697b      	ldr	r3, [r7, #20]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	4a71      	ldr	r2, [pc, #452]	@ (80076a8 <UART_SetConfig+0x908>)
 80074e2:	4293      	cmp	r3, r2
 80074e4:	d130      	bne.n	8007548 <UART_SetConfig+0x7a8>
 80074e6:	4b6f      	ldr	r3, [pc, #444]	@ (80076a4 <UART_SetConfig+0x904>)
 80074e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80074ea:	f003 0307 	and.w	r3, r3, #7
 80074ee:	2b05      	cmp	r3, #5
 80074f0:	d826      	bhi.n	8007540 <UART_SetConfig+0x7a0>
 80074f2:	a201      	add	r2, pc, #4	@ (adr r2, 80074f8 <UART_SetConfig+0x758>)
 80074f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074f8:	08007511 	.word	0x08007511
 80074fc:	08007519 	.word	0x08007519
 8007500:	08007521 	.word	0x08007521
 8007504:	08007529 	.word	0x08007529
 8007508:	08007531 	.word	0x08007531
 800750c:	08007539 	.word	0x08007539
 8007510:	2302      	movs	r3, #2
 8007512:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007516:	e01a      	b.n	800754e <UART_SetConfig+0x7ae>
 8007518:	2304      	movs	r3, #4
 800751a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800751e:	e016      	b.n	800754e <UART_SetConfig+0x7ae>
 8007520:	2308      	movs	r3, #8
 8007522:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007526:	e012      	b.n	800754e <UART_SetConfig+0x7ae>
 8007528:	2310      	movs	r3, #16
 800752a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800752e:	e00e      	b.n	800754e <UART_SetConfig+0x7ae>
 8007530:	2320      	movs	r3, #32
 8007532:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007536:	e00a      	b.n	800754e <UART_SetConfig+0x7ae>
 8007538:	2340      	movs	r3, #64	@ 0x40
 800753a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800753e:	e006      	b.n	800754e <UART_SetConfig+0x7ae>
 8007540:	2380      	movs	r3, #128	@ 0x80
 8007542:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007546:	e002      	b.n	800754e <UART_SetConfig+0x7ae>
 8007548:	2380      	movs	r3, #128	@ 0x80
 800754a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800754e:	697b      	ldr	r3, [r7, #20]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	4a55      	ldr	r2, [pc, #340]	@ (80076a8 <UART_SetConfig+0x908>)
 8007554:	4293      	cmp	r3, r2
 8007556:	f040 80f8 	bne.w	800774a <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800755a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800755e:	2b20      	cmp	r3, #32
 8007560:	dc46      	bgt.n	80075f0 <UART_SetConfig+0x850>
 8007562:	2b02      	cmp	r3, #2
 8007564:	db75      	blt.n	8007652 <UART_SetConfig+0x8b2>
 8007566:	3b02      	subs	r3, #2
 8007568:	2b1e      	cmp	r3, #30
 800756a:	d872      	bhi.n	8007652 <UART_SetConfig+0x8b2>
 800756c:	a201      	add	r2, pc, #4	@ (adr r2, 8007574 <UART_SetConfig+0x7d4>)
 800756e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007572:	bf00      	nop
 8007574:	080075f7 	.word	0x080075f7
 8007578:	08007653 	.word	0x08007653
 800757c:	080075ff 	.word	0x080075ff
 8007580:	08007653 	.word	0x08007653
 8007584:	08007653 	.word	0x08007653
 8007588:	08007653 	.word	0x08007653
 800758c:	0800760f 	.word	0x0800760f
 8007590:	08007653 	.word	0x08007653
 8007594:	08007653 	.word	0x08007653
 8007598:	08007653 	.word	0x08007653
 800759c:	08007653 	.word	0x08007653
 80075a0:	08007653 	.word	0x08007653
 80075a4:	08007653 	.word	0x08007653
 80075a8:	08007653 	.word	0x08007653
 80075ac:	0800761f 	.word	0x0800761f
 80075b0:	08007653 	.word	0x08007653
 80075b4:	08007653 	.word	0x08007653
 80075b8:	08007653 	.word	0x08007653
 80075bc:	08007653 	.word	0x08007653
 80075c0:	08007653 	.word	0x08007653
 80075c4:	08007653 	.word	0x08007653
 80075c8:	08007653 	.word	0x08007653
 80075cc:	08007653 	.word	0x08007653
 80075d0:	08007653 	.word	0x08007653
 80075d4:	08007653 	.word	0x08007653
 80075d8:	08007653 	.word	0x08007653
 80075dc:	08007653 	.word	0x08007653
 80075e0:	08007653 	.word	0x08007653
 80075e4:	08007653 	.word	0x08007653
 80075e8:	08007653 	.word	0x08007653
 80075ec:	08007645 	.word	0x08007645
 80075f0:	2b40      	cmp	r3, #64	@ 0x40
 80075f2:	d02a      	beq.n	800764a <UART_SetConfig+0x8aa>
 80075f4:	e02d      	b.n	8007652 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80075f6:	f7fd fcb7 	bl	8004f68 <HAL_RCCEx_GetD3PCLK1Freq>
 80075fa:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80075fc:	e02f      	b.n	800765e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80075fe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007602:	4618      	mov	r0, r3
 8007604:	f7fd fcc6 	bl	8004f94 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007608:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800760a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800760c:	e027      	b.n	800765e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800760e:	f107 0318 	add.w	r3, r7, #24
 8007612:	4618      	mov	r0, r3
 8007614:	f7fd fe12 	bl	800523c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007618:	69fb      	ldr	r3, [r7, #28]
 800761a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800761c:	e01f      	b.n	800765e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800761e:	4b21      	ldr	r3, [pc, #132]	@ (80076a4 <UART_SetConfig+0x904>)
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	f003 0320 	and.w	r3, r3, #32
 8007626:	2b00      	cmp	r3, #0
 8007628:	d009      	beq.n	800763e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800762a:	4b1e      	ldr	r3, [pc, #120]	@ (80076a4 <UART_SetConfig+0x904>)
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	08db      	lsrs	r3, r3, #3
 8007630:	f003 0303 	and.w	r3, r3, #3
 8007634:	4a1d      	ldr	r2, [pc, #116]	@ (80076ac <UART_SetConfig+0x90c>)
 8007636:	fa22 f303 	lsr.w	r3, r2, r3
 800763a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800763c:	e00f      	b.n	800765e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800763e:	4b1b      	ldr	r3, [pc, #108]	@ (80076ac <UART_SetConfig+0x90c>)
 8007640:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007642:	e00c      	b.n	800765e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007644:	4b1a      	ldr	r3, [pc, #104]	@ (80076b0 <UART_SetConfig+0x910>)
 8007646:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007648:	e009      	b.n	800765e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800764a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800764e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007650:	e005      	b.n	800765e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8007652:	2300      	movs	r3, #0
 8007654:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8007656:	2301      	movs	r3, #1
 8007658:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800765c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800765e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007660:	2b00      	cmp	r3, #0
 8007662:	f000 81ee 	beq.w	8007a42 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007666:	697b      	ldr	r3, [r7, #20]
 8007668:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800766a:	4a12      	ldr	r2, [pc, #72]	@ (80076b4 <UART_SetConfig+0x914>)
 800766c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007670:	461a      	mov	r2, r3
 8007672:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007674:	fbb3 f3f2 	udiv	r3, r3, r2
 8007678:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800767a:	697b      	ldr	r3, [r7, #20]
 800767c:	685a      	ldr	r2, [r3, #4]
 800767e:	4613      	mov	r3, r2
 8007680:	005b      	lsls	r3, r3, #1
 8007682:	4413      	add	r3, r2
 8007684:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007686:	429a      	cmp	r2, r3
 8007688:	d305      	bcc.n	8007696 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800768a:	697b      	ldr	r3, [r7, #20]
 800768c:	685b      	ldr	r3, [r3, #4]
 800768e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007690:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007692:	429a      	cmp	r2, r3
 8007694:	d910      	bls.n	80076b8 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8007696:	2301      	movs	r3, #1
 8007698:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800769c:	e1d1      	b.n	8007a42 <UART_SetConfig+0xca2>
 800769e:	bf00      	nop
 80076a0:	40011c00 	.word	0x40011c00
 80076a4:	58024400 	.word	0x58024400
 80076a8:	58000c00 	.word	0x58000c00
 80076ac:	03d09000 	.word	0x03d09000
 80076b0:	003d0900 	.word	0x003d0900
 80076b4:	0800d198 	.word	0x0800d198
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80076b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80076ba:	2200      	movs	r2, #0
 80076bc:	60bb      	str	r3, [r7, #8]
 80076be:	60fa      	str	r2, [r7, #12]
 80076c0:	697b      	ldr	r3, [r7, #20]
 80076c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076c4:	4ac0      	ldr	r2, [pc, #768]	@ (80079c8 <UART_SetConfig+0xc28>)
 80076c6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80076ca:	b29b      	uxth	r3, r3
 80076cc:	2200      	movs	r2, #0
 80076ce:	603b      	str	r3, [r7, #0]
 80076d0:	607a      	str	r2, [r7, #4]
 80076d2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80076d6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80076da:	f7f8 fed1 	bl	8000480 <__aeabi_uldivmod>
 80076de:	4602      	mov	r2, r0
 80076e0:	460b      	mov	r3, r1
 80076e2:	4610      	mov	r0, r2
 80076e4:	4619      	mov	r1, r3
 80076e6:	f04f 0200 	mov.w	r2, #0
 80076ea:	f04f 0300 	mov.w	r3, #0
 80076ee:	020b      	lsls	r3, r1, #8
 80076f0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80076f4:	0202      	lsls	r2, r0, #8
 80076f6:	6979      	ldr	r1, [r7, #20]
 80076f8:	6849      	ldr	r1, [r1, #4]
 80076fa:	0849      	lsrs	r1, r1, #1
 80076fc:	2000      	movs	r0, #0
 80076fe:	460c      	mov	r4, r1
 8007700:	4605      	mov	r5, r0
 8007702:	eb12 0804 	adds.w	r8, r2, r4
 8007706:	eb43 0905 	adc.w	r9, r3, r5
 800770a:	697b      	ldr	r3, [r7, #20]
 800770c:	685b      	ldr	r3, [r3, #4]
 800770e:	2200      	movs	r2, #0
 8007710:	469a      	mov	sl, r3
 8007712:	4693      	mov	fp, r2
 8007714:	4652      	mov	r2, sl
 8007716:	465b      	mov	r3, fp
 8007718:	4640      	mov	r0, r8
 800771a:	4649      	mov	r1, r9
 800771c:	f7f8 feb0 	bl	8000480 <__aeabi_uldivmod>
 8007720:	4602      	mov	r2, r0
 8007722:	460b      	mov	r3, r1
 8007724:	4613      	mov	r3, r2
 8007726:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007728:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800772a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800772e:	d308      	bcc.n	8007742 <UART_SetConfig+0x9a2>
 8007730:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007732:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007736:	d204      	bcs.n	8007742 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8007738:	697b      	ldr	r3, [r7, #20]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800773e:	60da      	str	r2, [r3, #12]
 8007740:	e17f      	b.n	8007a42 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8007742:	2301      	movs	r3, #1
 8007744:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8007748:	e17b      	b.n	8007a42 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800774a:	697b      	ldr	r3, [r7, #20]
 800774c:	69db      	ldr	r3, [r3, #28]
 800774e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007752:	f040 80bd 	bne.w	80078d0 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8007756:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800775a:	2b20      	cmp	r3, #32
 800775c:	dc48      	bgt.n	80077f0 <UART_SetConfig+0xa50>
 800775e:	2b00      	cmp	r3, #0
 8007760:	db7b      	blt.n	800785a <UART_SetConfig+0xaba>
 8007762:	2b20      	cmp	r3, #32
 8007764:	d879      	bhi.n	800785a <UART_SetConfig+0xaba>
 8007766:	a201      	add	r2, pc, #4	@ (adr r2, 800776c <UART_SetConfig+0x9cc>)
 8007768:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800776c:	080077f7 	.word	0x080077f7
 8007770:	080077ff 	.word	0x080077ff
 8007774:	0800785b 	.word	0x0800785b
 8007778:	0800785b 	.word	0x0800785b
 800777c:	08007807 	.word	0x08007807
 8007780:	0800785b 	.word	0x0800785b
 8007784:	0800785b 	.word	0x0800785b
 8007788:	0800785b 	.word	0x0800785b
 800778c:	08007817 	.word	0x08007817
 8007790:	0800785b 	.word	0x0800785b
 8007794:	0800785b 	.word	0x0800785b
 8007798:	0800785b 	.word	0x0800785b
 800779c:	0800785b 	.word	0x0800785b
 80077a0:	0800785b 	.word	0x0800785b
 80077a4:	0800785b 	.word	0x0800785b
 80077a8:	0800785b 	.word	0x0800785b
 80077ac:	08007827 	.word	0x08007827
 80077b0:	0800785b 	.word	0x0800785b
 80077b4:	0800785b 	.word	0x0800785b
 80077b8:	0800785b 	.word	0x0800785b
 80077bc:	0800785b 	.word	0x0800785b
 80077c0:	0800785b 	.word	0x0800785b
 80077c4:	0800785b 	.word	0x0800785b
 80077c8:	0800785b 	.word	0x0800785b
 80077cc:	0800785b 	.word	0x0800785b
 80077d0:	0800785b 	.word	0x0800785b
 80077d4:	0800785b 	.word	0x0800785b
 80077d8:	0800785b 	.word	0x0800785b
 80077dc:	0800785b 	.word	0x0800785b
 80077e0:	0800785b 	.word	0x0800785b
 80077e4:	0800785b 	.word	0x0800785b
 80077e8:	0800785b 	.word	0x0800785b
 80077ec:	0800784d 	.word	0x0800784d
 80077f0:	2b40      	cmp	r3, #64	@ 0x40
 80077f2:	d02e      	beq.n	8007852 <UART_SetConfig+0xab2>
 80077f4:	e031      	b.n	800785a <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80077f6:	f7fc f9eb 	bl	8003bd0 <HAL_RCC_GetPCLK1Freq>
 80077fa:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80077fc:	e033      	b.n	8007866 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80077fe:	f7fc f9fd 	bl	8003bfc <HAL_RCC_GetPCLK2Freq>
 8007802:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007804:	e02f      	b.n	8007866 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007806:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800780a:	4618      	mov	r0, r3
 800780c:	f7fd fbc2 	bl	8004f94 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007810:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007812:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007814:	e027      	b.n	8007866 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007816:	f107 0318 	add.w	r3, r7, #24
 800781a:	4618      	mov	r0, r3
 800781c:	f7fd fd0e 	bl	800523c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007820:	69fb      	ldr	r3, [r7, #28]
 8007822:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007824:	e01f      	b.n	8007866 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007826:	4b69      	ldr	r3, [pc, #420]	@ (80079cc <UART_SetConfig+0xc2c>)
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	f003 0320 	and.w	r3, r3, #32
 800782e:	2b00      	cmp	r3, #0
 8007830:	d009      	beq.n	8007846 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007832:	4b66      	ldr	r3, [pc, #408]	@ (80079cc <UART_SetConfig+0xc2c>)
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	08db      	lsrs	r3, r3, #3
 8007838:	f003 0303 	and.w	r3, r3, #3
 800783c:	4a64      	ldr	r2, [pc, #400]	@ (80079d0 <UART_SetConfig+0xc30>)
 800783e:	fa22 f303 	lsr.w	r3, r2, r3
 8007842:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007844:	e00f      	b.n	8007866 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8007846:	4b62      	ldr	r3, [pc, #392]	@ (80079d0 <UART_SetConfig+0xc30>)
 8007848:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800784a:	e00c      	b.n	8007866 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800784c:	4b61      	ldr	r3, [pc, #388]	@ (80079d4 <UART_SetConfig+0xc34>)
 800784e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007850:	e009      	b.n	8007866 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007852:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007856:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007858:	e005      	b.n	8007866 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800785a:	2300      	movs	r3, #0
 800785c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800785e:	2301      	movs	r3, #1
 8007860:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8007864:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007866:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007868:	2b00      	cmp	r3, #0
 800786a:	f000 80ea 	beq.w	8007a42 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800786e:	697b      	ldr	r3, [r7, #20]
 8007870:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007872:	4a55      	ldr	r2, [pc, #340]	@ (80079c8 <UART_SetConfig+0xc28>)
 8007874:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007878:	461a      	mov	r2, r3
 800787a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800787c:	fbb3 f3f2 	udiv	r3, r3, r2
 8007880:	005a      	lsls	r2, r3, #1
 8007882:	697b      	ldr	r3, [r7, #20]
 8007884:	685b      	ldr	r3, [r3, #4]
 8007886:	085b      	lsrs	r3, r3, #1
 8007888:	441a      	add	r2, r3
 800788a:	697b      	ldr	r3, [r7, #20]
 800788c:	685b      	ldr	r3, [r3, #4]
 800788e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007892:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007894:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007896:	2b0f      	cmp	r3, #15
 8007898:	d916      	bls.n	80078c8 <UART_SetConfig+0xb28>
 800789a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800789c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80078a0:	d212      	bcs.n	80078c8 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80078a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078a4:	b29b      	uxth	r3, r3
 80078a6:	f023 030f 	bic.w	r3, r3, #15
 80078aa:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80078ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078ae:	085b      	lsrs	r3, r3, #1
 80078b0:	b29b      	uxth	r3, r3
 80078b2:	f003 0307 	and.w	r3, r3, #7
 80078b6:	b29a      	uxth	r2, r3
 80078b8:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80078ba:	4313      	orrs	r3, r2
 80078bc:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 80078be:	697b      	ldr	r3, [r7, #20]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80078c4:	60da      	str	r2, [r3, #12]
 80078c6:	e0bc      	b.n	8007a42 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 80078c8:	2301      	movs	r3, #1
 80078ca:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80078ce:	e0b8      	b.n	8007a42 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 80078d0:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80078d4:	2b20      	cmp	r3, #32
 80078d6:	dc4b      	bgt.n	8007970 <UART_SetConfig+0xbd0>
 80078d8:	2b00      	cmp	r3, #0
 80078da:	f2c0 8087 	blt.w	80079ec <UART_SetConfig+0xc4c>
 80078de:	2b20      	cmp	r3, #32
 80078e0:	f200 8084 	bhi.w	80079ec <UART_SetConfig+0xc4c>
 80078e4:	a201      	add	r2, pc, #4	@ (adr r2, 80078ec <UART_SetConfig+0xb4c>)
 80078e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078ea:	bf00      	nop
 80078ec:	08007977 	.word	0x08007977
 80078f0:	0800797f 	.word	0x0800797f
 80078f4:	080079ed 	.word	0x080079ed
 80078f8:	080079ed 	.word	0x080079ed
 80078fc:	08007987 	.word	0x08007987
 8007900:	080079ed 	.word	0x080079ed
 8007904:	080079ed 	.word	0x080079ed
 8007908:	080079ed 	.word	0x080079ed
 800790c:	08007997 	.word	0x08007997
 8007910:	080079ed 	.word	0x080079ed
 8007914:	080079ed 	.word	0x080079ed
 8007918:	080079ed 	.word	0x080079ed
 800791c:	080079ed 	.word	0x080079ed
 8007920:	080079ed 	.word	0x080079ed
 8007924:	080079ed 	.word	0x080079ed
 8007928:	080079ed 	.word	0x080079ed
 800792c:	080079a7 	.word	0x080079a7
 8007930:	080079ed 	.word	0x080079ed
 8007934:	080079ed 	.word	0x080079ed
 8007938:	080079ed 	.word	0x080079ed
 800793c:	080079ed 	.word	0x080079ed
 8007940:	080079ed 	.word	0x080079ed
 8007944:	080079ed 	.word	0x080079ed
 8007948:	080079ed 	.word	0x080079ed
 800794c:	080079ed 	.word	0x080079ed
 8007950:	080079ed 	.word	0x080079ed
 8007954:	080079ed 	.word	0x080079ed
 8007958:	080079ed 	.word	0x080079ed
 800795c:	080079ed 	.word	0x080079ed
 8007960:	080079ed 	.word	0x080079ed
 8007964:	080079ed 	.word	0x080079ed
 8007968:	080079ed 	.word	0x080079ed
 800796c:	080079df 	.word	0x080079df
 8007970:	2b40      	cmp	r3, #64	@ 0x40
 8007972:	d037      	beq.n	80079e4 <UART_SetConfig+0xc44>
 8007974:	e03a      	b.n	80079ec <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007976:	f7fc f92b 	bl	8003bd0 <HAL_RCC_GetPCLK1Freq>
 800797a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800797c:	e03c      	b.n	80079f8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800797e:	f7fc f93d 	bl	8003bfc <HAL_RCC_GetPCLK2Freq>
 8007982:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007984:	e038      	b.n	80079f8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007986:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800798a:	4618      	mov	r0, r3
 800798c:	f7fd fb02 	bl	8004f94 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007990:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007992:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007994:	e030      	b.n	80079f8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007996:	f107 0318 	add.w	r3, r7, #24
 800799a:	4618      	mov	r0, r3
 800799c:	f7fd fc4e 	bl	800523c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80079a0:	69fb      	ldr	r3, [r7, #28]
 80079a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80079a4:	e028      	b.n	80079f8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80079a6:	4b09      	ldr	r3, [pc, #36]	@ (80079cc <UART_SetConfig+0xc2c>)
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	f003 0320 	and.w	r3, r3, #32
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d012      	beq.n	80079d8 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80079b2:	4b06      	ldr	r3, [pc, #24]	@ (80079cc <UART_SetConfig+0xc2c>)
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	08db      	lsrs	r3, r3, #3
 80079b8:	f003 0303 	and.w	r3, r3, #3
 80079bc:	4a04      	ldr	r2, [pc, #16]	@ (80079d0 <UART_SetConfig+0xc30>)
 80079be:	fa22 f303 	lsr.w	r3, r2, r3
 80079c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80079c4:	e018      	b.n	80079f8 <UART_SetConfig+0xc58>
 80079c6:	bf00      	nop
 80079c8:	0800d198 	.word	0x0800d198
 80079cc:	58024400 	.word	0x58024400
 80079d0:	03d09000 	.word	0x03d09000
 80079d4:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 80079d8:	4b24      	ldr	r3, [pc, #144]	@ (8007a6c <UART_SetConfig+0xccc>)
 80079da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80079dc:	e00c      	b.n	80079f8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80079de:	4b24      	ldr	r3, [pc, #144]	@ (8007a70 <UART_SetConfig+0xcd0>)
 80079e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80079e2:	e009      	b.n	80079f8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80079e4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80079e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80079ea:	e005      	b.n	80079f8 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 80079ec:	2300      	movs	r3, #0
 80079ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80079f0:	2301      	movs	r3, #1
 80079f2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80079f6:	bf00      	nop
    }

    if (pclk != 0U)
 80079f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d021      	beq.n	8007a42 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80079fe:	697b      	ldr	r3, [r7, #20]
 8007a00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a02:	4a1c      	ldr	r2, [pc, #112]	@ (8007a74 <UART_SetConfig+0xcd4>)
 8007a04:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007a08:	461a      	mov	r2, r3
 8007a0a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007a0c:	fbb3 f2f2 	udiv	r2, r3, r2
 8007a10:	697b      	ldr	r3, [r7, #20]
 8007a12:	685b      	ldr	r3, [r3, #4]
 8007a14:	085b      	lsrs	r3, r3, #1
 8007a16:	441a      	add	r2, r3
 8007a18:	697b      	ldr	r3, [r7, #20]
 8007a1a:	685b      	ldr	r3, [r3, #4]
 8007a1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a20:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007a22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a24:	2b0f      	cmp	r3, #15
 8007a26:	d909      	bls.n	8007a3c <UART_SetConfig+0xc9c>
 8007a28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a2a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007a2e:	d205      	bcs.n	8007a3c <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007a30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a32:	b29a      	uxth	r2, r3
 8007a34:	697b      	ldr	r3, [r7, #20]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	60da      	str	r2, [r3, #12]
 8007a3a:	e002      	b.n	8007a42 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8007a3c:	2301      	movs	r3, #1
 8007a3e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007a42:	697b      	ldr	r3, [r7, #20]
 8007a44:	2201      	movs	r2, #1
 8007a46:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8007a4a:	697b      	ldr	r3, [r7, #20]
 8007a4c:	2201      	movs	r2, #1
 8007a4e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007a52:	697b      	ldr	r3, [r7, #20]
 8007a54:	2200      	movs	r2, #0
 8007a56:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8007a58:	697b      	ldr	r3, [r7, #20]
 8007a5a:	2200      	movs	r2, #0
 8007a5c:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8007a5e:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8007a62:	4618      	mov	r0, r3
 8007a64:	3748      	adds	r7, #72	@ 0x48
 8007a66:	46bd      	mov	sp, r7
 8007a68:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007a6c:	03d09000 	.word	0x03d09000
 8007a70:	003d0900 	.word	0x003d0900
 8007a74:	0800d198 	.word	0x0800d198

08007a78 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007a78:	b480      	push	{r7}
 8007a7a:	b083      	sub	sp, #12
 8007a7c:	af00      	add	r7, sp, #0
 8007a7e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a84:	f003 0308 	and.w	r3, r3, #8
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d00a      	beq.n	8007aa2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	685b      	ldr	r3, [r3, #4]
 8007a92:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	430a      	orrs	r2, r1
 8007aa0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007aa6:	f003 0301 	and.w	r3, r3, #1
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d00a      	beq.n	8007ac4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	685b      	ldr	r3, [r3, #4]
 8007ab4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	430a      	orrs	r2, r1
 8007ac2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ac8:	f003 0302 	and.w	r3, r3, #2
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d00a      	beq.n	8007ae6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	685b      	ldr	r3, [r3, #4]
 8007ad6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	430a      	orrs	r2, r1
 8007ae4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007aea:	f003 0304 	and.w	r3, r3, #4
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d00a      	beq.n	8007b08 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	685b      	ldr	r3, [r3, #4]
 8007af8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	430a      	orrs	r2, r1
 8007b06:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b0c:	f003 0310 	and.w	r3, r3, #16
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d00a      	beq.n	8007b2a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	689b      	ldr	r3, [r3, #8]
 8007b1a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	430a      	orrs	r2, r1
 8007b28:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b2e:	f003 0320 	and.w	r3, r3, #32
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d00a      	beq.n	8007b4c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	689b      	ldr	r3, [r3, #8]
 8007b3c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	430a      	orrs	r2, r1
 8007b4a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d01a      	beq.n	8007b8e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	685b      	ldr	r3, [r3, #4]
 8007b5e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	430a      	orrs	r2, r1
 8007b6c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007b72:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007b76:	d10a      	bne.n	8007b8e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	685b      	ldr	r3, [r3, #4]
 8007b7e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	430a      	orrs	r2, r1
 8007b8c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b92:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d00a      	beq.n	8007bb0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	685b      	ldr	r3, [r3, #4]
 8007ba0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	430a      	orrs	r2, r1
 8007bae:	605a      	str	r2, [r3, #4]
  }
}
 8007bb0:	bf00      	nop
 8007bb2:	370c      	adds	r7, #12
 8007bb4:	46bd      	mov	sp, r7
 8007bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bba:	4770      	bx	lr

08007bbc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007bbc:	b580      	push	{r7, lr}
 8007bbe:	b098      	sub	sp, #96	@ 0x60
 8007bc0:	af02      	add	r7, sp, #8
 8007bc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	2200      	movs	r2, #0
 8007bc8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007bcc:	f7fa f992 	bl	8001ef4 <HAL_GetTick>
 8007bd0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	f003 0308 	and.w	r3, r3, #8
 8007bdc:	2b08      	cmp	r3, #8
 8007bde:	d12f      	bne.n	8007c40 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007be0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007be4:	9300      	str	r3, [sp, #0]
 8007be6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007be8:	2200      	movs	r2, #0
 8007bea:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007bee:	6878      	ldr	r0, [r7, #4]
 8007bf0:	f000 f88e 	bl	8007d10 <UART_WaitOnFlagUntilTimeout>
 8007bf4:	4603      	mov	r3, r0
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d022      	beq.n	8007c40 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c02:	e853 3f00 	ldrex	r3, [r3]
 8007c06:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007c08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007c0a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007c0e:	653b      	str	r3, [r7, #80]	@ 0x50
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	461a      	mov	r2, r3
 8007c16:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007c18:	647b      	str	r3, [r7, #68]	@ 0x44
 8007c1a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c1c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007c1e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007c20:	e841 2300 	strex	r3, r2, [r1]
 8007c24:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007c26:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d1e6      	bne.n	8007bfa <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	2220      	movs	r2, #32
 8007c30:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	2200      	movs	r2, #0
 8007c38:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007c3c:	2303      	movs	r3, #3
 8007c3e:	e063      	b.n	8007d08 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	f003 0304 	and.w	r3, r3, #4
 8007c4a:	2b04      	cmp	r3, #4
 8007c4c:	d149      	bne.n	8007ce2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007c4e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007c52:	9300      	str	r3, [sp, #0]
 8007c54:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007c56:	2200      	movs	r2, #0
 8007c58:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007c5c:	6878      	ldr	r0, [r7, #4]
 8007c5e:	f000 f857 	bl	8007d10 <UART_WaitOnFlagUntilTimeout>
 8007c62:	4603      	mov	r3, r0
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d03c      	beq.n	8007ce2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c70:	e853 3f00 	ldrex	r3, [r3]
 8007c74:	623b      	str	r3, [r7, #32]
   return(result);
 8007c76:	6a3b      	ldr	r3, [r7, #32]
 8007c78:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007c7c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	461a      	mov	r2, r3
 8007c84:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007c86:	633b      	str	r3, [r7, #48]	@ 0x30
 8007c88:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c8a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007c8c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007c8e:	e841 2300 	strex	r3, r2, [r1]
 8007c92:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007c94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d1e6      	bne.n	8007c68 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	3308      	adds	r3, #8
 8007ca0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ca2:	693b      	ldr	r3, [r7, #16]
 8007ca4:	e853 3f00 	ldrex	r3, [r3]
 8007ca8:	60fb      	str	r3, [r7, #12]
   return(result);
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	f023 0301 	bic.w	r3, r3, #1
 8007cb0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	3308      	adds	r3, #8
 8007cb8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007cba:	61fa      	str	r2, [r7, #28]
 8007cbc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cbe:	69b9      	ldr	r1, [r7, #24]
 8007cc0:	69fa      	ldr	r2, [r7, #28]
 8007cc2:	e841 2300 	strex	r3, r2, [r1]
 8007cc6:	617b      	str	r3, [r7, #20]
   return(result);
 8007cc8:	697b      	ldr	r3, [r7, #20]
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d1e5      	bne.n	8007c9a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	2220      	movs	r2, #32
 8007cd2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	2200      	movs	r2, #0
 8007cda:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007cde:	2303      	movs	r3, #3
 8007ce0:	e012      	b.n	8007d08 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	2220      	movs	r2, #32
 8007ce6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	2220      	movs	r2, #32
 8007cee:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	2200      	movs	r2, #0
 8007cf6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	2200      	movs	r2, #0
 8007cfc:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	2200      	movs	r2, #0
 8007d02:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007d06:	2300      	movs	r3, #0
}
 8007d08:	4618      	mov	r0, r3
 8007d0a:	3758      	adds	r7, #88	@ 0x58
 8007d0c:	46bd      	mov	sp, r7
 8007d0e:	bd80      	pop	{r7, pc}

08007d10 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007d10:	b580      	push	{r7, lr}
 8007d12:	b084      	sub	sp, #16
 8007d14:	af00      	add	r7, sp, #0
 8007d16:	60f8      	str	r0, [r7, #12]
 8007d18:	60b9      	str	r1, [r7, #8]
 8007d1a:	603b      	str	r3, [r7, #0]
 8007d1c:	4613      	mov	r3, r2
 8007d1e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007d20:	e04f      	b.n	8007dc2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007d22:	69bb      	ldr	r3, [r7, #24]
 8007d24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d28:	d04b      	beq.n	8007dc2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007d2a:	f7fa f8e3 	bl	8001ef4 <HAL_GetTick>
 8007d2e:	4602      	mov	r2, r0
 8007d30:	683b      	ldr	r3, [r7, #0]
 8007d32:	1ad3      	subs	r3, r2, r3
 8007d34:	69ba      	ldr	r2, [r7, #24]
 8007d36:	429a      	cmp	r2, r3
 8007d38:	d302      	bcc.n	8007d40 <UART_WaitOnFlagUntilTimeout+0x30>
 8007d3a:	69bb      	ldr	r3, [r7, #24]
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d101      	bne.n	8007d44 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007d40:	2303      	movs	r3, #3
 8007d42:	e04e      	b.n	8007de2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	f003 0304 	and.w	r3, r3, #4
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d037      	beq.n	8007dc2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007d52:	68bb      	ldr	r3, [r7, #8]
 8007d54:	2b80      	cmp	r3, #128	@ 0x80
 8007d56:	d034      	beq.n	8007dc2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007d58:	68bb      	ldr	r3, [r7, #8]
 8007d5a:	2b40      	cmp	r3, #64	@ 0x40
 8007d5c:	d031      	beq.n	8007dc2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	69db      	ldr	r3, [r3, #28]
 8007d64:	f003 0308 	and.w	r3, r3, #8
 8007d68:	2b08      	cmp	r3, #8
 8007d6a:	d110      	bne.n	8007d8e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	2208      	movs	r2, #8
 8007d72:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007d74:	68f8      	ldr	r0, [r7, #12]
 8007d76:	f000 f839 	bl	8007dec <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	2208      	movs	r2, #8
 8007d7e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	2200      	movs	r2, #0
 8007d86:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8007d8a:	2301      	movs	r3, #1
 8007d8c:	e029      	b.n	8007de2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	69db      	ldr	r3, [r3, #28]
 8007d94:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007d98:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007d9c:	d111      	bne.n	8007dc2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007da6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007da8:	68f8      	ldr	r0, [r7, #12]
 8007daa:	f000 f81f 	bl	8007dec <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	2220      	movs	r2, #32
 8007db2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	2200      	movs	r2, #0
 8007dba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8007dbe:	2303      	movs	r3, #3
 8007dc0:	e00f      	b.n	8007de2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	69da      	ldr	r2, [r3, #28]
 8007dc8:	68bb      	ldr	r3, [r7, #8]
 8007dca:	4013      	ands	r3, r2
 8007dcc:	68ba      	ldr	r2, [r7, #8]
 8007dce:	429a      	cmp	r2, r3
 8007dd0:	bf0c      	ite	eq
 8007dd2:	2301      	moveq	r3, #1
 8007dd4:	2300      	movne	r3, #0
 8007dd6:	b2db      	uxtb	r3, r3
 8007dd8:	461a      	mov	r2, r3
 8007dda:	79fb      	ldrb	r3, [r7, #7]
 8007ddc:	429a      	cmp	r2, r3
 8007dde:	d0a0      	beq.n	8007d22 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007de0:	2300      	movs	r3, #0
}
 8007de2:	4618      	mov	r0, r3
 8007de4:	3710      	adds	r7, #16
 8007de6:	46bd      	mov	sp, r7
 8007de8:	bd80      	pop	{r7, pc}
	...

08007dec <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007dec:	b480      	push	{r7}
 8007dee:	b095      	sub	sp, #84	@ 0x54
 8007df0:	af00      	add	r7, sp, #0
 8007df2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dfa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007dfc:	e853 3f00 	ldrex	r3, [r3]
 8007e00:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007e02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e04:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007e08:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	461a      	mov	r2, r3
 8007e10:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007e12:	643b      	str	r3, [r7, #64]	@ 0x40
 8007e14:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e16:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007e18:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007e1a:	e841 2300 	strex	r3, r2, [r1]
 8007e1e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007e20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d1e6      	bne.n	8007df4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	3308      	adds	r3, #8
 8007e2c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e2e:	6a3b      	ldr	r3, [r7, #32]
 8007e30:	e853 3f00 	ldrex	r3, [r3]
 8007e34:	61fb      	str	r3, [r7, #28]
   return(result);
 8007e36:	69fa      	ldr	r2, [r7, #28]
 8007e38:	4b1e      	ldr	r3, [pc, #120]	@ (8007eb4 <UART_EndRxTransfer+0xc8>)
 8007e3a:	4013      	ands	r3, r2
 8007e3c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	3308      	adds	r3, #8
 8007e44:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007e46:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007e48:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e4a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007e4c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007e4e:	e841 2300 	strex	r3, r2, [r1]
 8007e52:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007e54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d1e5      	bne.n	8007e26 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007e5e:	2b01      	cmp	r3, #1
 8007e60:	d118      	bne.n	8007e94 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	e853 3f00 	ldrex	r3, [r3]
 8007e6e:	60bb      	str	r3, [r7, #8]
   return(result);
 8007e70:	68bb      	ldr	r3, [r7, #8]
 8007e72:	f023 0310 	bic.w	r3, r3, #16
 8007e76:	647b      	str	r3, [r7, #68]	@ 0x44
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	461a      	mov	r2, r3
 8007e7e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007e80:	61bb      	str	r3, [r7, #24]
 8007e82:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e84:	6979      	ldr	r1, [r7, #20]
 8007e86:	69ba      	ldr	r2, [r7, #24]
 8007e88:	e841 2300 	strex	r3, r2, [r1]
 8007e8c:	613b      	str	r3, [r7, #16]
   return(result);
 8007e8e:	693b      	ldr	r3, [r7, #16]
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d1e6      	bne.n	8007e62 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	2220      	movs	r2, #32
 8007e98:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	2200      	movs	r2, #0
 8007ea0:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	2200      	movs	r2, #0
 8007ea6:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8007ea8:	bf00      	nop
 8007eaa:	3754      	adds	r7, #84	@ 0x54
 8007eac:	46bd      	mov	sp, r7
 8007eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb2:	4770      	bx	lr
 8007eb4:	effffffe 	.word	0xeffffffe

08007eb8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007eb8:	b480      	push	{r7}
 8007eba:	b085      	sub	sp, #20
 8007ebc:	af00      	add	r7, sp, #0
 8007ebe:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007ec6:	2b01      	cmp	r3, #1
 8007ec8:	d101      	bne.n	8007ece <HAL_UARTEx_DisableFifoMode+0x16>
 8007eca:	2302      	movs	r3, #2
 8007ecc:	e027      	b.n	8007f1e <HAL_UARTEx_DisableFifoMode+0x66>
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	2201      	movs	r2, #1
 8007ed2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	2224      	movs	r2, #36	@ 0x24
 8007eda:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	681a      	ldr	r2, [r3, #0]
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	f022 0201 	bic.w	r2, r2, #1
 8007ef4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8007efc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	2200      	movs	r2, #0
 8007f02:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	68fa      	ldr	r2, [r7, #12]
 8007f0a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	2220      	movs	r2, #32
 8007f10:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	2200      	movs	r2, #0
 8007f18:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007f1c:	2300      	movs	r3, #0
}
 8007f1e:	4618      	mov	r0, r3
 8007f20:	3714      	adds	r7, #20
 8007f22:	46bd      	mov	sp, r7
 8007f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f28:	4770      	bx	lr

08007f2a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007f2a:	b580      	push	{r7, lr}
 8007f2c:	b084      	sub	sp, #16
 8007f2e:	af00      	add	r7, sp, #0
 8007f30:	6078      	str	r0, [r7, #4]
 8007f32:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007f3a:	2b01      	cmp	r3, #1
 8007f3c:	d101      	bne.n	8007f42 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007f3e:	2302      	movs	r3, #2
 8007f40:	e02d      	b.n	8007f9e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	2201      	movs	r2, #1
 8007f46:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	2224      	movs	r2, #36	@ 0x24
 8007f4e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	681a      	ldr	r2, [r3, #0]
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	f022 0201 	bic.w	r2, r2, #1
 8007f68:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	689b      	ldr	r3, [r3, #8]
 8007f70:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	683a      	ldr	r2, [r7, #0]
 8007f7a:	430a      	orrs	r2, r1
 8007f7c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007f7e:	6878      	ldr	r0, [r7, #4]
 8007f80:	f000 f850 	bl	8008024 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	68fa      	ldr	r2, [r7, #12]
 8007f8a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	2220      	movs	r2, #32
 8007f90:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	2200      	movs	r2, #0
 8007f98:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007f9c:	2300      	movs	r3, #0
}
 8007f9e:	4618      	mov	r0, r3
 8007fa0:	3710      	adds	r7, #16
 8007fa2:	46bd      	mov	sp, r7
 8007fa4:	bd80      	pop	{r7, pc}

08007fa6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007fa6:	b580      	push	{r7, lr}
 8007fa8:	b084      	sub	sp, #16
 8007faa:	af00      	add	r7, sp, #0
 8007fac:	6078      	str	r0, [r7, #4]
 8007fae:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007fb6:	2b01      	cmp	r3, #1
 8007fb8:	d101      	bne.n	8007fbe <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007fba:	2302      	movs	r3, #2
 8007fbc:	e02d      	b.n	800801a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	2201      	movs	r2, #1
 8007fc2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	2224      	movs	r2, #36	@ 0x24
 8007fca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	681a      	ldr	r2, [r3, #0]
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	f022 0201 	bic.w	r2, r2, #1
 8007fe4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	689b      	ldr	r3, [r3, #8]
 8007fec:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	683a      	ldr	r2, [r7, #0]
 8007ff6:	430a      	orrs	r2, r1
 8007ff8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007ffa:	6878      	ldr	r0, [r7, #4]
 8007ffc:	f000 f812 	bl	8008024 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	68fa      	ldr	r2, [r7, #12]
 8008006:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	2220      	movs	r2, #32
 800800c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	2200      	movs	r2, #0
 8008014:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008018:	2300      	movs	r3, #0
}
 800801a:	4618      	mov	r0, r3
 800801c:	3710      	adds	r7, #16
 800801e:	46bd      	mov	sp, r7
 8008020:	bd80      	pop	{r7, pc}
	...

08008024 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008024:	b480      	push	{r7}
 8008026:	b085      	sub	sp, #20
 8008028:	af00      	add	r7, sp, #0
 800802a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008030:	2b00      	cmp	r3, #0
 8008032:	d108      	bne.n	8008046 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	2201      	movs	r2, #1
 8008038:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	2201      	movs	r2, #1
 8008040:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008044:	e031      	b.n	80080aa <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008046:	2310      	movs	r3, #16
 8008048:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800804a:	2310      	movs	r3, #16
 800804c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	689b      	ldr	r3, [r3, #8]
 8008054:	0e5b      	lsrs	r3, r3, #25
 8008056:	b2db      	uxtb	r3, r3
 8008058:	f003 0307 	and.w	r3, r3, #7
 800805c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	689b      	ldr	r3, [r3, #8]
 8008064:	0f5b      	lsrs	r3, r3, #29
 8008066:	b2db      	uxtb	r3, r3
 8008068:	f003 0307 	and.w	r3, r3, #7
 800806c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800806e:	7bbb      	ldrb	r3, [r7, #14]
 8008070:	7b3a      	ldrb	r2, [r7, #12]
 8008072:	4911      	ldr	r1, [pc, #68]	@ (80080b8 <UARTEx_SetNbDataToProcess+0x94>)
 8008074:	5c8a      	ldrb	r2, [r1, r2]
 8008076:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800807a:	7b3a      	ldrb	r2, [r7, #12]
 800807c:	490f      	ldr	r1, [pc, #60]	@ (80080bc <UARTEx_SetNbDataToProcess+0x98>)
 800807e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008080:	fb93 f3f2 	sdiv	r3, r3, r2
 8008084:	b29a      	uxth	r2, r3
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800808c:	7bfb      	ldrb	r3, [r7, #15]
 800808e:	7b7a      	ldrb	r2, [r7, #13]
 8008090:	4909      	ldr	r1, [pc, #36]	@ (80080b8 <UARTEx_SetNbDataToProcess+0x94>)
 8008092:	5c8a      	ldrb	r2, [r1, r2]
 8008094:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008098:	7b7a      	ldrb	r2, [r7, #13]
 800809a:	4908      	ldr	r1, [pc, #32]	@ (80080bc <UARTEx_SetNbDataToProcess+0x98>)
 800809c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800809e:	fb93 f3f2 	sdiv	r3, r3, r2
 80080a2:	b29a      	uxth	r2, r3
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80080aa:	bf00      	nop
 80080ac:	3714      	adds	r7, #20
 80080ae:	46bd      	mov	sp, r7
 80080b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b4:	4770      	bx	lr
 80080b6:	bf00      	nop
 80080b8:	0800d1b0 	.word	0x0800d1b0
 80080bc:	0800d1b8 	.word	0x0800d1b8

080080c0 <start_system>:
 * Start System
 *	Start each subsystem and each device driver.
 *	Return from function after starting.
 */
LOCAL ER start_system( void )
{
 80080c0:	b580      	push	{r7, lr}
 80080c2:	b082      	sub	sp, #8
 80080c4:	af00      	add	r7, sp, #0
	ER	ercd;

#if USE_DEVICE
	/* Initialize Device manager */
	ercd = knl_initialize_devmgr();
 80080c6:	f000 f925 	bl	8008314 <knl_initialize_devmgr>
 80080ca:	6078      	str	r0, [r7, #4]
	if ( ercd < E_OK ) return ercd;
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	da01      	bge.n	80080d6 <start_system+0x16>
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	e003      	b.n	80080de <start_system+0x1e>
#endif

	/* Start system dependent sequence */
	ercd = knl_start_device();
 80080d6:	f004 f96d 	bl	800c3b4 <knl_start_device>
 80080da:	6078      	str	r0, [r7, #4]

	return ercd;
 80080dc:	687b      	ldr	r3, [r7, #4]
}
 80080de:	4618      	mov	r0, r3
 80080e0:	3708      	adds	r7, #8
 80080e2:	46bd      	mov	sp, r7
 80080e4:	bd80      	pop	{r7, pc}
	...

080080e8 <shutdown_system>:
 *		-3 : Normal re-start		(Boot -> Start)
 *
 *	fin are not always supported.
 */
LOCAL void shutdown_system( INT fin )
{
 80080e8:	b580      	push	{r7, lr}
 80080ea:	b082      	sub	sp, #8
 80080ec:	af00      	add	r7, sp, #0
 80080ee:	6078      	str	r0, [r7, #4]
#if USE_SHUTDOWN
	/* Platform dependent finalize sequence */
	knl_finish_device();
 80080f0:	f004 f96c 	bl	800c3cc <knl_finish_device>

	/* Shutdown message output */
	if ( fin >= 0 ) {
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	db02      	blt.n	8008100 <shutdown_system+0x18>
		SYSTEM_MESSAGE("\n<< SYSTEM SHUTDOWN >>\n");
 80080fa:	4807      	ldr	r0, [pc, #28]	@ (8008118 <shutdown_system+0x30>)
 80080fc:	f003 fc8c 	bl	800ba18 <tm_putstring>
	}

	if ( fin < 0 ) {
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	2b00      	cmp	r3, #0
 8008104:	da02      	bge.n	800810c <shutdown_system+0x24>
		/* Re-start sequence (platform dependent) */
		knl_restart_hw(fin);
 8008106:	6878      	ldr	r0, [r7, #4]
 8008108:	f004 f976 	bl	800c3f8 <knl_restart_hw>
	}

	knl_tkernel_exit();		/* Stop system */
 800810c:	f000 f894 	bl	8008238 <knl_tkernel_exit>
	DISABLE_INTERRUPT;
	for(;;) {
		;
	}
#endif /* USE_SHUTDOWN */
}
 8008110:	bf00      	nop
 8008112:	3708      	adds	r7, #8
 8008114:	46bd      	mov	sp, r7
 8008116:	bd80      	pop	{r7, pc}
 8008118:	0800cedc 	.word	0x0800cedc

0800811c <init_task_main>:

/*
 * Initial task main
 */
LOCAL void init_task_main(void)
{
 800811c:	b580      	push	{r7, lr}
 800811e:	b082      	sub	sp, #8
 8008120:	af00      	add	r7, sp, #0
	INT	fin = 1;
 8008122:	2301      	movs	r3, #1
 8008124:	607b      	str	r3, [r7, #4]
	ER	ercd;

	ercd = start_system();		/* Start Sub-system & device driver */
 8008126:	f7ff ffcb 	bl	80080c0 <start_system>
 800812a:	6038      	str	r0, [r7, #0]
	if(ercd  >= E_OK) {
 800812c:	683b      	ldr	r3, [r7, #0]
 800812e:	2b00      	cmp	r3, #0
 8008130:	db0b      	blt.n	800814a <init_task_main+0x2e>

#if (USE_SYSTEM_MESSAGE && USE_TMONITOR)
		tm_printf((UB*)"\n\nmicroT-Kernel Version %x.%02x\n\n", VER_MAJOR, VER_MINOR);
 8008132:	2200      	movs	r2, #0
 8008134:	2103      	movs	r1, #3
 8008136:	480a      	ldr	r0, [pc, #40]	@ (8008160 <init_task_main+0x44>)
 8008138:	f004 f80e 	bl	800c158 <tm_printf>

#if USE_USERINIT
		/* Perform user defined initialization sequence */
		fin = (*(MAIN_FP)RI_USERINIT)(0, NULL);
#endif
		if ( fin > 0 ) {
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	2b00      	cmp	r3, #0
 8008140:	dd06      	ble.n	8008150 <init_task_main+0x34>
			fin = usermain();	/* User Main Program */
 8008142:	f002 ff5d 	bl	800b000 <usermain>
 8008146:	6078      	str	r0, [r7, #4]
 8008148:	e002      	b.n	8008150 <init_task_main+0x34>
		/* Perform user defined finalization sequence */
		(*(MAIN_FP)RI_USERINIT)(-1, NULL);
#endif

	} else {
		SYSTEM_MESSAGE("!ERROR! Init Task start\n");	/* Start message */
 800814a:	4806      	ldr	r0, [pc, #24]	@ (8008164 <init_task_main+0x48>)
 800814c:	f003 fc64 	bl	800ba18 <tm_putstring>
	}

	shutdown_system(fin);	/* Never return */
 8008150:	6878      	ldr	r0, [r7, #4]
 8008152:	f7ff ffc9 	bl	80080e8 <shutdown_system>
}
 8008156:	bf00      	nop
 8008158:	3708      	adds	r7, #8
 800815a:	46bd      	mov	sp, r7
 800815c:	bd80      	pop	{r7, pc}
 800815e:	bf00      	nop
 8008160:	0800cef4 	.word	0x0800cef4
 8008164:	0800cf18 	.word	0x0800cf18

08008168 <knl_main>:
#ifndef ADD_PREFIX_KNL_TO_GLOBAL_NAME
EXPORT INT main( void )
#else
EXPORT INT knl_main( void )
#endif	/* ADD_PREFIX_KNL_TO_GLOBAL_NAME */
{
 8008168:	b580      	push	{r7, lr}
 800816a:	b082      	sub	sp, #8
 800816c:	af00      	add	r7, sp, #0
	ER	ercd;

	DISABLE_INTERRUPT;
 800816e:	f004 f998 	bl	800c4a2 <disint>

#if USE_TMONITOR
	/* Initialize T-Monitor Compatible Library */
	libtm_init();
 8008172:	f003 fc27 	bl	800b9c4 <libtm_init>
#endif

#if USE_IMALLOC
	/* Initialize Internal memory allocation (Imalloc) */
	ercd = knl_init_Imalloc();
 8008176:	f001 f91b 	bl	80093b0 <knl_init_Imalloc>
 800817a:	6078      	str	r0, [r7, #4]
	if ( ercd < E_OK ) {
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	2b00      	cmp	r3, #0
 8008180:	da03      	bge.n	800818a <knl_main+0x22>
		SYSTEM_MESSAGE("!ERROR! init_Imalloc\n");
 8008182:	4825      	ldr	r0, [pc, #148]	@ (8008218 <knl_main+0xb0>)
 8008184:	f003 fc48 	bl	800ba18 <tm_putstring>
		goto err_ret;
 8008188:	e044      	b.n	8008214 <knl_main+0xac>
	}
#endif /* USE_IMALLOC */

	/* Initialize Device before micro T-Kernel starts */
	ercd = knl_init_device();
 800818a:	f004 f90b 	bl	800c3a4 <knl_init_device>
 800818e:	6078      	str	r0, [r7, #4]
	if ( ercd < E_OK ) {
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	2b00      	cmp	r3, #0
 8008194:	da03      	bge.n	800819e <knl_main+0x36>
		SYSTEM_MESSAGE("!ERROR! init_device\n");
 8008196:	4821      	ldr	r0, [pc, #132]	@ (800821c <knl_main+0xb4>)
 8008198:	f003 fc3e 	bl	800ba18 <tm_putstring>
		goto err_ret;
 800819c:	e03a      	b.n	8008214 <knl_main+0xac>
	}

	/* Interrupt initialize */
	ercd = knl_init_interrupt();
 800819e:	f004 f84d 	bl	800c23c <knl_init_interrupt>
 80081a2:	6078      	str	r0, [r7, #4]
	if ( ercd < E_OK ) {
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	da03      	bge.n	80081b2 <knl_main+0x4a>
		SYSTEM_MESSAGE("!ERROR! init_initialize\n");
 80081aa:	481d      	ldr	r0, [pc, #116]	@ (8008220 <knl_main+0xb8>)
 80081ac:	f003 fc34 	bl	800ba18 <tm_putstring>
		goto err_ret;
 80081b0:	e030      	b.n	8008214 <knl_main+0xac>
	}

	/* Initialize Kernel-objects  */
	ercd = knl_init_object();
 80081b2:	f002 fb1d 	bl	800a7f0 <knl_init_object>
 80081b6:	6078      	str	r0, [r7, #4]
	if ( ercd < E_OK ) {
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	da03      	bge.n	80081c6 <knl_main+0x5e>
		SYSTEM_MESSAGE("!ERROR! kernel object initialize\n");
 80081be:	4819      	ldr	r0, [pc, #100]	@ (8008224 <knl_main+0xbc>)
 80081c0:	f003 fc2a 	bl	800ba18 <tm_putstring>
		goto err_ret1;
 80081c4:	e024      	b.n	8008210 <knl_main+0xa8>
	}

	/* Start System Timer */
	ercd = knl_timer_startup();
 80081c6:	f002 fa1b 	bl	800a600 <knl_timer_startup>
 80081ca:	6078      	str	r0, [r7, #4]
	if ( ercd < E_OK ) {
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	da03      	bge.n	80081da <knl_main+0x72>
		SYSTEM_MESSAGE("!ERROR! System timer startup\n");
 80081d2:	4815      	ldr	r0, [pc, #84]	@ (8008228 <knl_main+0xc0>)
 80081d4:	f003 fc20 	bl	800ba18 <tm_putstring>
		goto err_ret1;
 80081d8:	e01a      	b.n	8008210 <knl_main+0xa8>
	}

	/* Create & start initial task */
	ercd = tk_cre_tsk((CONST T_CTSK *)&knl_init_ctsk);
 80081da:	4814      	ldr	r0, [pc, #80]	@ (800822c <knl_main+0xc4>)
 80081dc:	f001 feac 	bl	8009f38 <tk_cre_tsk>
 80081e0:	6078      	str	r0, [r7, #4]
	if ( ercd >= E_OK ) {
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	db0e      	blt.n	8008206 <knl_main+0x9e>
		ercd = tk_sta_tsk((ID)ercd, 0);
 80081e8:	2100      	movs	r1, #0
 80081ea:	6878      	ldr	r0, [r7, #4]
 80081ec:	f001 ff52 	bl	800a094 <tk_sta_tsk>
 80081f0:	6078      	str	r0, [r7, #4]
		if ( ercd >= E_OK ) {
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	db02      	blt.n	80081fe <knl_main+0x96>
			knl_force_dispatch();
 80081f8:	f003 ffd6 	bl	800c1a8 <knl_force_dispatch>
 80081fc:	e006      	b.n	800820c <knl_main+0xa4>
			/**** Start Initial Task. ****/
			/**** No return ****/
		} else {
			SYSTEM_MESSAGE("!ERROR! Initial Task can not start\n");
 80081fe:	480c      	ldr	r0, [pc, #48]	@ (8008230 <knl_main+0xc8>)
 8008200:	f003 fc0a 	bl	800ba18 <tm_putstring>
 8008204:	e002      	b.n	800820c <knl_main+0xa4>
		}
	} else {
		SYSTEM_MESSAGE("!ERROR! Initial Task can not creat\n");
 8008206:	480b      	ldr	r0, [pc, #44]	@ (8008234 <knl_main+0xcc>)
 8008208:	f003 fc06 	bl	800ba18 <tm_putstring>
	}

	/* After this, Error handling */

#if USE_SHUTDOWN
	knl_timer_shutdown();	/* Stop System timer */
 800820c:	f002 fa16 	bl	800a63c <knl_timer_shutdown>
err_ret1:
	knl_shutdown_hw();	/* Hardware-dependent Finalization */
 8008210:	f004 f8eb 	bl	800c3ea <knl_shutdown_hw>
#else
err_ret1:
#endif /* USE_SHUTDOWN */

err_ret:
	while(1);
 8008214:	bf00      	nop
 8008216:	e7fd      	b.n	8008214 <knl_main+0xac>
 8008218:	0800cf34 	.word	0x0800cf34
 800821c:	0800cf4c 	.word	0x0800cf4c
 8008220:	0800cf64 	.word	0x0800cf64
 8008224:	0800cf80 	.word	0x0800cf80
 8008228:	0800cfa4 	.word	0x0800cfa4
 800822c:	0800d1c0 	.word	0x0800d1c0
 8008230:	0800cfc4 	.word	0x0800cfc4
 8008234:	0800cfe8 	.word	0x0800cfe8

08008238 <knl_tkernel_exit>:
/*
 * Exit micro T-Kernel from Initial Task.
 */
#if USE_SHUTDOWN
EXPORT void knl_tkernel_exit( void )
{
 8008238:	b580      	push	{r7, lr}
 800823a:	af00      	add	r7, sp, #0
	knl_timer_shutdown();	/* Stop System timer */
 800823c:	f002 f9fe 	bl	800a63c <knl_timer_shutdown>
	knl_shutdown_hw();	/* Hardware-dependent Finalization */
 8008240:	f004 f8d3 	bl	800c3ea <knl_shutdown_hw>
	/**** No return ****/

	while(1);
 8008244:	bf00      	nop
 8008246:	e7fd      	b.n	8008244 <knl_tkernel_exit+0xc>

08008248 <QueInit>:

/*
 * Queue initialization 
 */
Inline void QueInit( QUEUE *que )
{
 8008248:	b480      	push	{r7}
 800824a:	b083      	sub	sp, #12
 800824c:	af00      	add	r7, sp, #0
 800824e:	6078      	str	r0, [r7, #4]
	que->next = (struct queue *)que;
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	687a      	ldr	r2, [r7, #4]
 8008254:	601a      	str	r2, [r3, #0]
	que->prev = (struct queue *)que;
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	687a      	ldr	r2, [r7, #4]
 800825a:	605a      	str	r2, [r3, #4]
}
 800825c:	bf00      	nop
 800825e:	370c      	adds	r7, #12
 8008260:	46bd      	mov	sp, r7
 8008262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008266:	4770      	bx	lr

08008268 <QueInsert>:
/*
 * Insert in queue 
 *	Inserts entry directly prior to que 
 */
Inline void QueInsert( QUEUE *entry, QUEUE *que )
{
 8008268:	b480      	push	{r7}
 800826a:	b083      	sub	sp, #12
 800826c:	af00      	add	r7, sp, #0
 800826e:	6078      	str	r0, [r7, #4]
 8008270:	6039      	str	r1, [r7, #0]
	entry->prev = (struct queue*) que->prev;
 8008272:	683b      	ldr	r3, [r7, #0]
 8008274:	685a      	ldr	r2, [r3, #4]
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	605a      	str	r2, [r3, #4]
	entry->next = que;
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	683a      	ldr	r2, [r7, #0]
 800827e:	601a      	str	r2, [r3, #0]
	que->prev->next = entry;
 8008280:	683b      	ldr	r3, [r7, #0]
 8008282:	685b      	ldr	r3, [r3, #4]
 8008284:	687a      	ldr	r2, [r7, #4]
 8008286:	601a      	str	r2, [r3, #0]
	que->prev = entry;
 8008288:	683b      	ldr	r3, [r7, #0]
 800828a:	687a      	ldr	r2, [r7, #4]
 800828c:	605a      	str	r2, [r3, #4]
}
 800828e:	bf00      	nop
 8008290:	370c      	adds	r7, #12
 8008292:	46bd      	mov	sp, r7
 8008294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008298:	4770      	bx	lr
	...

0800829c <initDevCB>:

/*
 * Initialization of device registration information table
 */
LOCAL ER initDevCB( void )
{
 800829c:	b580      	push	{r7, lr}
 800829e:	b082      	sub	sp, #8
 80082a0:	af00      	add	r7, sp, #0
	DevCB	*devcb;
	INT	num = MAX_REGDEV;
 80082a2:	2308      	movs	r3, #8
 80082a4:	603b      	str	r3, [r7, #0]

	QueInit(&knl_UsedDevCB);
 80082a6:	480f      	ldr	r0, [pc, #60]	@ (80082e4 <initDevCB+0x48>)
 80082a8:	f7ff ffce 	bl	8008248 <QueInit>
	QueInit(&knl_FreeDevCB);
 80082ac:	480e      	ldr	r0, [pc, #56]	@ (80082e8 <initDevCB+0x4c>)
 80082ae:	f7ff ffcb 	bl	8008248 <QueInit>

	devcb = knl_DevCBtbl;
 80082b2:	4b0e      	ldr	r3, [pc, #56]	@ (80082ec <initDevCB+0x50>)
 80082b4:	607b      	str	r3, [r7, #4]
	while ( num-- > 0 ) {
 80082b6:	e00a      	b.n	80082ce <initDevCB+0x32>
		QueInsert(&devcb->q, &knl_FreeDevCB);
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	490b      	ldr	r1, [pc, #44]	@ (80082e8 <initDevCB+0x4c>)
 80082bc:	4618      	mov	r0, r3
 80082be:	f7ff ffd3 	bl	8008268 <QueInsert>
		devcb->devnm[0] = '\0';
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	2200      	movs	r2, #0
 80082c6:	721a      	strb	r2, [r3, #8]
		devcb++;
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	3348      	adds	r3, #72	@ 0x48
 80082cc:	607b      	str	r3, [r7, #4]
	while ( num-- > 0 ) {
 80082ce:	683b      	ldr	r3, [r7, #0]
 80082d0:	1e5a      	subs	r2, r3, #1
 80082d2:	603a      	str	r2, [r7, #0]
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	dcef      	bgt.n	80082b8 <initDevCB+0x1c>
	}

	return E_OK;
 80082d8:	2300      	movs	r3, #0
}
 80082da:	4618      	mov	r0, r3
 80082dc:	3708      	adds	r7, #8
 80082de:	46bd      	mov	sp, r7
 80082e0:	bd80      	pop	{r7, pc}
 80082e2:	bf00      	nop
 80082e4:	2400155c 	.word	0x2400155c
 80082e8:	24001564 	.word	0x24001564
 80082ec:	2400131c 	.word	0x2400131c

080082f0 <initIDev>:

/*
 * Initialization of device initial setting information
 */
LOCAL ER initIDev( void )
{
 80082f0:	b480      	push	{r7}
 80082f2:	b083      	sub	sp, #12
 80082f4:	af00      	add	r7, sp, #0
	if ( ercd < E_OK ) {
		knl_DefaultIDev.evtmbfid = 0;
		goto err_ret;
	}
#else	/* Do not use message buffer for event notification */
	ercd = E_OK;
 80082f6:	2300      	movs	r3, #0
 80082f8:	607b      	str	r3, [r7, #4]
#endif
	knl_DefaultIDev.evtmbfid = ercd;
 80082fa:	4a05      	ldr	r2, [pc, #20]	@ (8008310 <initIDev+0x20>)
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	6013      	str	r3, [r2, #0]

#if DEVT_MBFSZ0 >= 0
err_ret:
#endif
	return ercd;
 8008300:	687b      	ldr	r3, [r7, #4]
}
 8008302:	4618      	mov	r0, r3
 8008304:	370c      	adds	r7, #12
 8008306:	46bd      	mov	sp, r7
 8008308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800830c:	4770      	bx	lr
 800830e:	bf00      	nop
 8008310:	24001318 	.word	0x24001318

08008314 <knl_initialize_devmgr>:

/*
 * Initialization of Device management
 */
EXPORT ER knl_initialize_devmgr( void )
{
 8008314:	b580      	push	{r7, lr}
 8008316:	b082      	sub	sp, #8
 8008318:	af00      	add	r7, sp, #0
	ER	ercd;

	/* Generate lock for device management exclusive control */
	ercd = CreateMLock(&knl_DevMgrLock, (UB*)OBJNAME_DMLOCK);
 800831a:	4916      	ldr	r1, [pc, #88]	@ (8008374 <knl_initialize_devmgr+0x60>)
 800831c:	4816      	ldr	r0, [pc, #88]	@ (8008378 <knl_initialize_devmgr+0x64>)
 800831e:	f003 faf5 	bl	800b90c <CreateMLock>
 8008322:	6078      	str	r0, [r7, #4]
	if ( ercd < E_OK ) {
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	2b00      	cmp	r3, #0
 8008328:	db15      	blt.n	8008356 <knl_initialize_devmgr+0x42>
		goto err_ret;
	}

	/* Generate device registration information table */
	ercd = initDevCB();
 800832a:	f7ff ffb7 	bl	800829c <initDevCB>
 800832e:	6078      	str	r0, [r7, #4]
	if ( ercd < E_OK ) {
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	2b00      	cmp	r3, #0
 8008334:	db11      	blt.n	800835a <knl_initialize_devmgr+0x46>
		goto err_ret;
	}

	/* Initialization of device input/output-related */
	ercd = knl_initDevIO();
 8008336:	f000 fabf 	bl	80088b8 <knl_initDevIO>
 800833a:	6078      	str	r0, [r7, #4]
	if ( ercd < E_OK ) {
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	2b00      	cmp	r3, #0
 8008340:	db0d      	blt.n	800835e <knl_initialize_devmgr+0x4a>
		goto err_ret;
	}

	/* Initialization of device initial setting information */
	ercd = initIDev();
 8008342:	f7ff ffd5 	bl	80082f0 <initIDev>
 8008346:	6078      	str	r0, [r7, #4]
	if ( ercd < E_OK ) {
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	2b00      	cmp	r3, #0
 800834c:	db09      	blt.n	8008362 <knl_initialize_devmgr+0x4e>
		goto err_ret;
	}

	knl_devmgr_startup();
 800834e:	f000 fa5f 	bl	8008810 <knl_devmgr_startup>

	return E_OK;
 8008352:	2300      	movs	r3, #0
 8008354:	e009      	b.n	800836a <knl_initialize_devmgr+0x56>
		goto err_ret;
 8008356:	bf00      	nop
 8008358:	e004      	b.n	8008364 <knl_initialize_devmgr+0x50>
		goto err_ret;
 800835a:	bf00      	nop
 800835c:	e002      	b.n	8008364 <knl_initialize_devmgr+0x50>
		goto err_ret;
 800835e:	bf00      	nop
 8008360:	e000      	b.n	8008364 <knl_initialize_devmgr+0x50>
		goto err_ret;
 8008362:	bf00      	nop

err_ret:
	knl_finish_devmgr();
 8008364:	f000 f816 	bl	8008394 <knl_finish_devmgr>
	return ercd;
 8008368:	687b      	ldr	r3, [r7, #4]
}
 800836a:	4618      	mov	r0, r3
 800836c:	3708      	adds	r7, #8
 800836e:	46bd      	mov	sp, r7
 8008370:	bd80      	pop	{r7, pc}
 8008372:	bf00      	nop
 8008374:	0800d00c 	.word	0x0800d00c
 8008378:	24001308 	.word	0x24001308

0800837c <delIDev>:

/*
 * Unregister device initial setting information
 */
LOCAL ER delIDev( void )
{
 800837c:	b480      	push	{r7}
 800837e:	b083      	sub	sp, #12
 8008380:	af00      	add	r7, sp, #0
	ER	ercd = E_OK;
 8008382:	2300      	movs	r3, #0
 8008384:	607b      	str	r3, [r7, #4]
	}


#endif /* DEVT_MBFSZ0 >= 0 */

	return ercd;
 8008386:	687b      	ldr	r3, [r7, #4]
}
 8008388:	4618      	mov	r0, r3
 800838a:	370c      	adds	r7, #12
 800838c:	46bd      	mov	sp, r7
 800838e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008392:	4770      	bx	lr

08008394 <knl_finish_devmgr>:

/*
 * Finalization sequence of system management 
 */
EXPORT ER knl_finish_devmgr( void )
{
 8008394:	b580      	push	{r7, lr}
 8008396:	b082      	sub	sp, #8
 8008398:	af00      	add	r7, sp, #0
	ER	ercd;

	knl_devmgr_cleanup();
 800839a:	f000 fa4f 	bl	800883c <knl_devmgr_cleanup>

	/* Unregister device initial setting information */
	ercd = delIDev();
 800839e:	f7ff ffed 	bl	800837c <delIDev>
 80083a2:	6078      	str	r0, [r7, #4]

	/* Finalization sequence of device input/output-related */
	ercd = knl_finishDevIO();
 80083a4:	f000 fad2 	bl	800894c <knl_finishDevIO>
 80083a8:	6078      	str	r0, [r7, #4]

	/* Delete lock for device management exclusive control */
	DeleteMLock(&knl_DevMgrLock);
 80083aa:	4804      	ldr	r0, [pc, #16]	@ (80083bc <knl_finish_devmgr+0x28>)
 80083ac:	f003 faec 	bl	800b988 <DeleteMLock>

	return ercd;
 80083b0:	687b      	ldr	r3, [r7, #4]
}
 80083b2:	4618      	mov	r0, r3
 80083b4:	3708      	adds	r7, #8
 80083b6:	46bd      	mov	sp, r7
 80083b8:	bd80      	pop	{r7, pc}
 80083ba:	bf00      	nop
 80083bc:	24001308 	.word	0x24001308

080083c0 <QueInit>:
{
 80083c0:	b480      	push	{r7}
 80083c2:	b083      	sub	sp, #12
 80083c4:	af00      	add	r7, sp, #0
 80083c6:	6078      	str	r0, [r7, #4]
	que->next = (struct queue *)que;
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	687a      	ldr	r2, [r7, #4]
 80083cc:	601a      	str	r2, [r3, #0]
	que->prev = (struct queue *)que;
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	687a      	ldr	r2, [r7, #4]
 80083d2:	605a      	str	r2, [r3, #4]
}
 80083d4:	bf00      	nop
 80083d6:	370c      	adds	r7, #12
 80083d8:	46bd      	mov	sp, r7
 80083da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083de:	4770      	bx	lr

080083e0 <isQueEmpty>:
{
 80083e0:	b480      	push	{r7}
 80083e2:	b083      	sub	sp, #12
 80083e4:	af00      	add	r7, sp, #0
 80083e6:	6078      	str	r0, [r7, #4]
	return ( que->next == que )? TRUE: FALSE;
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	687a      	ldr	r2, [r7, #4]
 80083ee:	429a      	cmp	r2, r3
 80083f0:	bf0c      	ite	eq
 80083f2:	2301      	moveq	r3, #1
 80083f4:	2300      	movne	r3, #0
 80083f6:	b2db      	uxtb	r3, r3
}
 80083f8:	4618      	mov	r0, r3
 80083fa:	370c      	adds	r7, #12
 80083fc:	46bd      	mov	sp, r7
 80083fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008402:	4770      	bx	lr

08008404 <QueInsert>:
{
 8008404:	b480      	push	{r7}
 8008406:	b083      	sub	sp, #12
 8008408:	af00      	add	r7, sp, #0
 800840a:	6078      	str	r0, [r7, #4]
 800840c:	6039      	str	r1, [r7, #0]
	entry->prev = (struct queue*) que->prev;
 800840e:	683b      	ldr	r3, [r7, #0]
 8008410:	685a      	ldr	r2, [r3, #4]
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	605a      	str	r2, [r3, #4]
	entry->next = que;
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	683a      	ldr	r2, [r7, #0]
 800841a:	601a      	str	r2, [r3, #0]
	que->prev->next = entry;
 800841c:	683b      	ldr	r3, [r7, #0]
 800841e:	685b      	ldr	r3, [r3, #4]
 8008420:	687a      	ldr	r2, [r7, #4]
 8008422:	601a      	str	r2, [r3, #0]
	que->prev = entry;
 8008424:	683b      	ldr	r3, [r7, #0]
 8008426:	687a      	ldr	r2, [r7, #4]
 8008428:	605a      	str	r2, [r3, #4]
}
 800842a:	bf00      	nop
 800842c:	370c      	adds	r7, #12
 800842e:	46bd      	mov	sp, r7
 8008430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008434:	4770      	bx	lr

08008436 <QueRemove>:
 * Delete from queue 
 *	Deletes entry from queue 
 *	No action is performed if entry is empty. 
 */
Inline void QueRemove( QUEUE *entry )
{
 8008436:	b480      	push	{r7}
 8008438:	b083      	sub	sp, #12
 800843a:	af00      	add	r7, sp, #0
 800843c:	6078      	str	r0, [r7, #4]
	if ( entry->next != entry ) {
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	687a      	ldr	r2, [r7, #4]
 8008444:	429a      	cmp	r2, r3
 8008446:	d009      	beq.n	800845c <QueRemove+0x26>
		entry->prev->next = (struct queue*) entry->next;
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	685b      	ldr	r3, [r3, #4]
 800844c:	687a      	ldr	r2, [r7, #4]
 800844e:	6812      	ldr	r2, [r2, #0]
 8008450:	601a      	str	r2, [r3, #0]
		entry->next->prev = (struct queue*) entry->prev;
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	687a      	ldr	r2, [r7, #4]
 8008458:	6852      	ldr	r2, [r2, #4]
 800845a:	605a      	str	r2, [r3, #4]
	}
}
 800845c:	bf00      	nop
 800845e:	370c      	adds	r7, #12
 8008460:	46bd      	mov	sp, r7
 8008462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008466:	4770      	bx	lr

08008468 <knl_delOpnCB>:

/*
 * Free open management block
 */
EXPORT void knl_delOpnCB( OpnCB *opncb, BOOL free )
{
 8008468:	b580      	push	{r7, lr}
 800846a:	b082      	sub	sp, #8
 800846c:	af00      	add	r7, sp, #0
 800846e:	6078      	str	r0, [r7, #4]
 8008470:	6039      	str	r1, [r7, #0]
	QueRemove(&opncb->q);
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	4618      	mov	r0, r3
 8008476:	f7ff ffde 	bl	8008436 <QueRemove>
	QueRemove(&opncb->resq);
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	3308      	adds	r3, #8
 800847e:	4618      	mov	r0, r3
 8008480:	f7ff ffd9 	bl	8008436 <QueRemove>

	if ( free ) {
 8008484:	683b      	ldr	r3, [r7, #0]
 8008486:	2b00      	cmp	r3, #0
 8008488:	d004      	beq.n	8008494 <knl_delOpnCB+0x2c>
		QueInsert(&opncb->q, &knl_FreeOpnCB);
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	4905      	ldr	r1, [pc, #20]	@ (80084a4 <knl_delOpnCB+0x3c>)
 800848e:	4618      	mov	r0, r3
 8008490:	f7ff ffb8 	bl	8008404 <QueInsert>
	}
	opncb->resid = 0;
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	2200      	movs	r2, #0
 8008498:	611a      	str	r2, [r3, #16]
}
 800849a:	bf00      	nop
 800849c:	3708      	adds	r7, #8
 800849e:	46bd      	mov	sp, r7
 80084a0:	bd80      	pop	{r7, pc}
 80084a2:	bf00      	nop
 80084a4:	2400196c 	.word	0x2400196c

080084a8 <knl_delReqCB>:

/*
 * Free request management block
 */
EXPORT void knl_delReqCB( ReqCB *reqcb )
{
 80084a8:	b580      	push	{r7, lr}
 80084aa:	b082      	sub	sp, #8
 80084ac:	af00      	add	r7, sp, #0
 80084ae:	6078      	str	r0, [r7, #4]
	QueRemove(&reqcb->q);
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	4618      	mov	r0, r3
 80084b4:	f7ff ffbf 	bl	8008436 <QueRemove>

	QueInsert(&reqcb->q, &knl_FreeReqCB);
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	4905      	ldr	r1, [pc, #20]	@ (80084d0 <knl_delReqCB+0x28>)
 80084bc:	4618      	mov	r0, r3
 80084be:	f7ff ffa1 	bl	8008404 <QueInsert>
	reqcb->opncb = NULL;
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	2200      	movs	r2, #0
 80084c6:	609a      	str	r2, [r3, #8]
}
 80084c8:	bf00      	nop
 80084ca:	3708      	adds	r7, #8
 80084cc:	46bd      	mov	sp, r7
 80084ce:	bd80      	pop	{r7, pc}
 80084d0:	24001cb4 	.word	0x24001cb4

080084d4 <knl_chkopen>:

/*
 * TRUE if specified device is open.
 */
EXPORT BOOL knl_chkopen( DevCB *devcb, INT unitno )
{
 80084d4:	b480      	push	{r7}
 80084d6:	b085      	sub	sp, #20
 80084d8:	af00      	add	r7, sp, #0
 80084da:	6078      	str	r0, [r7, #4]
 80084dc:	6039      	str	r1, [r7, #0]
	QUEUE	*q;

	for ( q = devcb->openq.next; q != &devcb->openq; q = q->next ) {
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80084e2:	60fb      	str	r3, [r7, #12]
 80084e4:	e009      	b.n	80084fa <knl_chkopen+0x26>
		if ( ((OpnCB*)q)->unitno == unitno ) {
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	699b      	ldr	r3, [r3, #24]
 80084ea:	683a      	ldr	r2, [r7, #0]
 80084ec:	429a      	cmp	r2, r3
 80084ee:	d101      	bne.n	80084f4 <knl_chkopen+0x20>
			return TRUE;
 80084f0:	2301      	movs	r3, #1
 80084f2:	e008      	b.n	8008506 <knl_chkopen+0x32>
	for ( q = devcb->openq.next; q != &devcb->openq; q = q->next ) {
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	60fb      	str	r3, [r7, #12]
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	3340      	adds	r3, #64	@ 0x40
 80084fe:	68fa      	ldr	r2, [r7, #12]
 8008500:	429a      	cmp	r2, r3
 8008502:	d1f0      	bne.n	80084e6 <knl_chkopen+0x12>
		}
	}
	return FALSE;
 8008504:	2300      	movs	r3, #0
}
 8008506:	4618      	mov	r0, r3
 8008508:	3714      	adds	r7, #20
 800850a:	46bd      	mov	sp, r7
 800850c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008510:	4770      	bx	lr
	...

08008514 <abort_allrequest>:

/*
 * Abort all requests
 */
LOCAL void abort_allrequest( OpnCB *opncb )
{
 8008514:	b590      	push	{r4, r7, lr}
 8008516:	b089      	sub	sp, #36	@ 0x24
 8008518:	af00      	add	r7, sp, #0
 800851a:	6078      	str	r0, [r7, #4]
	DevCB	*devcb;
	ReqCB	*reqcb;
	QUEUE	*q;

	/* If 'execfn' and 'waitfn' are called, execute abort request. */
	LockDM();
 800851c:	2100      	movs	r1, #0
 800851e:	4876      	ldr	r0, [pc, #472]	@ (80086f8 <abort_allrequest+0x1e4>)
 8008520:	f003 f9c1 	bl	800b8a6 <MLock>

	devcb = opncb->devcb;
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	695b      	ldr	r3, [r3, #20]
 8008528:	61bb      	str	r3, [r7, #24]
	abortfn = (ABTFN)devcb->ddev.abortfn;
 800852a:	69bb      	ldr	r3, [r7, #24]
 800852c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800852e:	617b      	str	r3, [r7, #20]
	waitfn  = (WAIFN)devcb->ddev.waitfn;
 8008530:	69bb      	ldr	r3, [r7, #24]
 8008532:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008534:	613b      	str	r3, [r7, #16]
	exinf   = devcb->ddev.exinf;
 8008536:	69bb      	ldr	r3, [r7, #24]
 8008538:	695b      	ldr	r3, [r3, #20]
 800853a:	60fb      	str	r3, [r7, #12]

	opncb->abort_tskid = tk_get_tid();
 800853c:	f001 fe1e 	bl	800a17c <tk_get_tid>
 8008540:	4602      	mov	r2, r0
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	635a      	str	r2, [r3, #52]	@ 0x34
	opncb->abort_cnt = 0;
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	2200      	movs	r2, #0
 800854a:	639a      	str	r2, [r3, #56]	@ 0x38

	if ( opncb->nwaireq > 0 ) {
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008550:	2b00      	cmp	r3, #0
 8008552:	dd2e      	ble.n	80085b2 <abort_allrequest+0x9e>
		/* Multiple requests wait */
		reqcb = DEVREQ_REQCB(opncb->waireqlst);
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008558:	3b10      	subs	r3, #16
 800855a:	60bb      	str	r3, [r7, #8]

		/* Device driver call */
		DISABLE_INTERRUPT;
 800855c:	f003 ffa1 	bl	800c4a2 <disint>
		knl_ctxtsk->sysmode++;
 8008560:	4b66      	ldr	r3, [pc, #408]	@ (80086fc <abort_allrequest+0x1e8>)
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	f9b3 2022 	ldrsh.w	r2, [r3, #34]	@ 0x22
 8008568:	b292      	uxth	r2, r2
 800856a:	3201      	adds	r2, #1
 800856c:	b292      	uxth	r2, r2
 800856e:	b212      	sxth	r2, r2
 8008570:	845a      	strh	r2, [r3, #34]	@ 0x22
		ENABLE_INTERRUPT;
 8008572:	2000      	movs	r0, #0
 8008574:	f003 ff79 	bl	800c46a <set_basepri>
		(*abortfn)(reqcb->tskid, opncb->waireqlst, opncb->nwaireq, exinf);
 8008578:	68bb      	ldr	r3, [r7, #8]
 800857a:	68d8      	ldr	r0, [r3, #12]
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008584:	697c      	ldr	r4, [r7, #20]
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	47a0      	blx	r4
		DISABLE_INTERRUPT;
 800858a:	f003 ff8a 	bl	800c4a2 <disint>
		knl_ctxtsk->sysmode--;
 800858e:	4b5b      	ldr	r3, [pc, #364]	@ (80086fc <abort_allrequest+0x1e8>)
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	f9b3 2022 	ldrsh.w	r2, [r3, #34]	@ 0x22
 8008596:	b292      	uxth	r2, r2
 8008598:	3a01      	subs	r2, #1
 800859a:	b292      	uxth	r2, r2
 800859c:	b212      	sxth	r2, r2
 800859e:	845a      	strh	r2, [r3, #34]	@ 0x22
		ENABLE_INTERRUPT;
 80085a0:	2000      	movs	r0, #0
 80085a2:	f003 ff62 	bl	800c46a <set_basepri>

		opncb->abort_cnt++;
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80085aa:	1c5a      	adds	r2, r3, #1
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	639a      	str	r2, [r3, #56]	@ 0x38
 80085b0:	e042      	b.n	8008638 <abort_allrequest+0x124>
	} else {
		/* Start request or single request wait */
		for ( q = opncb->requestq.next; q != &opncb->requestq; q = q->next ) {
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	6a1b      	ldr	r3, [r3, #32]
 80085b6:	61fb      	str	r3, [r7, #28]
 80085b8:	e039      	b.n	800862e <abort_allrequest+0x11a>
			reqcb = (ReqCB*)q;
 80085ba:	69fb      	ldr	r3, [r7, #28]
 80085bc:	60bb      	str	r3, [r7, #8]
			if ( reqcb->tskid == 0 ) {
 80085be:	68bb      	ldr	r3, [r7, #8]
 80085c0:	68db      	ldr	r3, [r3, #12]
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d02f      	beq.n	8008626 <abort_allrequest+0x112>
				continue;
			}

			reqcb->req.abort = TRUE;
 80085c6:	68ba      	ldr	r2, [r7, #8]
 80085c8:	7f13      	ldrb	r3, [r2, #28]
 80085ca:	f043 0310 	orr.w	r3, r3, #16
 80085ce:	7713      	strb	r3, [r2, #28]

			/* Device driver call */
			DISABLE_INTERRUPT;
 80085d0:	f003 ff67 	bl	800c4a2 <disint>
			knl_ctxtsk->sysmode++;
 80085d4:	4b49      	ldr	r3, [pc, #292]	@ (80086fc <abort_allrequest+0x1e8>)
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	f9b3 2022 	ldrsh.w	r2, [r3, #34]	@ 0x22
 80085dc:	b292      	uxth	r2, r2
 80085de:	3201      	adds	r2, #1
 80085e0:	b292      	uxth	r2, r2
 80085e2:	b212      	sxth	r2, r2
 80085e4:	845a      	strh	r2, [r3, #34]	@ 0x22
			ENABLE_INTERRUPT;
 80085e6:	2000      	movs	r0, #0
 80085e8:	f003 ff3f 	bl	800c46a <set_basepri>
			(*abortfn)(reqcb->tskid, &reqcb->req, 1, exinf);
 80085ec:	68bb      	ldr	r3, [r7, #8]
 80085ee:	68d8      	ldr	r0, [r3, #12]
 80085f0:	68bb      	ldr	r3, [r7, #8]
 80085f2:	f103 0110 	add.w	r1, r3, #16
 80085f6:	697c      	ldr	r4, [r7, #20]
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	2201      	movs	r2, #1
 80085fc:	47a0      	blx	r4
			DISABLE_INTERRUPT;
 80085fe:	f003 ff50 	bl	800c4a2 <disint>
			knl_ctxtsk->sysmode--;
 8008602:	4b3e      	ldr	r3, [pc, #248]	@ (80086fc <abort_allrequest+0x1e8>)
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	f9b3 2022 	ldrsh.w	r2, [r3, #34]	@ 0x22
 800860a:	b292      	uxth	r2, r2
 800860c:	3a01      	subs	r2, #1
 800860e:	b292      	uxth	r2, r2
 8008610:	b212      	sxth	r2, r2
 8008612:	845a      	strh	r2, [r3, #34]	@ 0x22
			ENABLE_INTERRUPT;
 8008614:	2000      	movs	r0, #0
 8008616:	f003 ff28 	bl	800c46a <set_basepri>

			opncb->abort_cnt++;
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800861e:	1c5a      	adds	r2, r3, #1
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	639a      	str	r2, [r3, #56]	@ 0x38
 8008624:	e000      	b.n	8008628 <abort_allrequest+0x114>
				continue;
 8008626:	bf00      	nop
		for ( q = opncb->requestq.next; q != &opncb->requestq; q = q->next ) {
 8008628:	69fb      	ldr	r3, [r7, #28]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	61fb      	str	r3, [r7, #28]
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	3320      	adds	r3, #32
 8008632:	69fa      	ldr	r2, [r7, #28]
 8008634:	429a      	cmp	r2, r3
 8008636:	d1c0      	bne.n	80085ba <abort_allrequest+0xa6>
		}
	}

	UnlockDM();
 8008638:	2100      	movs	r1, #0
 800863a:	482f      	ldr	r0, [pc, #188]	@ (80086f8 <abort_allrequest+0x1e4>)
 800863c:	f003 f943 	bl	800b8c6 <MUnlock>

	if ( opncb->abort_cnt > 0 ) {
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008644:	2b00      	cmp	r3, #0
 8008646:	dd07      	ble.n	8008658 <abort_allrequest+0x144>
		/* Wait for completion of abort request processing */
		tk_wai_sem(opncb->abort_semid, 1, TMO_FEVR);
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800864c:	f04f 32ff 	mov.w	r2, #4294967295
 8008650:	2101      	movs	r1, #1
 8008652:	4618      	mov	r0, r3
 8008654:	f001 f962 	bl	800991c <tk_wai_sem>
	}
	opncb->abort_tskid = 0;
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	2200      	movs	r2, #0
 800865c:	635a      	str	r2, [r3, #52]	@ 0x34

	/* Abort remaining requests and wait for completion */
	LockDM();
 800865e:	2100      	movs	r1, #0
 8008660:	4825      	ldr	r0, [pc, #148]	@ (80086f8 <abort_allrequest+0x1e4>)
 8008662:	f003 f920 	bl	800b8a6 <MLock>
	while ( !isQueEmpty(&opncb->requestq) ) {
 8008666:	e037      	b.n	80086d8 <abort_allrequest+0x1c4>
		reqcb = (ReqCB*)opncb->requestq.next;
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	6a1b      	ldr	r3, [r3, #32]
 800866c:	60bb      	str	r3, [r7, #8]
		reqcb->req.abort = TRUE;
 800866e:	68ba      	ldr	r2, [r7, #8]
 8008670:	7f13      	ldrb	r3, [r2, #28]
 8008672:	f043 0310 	orr.w	r3, r3, #16
 8008676:	7713      	strb	r3, [r2, #28]

		UnlockDM();
 8008678:	2100      	movs	r1, #0
 800867a:	481f      	ldr	r0, [pc, #124]	@ (80086f8 <abort_allrequest+0x1e4>)
 800867c:	f003 f923 	bl	800b8c6 <MUnlock>

		/* Device driver call */
		DISABLE_INTERRUPT;
 8008680:	f003 ff0f 	bl	800c4a2 <disint>
		knl_ctxtsk->sysmode++;
 8008684:	4b1d      	ldr	r3, [pc, #116]	@ (80086fc <abort_allrequest+0x1e8>)
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	f9b3 2022 	ldrsh.w	r2, [r3, #34]	@ 0x22
 800868c:	b292      	uxth	r2, r2
 800868e:	3201      	adds	r2, #1
 8008690:	b292      	uxth	r2, r2
 8008692:	b212      	sxth	r2, r2
 8008694:	845a      	strh	r2, [r3, #34]	@ 0x22
		ENABLE_INTERRUPT;
 8008696:	2000      	movs	r0, #0
 8008698:	f003 fee7 	bl	800c46a <set_basepri>
		(*waitfn)(&reqcb->req, 1, TMO_FEVR, exinf);
 800869c:	68bb      	ldr	r3, [r7, #8]
 800869e:	f103 0010 	add.w	r0, r3, #16
 80086a2:	693c      	ldr	r4, [r7, #16]
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	f04f 32ff 	mov.w	r2, #4294967295
 80086aa:	2101      	movs	r1, #1
 80086ac:	47a0      	blx	r4
		DISABLE_INTERRUPT;
 80086ae:	f003 fef8 	bl	800c4a2 <disint>
		knl_ctxtsk->sysmode--;
 80086b2:	4b12      	ldr	r3, [pc, #72]	@ (80086fc <abort_allrequest+0x1e8>)
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	f9b3 2022 	ldrsh.w	r2, [r3, #34]	@ 0x22
 80086ba:	b292      	uxth	r2, r2
 80086bc:	3a01      	subs	r2, #1
 80086be:	b292      	uxth	r2, r2
 80086c0:	b212      	sxth	r2, r2
 80086c2:	845a      	strh	r2, [r3, #34]	@ 0x22
		ENABLE_INTERRUPT;
 80086c4:	2000      	movs	r0, #0
 80086c6:	f003 fed0 	bl	800c46a <set_basepri>

		LockDM();
 80086ca:	2100      	movs	r1, #0
 80086cc:	480a      	ldr	r0, [pc, #40]	@ (80086f8 <abort_allrequest+0x1e4>)
 80086ce:	f003 f8ea 	bl	800b8a6 <MLock>

		/* Unregister completed request */
		knl_delReqCB(reqcb);
 80086d2:	68b8      	ldr	r0, [r7, #8]
 80086d4:	f7ff fee8 	bl	80084a8 <knl_delReqCB>
	while ( !isQueEmpty(&opncb->requestq) ) {
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	3320      	adds	r3, #32
 80086dc:	4618      	mov	r0, r3
 80086de:	f7ff fe7f 	bl	80083e0 <isQueEmpty>
 80086e2:	4603      	mov	r3, r0
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d0bf      	beq.n	8008668 <abort_allrequest+0x154>
	}
	UnlockDM();
 80086e8:	2100      	movs	r1, #0
 80086ea:	4803      	ldr	r0, [pc, #12]	@ (80086f8 <abort_allrequest+0x1e4>)
 80086ec:	f003 f8eb 	bl	800b8c6 <MUnlock>
}
 80086f0:	bf00      	nop
 80086f2:	3724      	adds	r7, #36	@ 0x24
 80086f4:	46bd      	mov	sp, r7
 80086f6:	bd90      	pop	{r4, r7, pc}
 80086f8:	24001308 	.word	0x24001308
 80086fc:	240025d8 	.word	0x240025d8

08008700 <knl_close_device>:

/*
 * Device close processing
 */
EXPORT ER knl_close_device( OpnCB *opncb, UINT option )
{
 8008700:	b580      	push	{r7, lr}
 8008702:	b088      	sub	sp, #32
 8008704:	af00      	add	r7, sp, #0
 8008706:	6078      	str	r0, [r7, #4]
 8008708:	6039      	str	r1, [r7, #0]
	CLSFN	closefn;
	void	*exinf;
	ID	devid;
	DevCB	*devcb;
	INT	unitno;
	ER	ercd = E_OK;
 800870a:	2300      	movs	r3, #0
 800870c:	61bb      	str	r3, [r7, #24]

	/* Abort all requests during processing */
	abort_allrequest(opncb);
 800870e:	6878      	ldr	r0, [r7, #4]
 8008710:	f7ff ff00 	bl	8008514 <abort_allrequest>

	LockDM();
 8008714:	2100      	movs	r1, #0
 8008716:	4839      	ldr	r0, [pc, #228]	@ (80087fc <knl_close_device+0xfc>)
 8008718:	f003 f8c5 	bl	800b8a6 <MLock>

	devcb  = opncb->devcb;
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	695b      	ldr	r3, [r3, #20]
 8008720:	617b      	str	r3, [r7, #20]
	unitno = opncb->unitno;
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	699b      	ldr	r3, [r3, #24]
 8008726:	613b      	str	r3, [r7, #16]
	closefn = (CLSFN)devcb->ddev.closefn;
 8008728:	697b      	ldr	r3, [r7, #20]
 800872a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800872c:	61fb      	str	r3, [r7, #28]
	exinf = devcb->ddev.exinf;
 800872e:	697b      	ldr	r3, [r7, #20]
 8008730:	695b      	ldr	r3, [r3, #20]
 8008732:	60fb      	str	r3, [r7, #12]
	devid = DEVID(devcb, unitno);
 8008734:	697b      	ldr	r3, [r7, #20]
 8008736:	4a32      	ldr	r2, [pc, #200]	@ (8008800 <knl_close_device+0x100>)
 8008738:	1a9b      	subs	r3, r3, r2
 800873a:	10db      	asrs	r3, r3, #3
 800873c:	4a31      	ldr	r2, [pc, #196]	@ (8008804 <knl_close_device+0x104>)
 800873e:	fb02 f303 	mul.w	r3, r2, r3
 8008742:	3301      	adds	r3, #1
 8008744:	021b      	lsls	r3, r3, #8
 8008746:	693a      	ldr	r2, [r7, #16]
 8008748:	4413      	add	r3, r2
 800874a:	60bb      	str	r3, [r7, #8]

	/* Delete semaphore for completion check of abortion */
	tk_del_sem(opncb->abort_semid);
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008750:	4618      	mov	r0, r3
 8008752:	f001 f843 	bl	80097dc <tk_del_sem>

	/* Free open management block */
	knl_delOpnCB(opncb, FALSE);
 8008756:	2100      	movs	r1, #0
 8008758:	6878      	ldr	r0, [r7, #4]
 800875a:	f7ff fe85 	bl	8008468 <knl_delOpnCB>

	/* Is device driver call required? */
	if ( knl_chkopen(devcb, unitno) ) {
 800875e:	6939      	ldr	r1, [r7, #16]
 8008760:	6978      	ldr	r0, [r7, #20]
 8008762:	f7ff feb7 	bl	80084d4 <knl_chkopen>
 8008766:	4603      	mov	r3, r0
 8008768:	2b00      	cmp	r3, #0
 800876a:	d00b      	beq.n	8008784 <knl_close_device+0x84>
		option &= ~TD_EJECT;
 800876c:	683b      	ldr	r3, [r7, #0]
 800876e:	f023 0301 	bic.w	r3, r3, #1
 8008772:	603b      	str	r3, [r7, #0]
		if ( (devcb->ddev.drvatr & TDA_OPENREQ) == 0 ) {
 8008774:	697b      	ldr	r3, [r7, #20]
 8008776:	699b      	ldr	r3, [r3, #24]
 8008778:	f003 0301 	and.w	r3, r3, #1
 800877c:	2b00      	cmp	r3, #0
 800877e:	d101      	bne.n	8008784 <knl_close_device+0x84>
			closefn = NULL;
 8008780:	2300      	movs	r3, #0
 8008782:	61fb      	str	r3, [r7, #28]
		}
	}

	UnlockDM();
 8008784:	2100      	movs	r1, #0
 8008786:	481d      	ldr	r0, [pc, #116]	@ (80087fc <knl_close_device+0xfc>)
 8008788:	f003 f89d 	bl	800b8c6 <MUnlock>

	if ( closefn != NULL ) {
 800878c:	69fb      	ldr	r3, [r7, #28]
 800878e:	2b00      	cmp	r3, #0
 8008790:	d021      	beq.n	80087d6 <knl_close_device+0xd6>
		/* Device driver call */
		DISABLE_INTERRUPT;
 8008792:	f003 fe86 	bl	800c4a2 <disint>
		knl_ctxtsk->sysmode++;
 8008796:	4b1c      	ldr	r3, [pc, #112]	@ (8008808 <knl_close_device+0x108>)
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	f9b3 2022 	ldrsh.w	r2, [r3, #34]	@ 0x22
 800879e:	b292      	uxth	r2, r2
 80087a0:	3201      	adds	r2, #1
 80087a2:	b292      	uxth	r2, r2
 80087a4:	b212      	sxth	r2, r2
 80087a6:	845a      	strh	r2, [r3, #34]	@ 0x22
		ENABLE_INTERRUPT;
 80087a8:	2000      	movs	r0, #0
 80087aa:	f003 fe5e 	bl	800c46a <set_basepri>
		ercd = (*closefn)(devid, option, exinf);
 80087ae:	69fb      	ldr	r3, [r7, #28]
 80087b0:	68fa      	ldr	r2, [r7, #12]
 80087b2:	6839      	ldr	r1, [r7, #0]
 80087b4:	68b8      	ldr	r0, [r7, #8]
 80087b6:	4798      	blx	r3
 80087b8:	61b8      	str	r0, [r7, #24]
		DISABLE_INTERRUPT;
 80087ba:	f003 fe72 	bl	800c4a2 <disint>
		knl_ctxtsk->sysmode--;
 80087be:	4b12      	ldr	r3, [pc, #72]	@ (8008808 <knl_close_device+0x108>)
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	f9b3 2022 	ldrsh.w	r2, [r3, #34]	@ 0x22
 80087c6:	b292      	uxth	r2, r2
 80087c8:	3a01      	subs	r2, #1
 80087ca:	b292      	uxth	r2, r2
 80087cc:	b212      	sxth	r2, r2
 80087ce:	845a      	strh	r2, [r3, #34]	@ 0x22
		ENABLE_INTERRUPT;
 80087d0:	2000      	movs	r0, #0
 80087d2:	f003 fe4a 	bl	800c46a <set_basepri>
	}

	LockDM();
 80087d6:	2100      	movs	r1, #0
 80087d8:	4808      	ldr	r0, [pc, #32]	@ (80087fc <knl_close_device+0xfc>)
 80087da:	f003 f864 	bl	800b8a6 <MLock>
	/* Return open management block to FreeQue */
	QueInsert(&opncb->q, &knl_FreeOpnCB);
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	490a      	ldr	r1, [pc, #40]	@ (800880c <knl_close_device+0x10c>)
 80087e2:	4618      	mov	r0, r3
 80087e4:	f7ff fe0e 	bl	8008404 <QueInsert>
	UnlockDM();
 80087e8:	2100      	movs	r1, #0
 80087ea:	4804      	ldr	r0, [pc, #16]	@ (80087fc <knl_close_device+0xfc>)
 80087ec:	f003 f86b 	bl	800b8c6 <MUnlock>

	return ercd;
 80087f0:	69bb      	ldr	r3, [r7, #24]
}
 80087f2:	4618      	mov	r0, r3
 80087f4:	3720      	adds	r7, #32
 80087f6:	46bd      	mov	sp, r7
 80087f8:	bd80      	pop	{r7, pc}
 80087fa:	bf00      	nop
 80087fc:	24001308 	.word	0x24001308
 8008800:	2400131c 	.word	0x2400131c
 8008804:	38e38e39 	.word	0x38e38e39
 8008808:	240025d8 	.word	0x240025d8
 800880c:	2400196c 	.word	0x2400196c

08008810 <knl_devmgr_startup>:

/*
 * Device management startup function
 */
EXPORT void knl_devmgr_startup( void )
{
 8008810:	b580      	push	{r7, lr}
 8008812:	af00      	add	r7, sp, #0
	LockDM();
 8008814:	2100      	movs	r1, #0
 8008816:	4807      	ldr	r0, [pc, #28]	@ (8008834 <knl_devmgr_startup+0x24>)
 8008818:	f003 f845 	bl	800b8a6 <MLock>

	/* Initialization of open device management queue */
	QueInit(&(knl_resource_control_block.openq));
 800881c:	4806      	ldr	r0, [pc, #24]	@ (8008838 <knl_devmgr_startup+0x28>)
 800881e:	f7ff fdcf 	bl	80083c0 <QueInit>
	knl_resource_control_block.dissus = 0;
 8008822:	4b05      	ldr	r3, [pc, #20]	@ (8008838 <knl_devmgr_startup+0x28>)
 8008824:	2200      	movs	r2, #0
 8008826:	609a      	str	r2, [r3, #8]
	
	UnlockDM();
 8008828:	2100      	movs	r1, #0
 800882a:	4802      	ldr	r0, [pc, #8]	@ (8008834 <knl_devmgr_startup+0x24>)
 800882c:	f003 f84b 	bl	800b8c6 <MUnlock>

	return;
 8008830:	bf00      	nop
}
 8008832:	bd80      	pop	{r7, pc}
 8008834:	24001308 	.word	0x24001308
 8008838:	24001cbc 	.word	0x24001cbc

0800883c <knl_devmgr_cleanup>:

/*
 * Device management cleanup function
 */
EXPORT void knl_devmgr_cleanup( void )
{
 800883c:	b580      	push	{r7, lr}
 800883e:	b082      	sub	sp, #8
 8008840:	af00      	add	r7, sp, #0
	OpnCB	*opncb;

	/* Do nothing if it is not used even once */
	if ( knl_resource_control_block.openq.next == NULL ) {
 8008842:	4b1a      	ldr	r3, [pc, #104]	@ (80088ac <knl_devmgr_cleanup+0x70>)
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	2b00      	cmp	r3, #0
 8008848:	d02c      	beq.n	80088a4 <knl_devmgr_cleanup+0x68>
		return;
	}

	LockDM();
 800884a:	2100      	movs	r1, #0
 800884c:	4818      	ldr	r0, [pc, #96]	@ (80088b0 <knl_devmgr_cleanup+0x74>)
 800884e:	f003 f82a 	bl	800b8a6 <MLock>

	/* Free suspend disable request */
	knl_DisSusCnt -= knl_resource_control_block.dissus;
 8008852:	4b18      	ldr	r3, [pc, #96]	@ (80088b4 <knl_devmgr_cleanup+0x78>)
 8008854:	681a      	ldr	r2, [r3, #0]
 8008856:	4b15      	ldr	r3, [pc, #84]	@ (80088ac <knl_devmgr_cleanup+0x70>)
 8008858:	689b      	ldr	r3, [r3, #8]
 800885a:	1ad3      	subs	r3, r2, r3
 800885c:	4a15      	ldr	r2, [pc, #84]	@ (80088b4 <knl_devmgr_cleanup+0x78>)
 800885e:	6013      	str	r3, [r2, #0]
	knl_resource_control_block.dissus = 0;
 8008860:	4b12      	ldr	r3, [pc, #72]	@ (80088ac <knl_devmgr_cleanup+0x70>)
 8008862:	2200      	movs	r2, #0
 8008864:	609a      	str	r2, [r3, #8]

	/* Close all open devices */
	while ( !isQueEmpty(&(knl_resource_control_block.openq)) ) {
 8008866:	e012      	b.n	800888e <knl_devmgr_cleanup+0x52>
		opncb = RESQ_OPNCB(knl_resource_control_block.openq.next);
 8008868:	4b10      	ldr	r3, [pc, #64]	@ (80088ac <knl_devmgr_cleanup+0x70>)
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	3b08      	subs	r3, #8
 800886e:	607b      	str	r3, [r7, #4]

		/* Indicate that it is during close processing */
		opncb->resid = 0;
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	2200      	movs	r2, #0
 8008874:	611a      	str	r2, [r3, #16]

		UnlockDM();
 8008876:	2100      	movs	r1, #0
 8008878:	480d      	ldr	r0, [pc, #52]	@ (80088b0 <knl_devmgr_cleanup+0x74>)
 800887a:	f003 f824 	bl	800b8c6 <MUnlock>

		/* Device close processing */
		knl_close_device(opncb, 0);
 800887e:	2100      	movs	r1, #0
 8008880:	6878      	ldr	r0, [r7, #4]
 8008882:	f7ff ff3d 	bl	8008700 <knl_close_device>

		LockDM();
 8008886:	2100      	movs	r1, #0
 8008888:	4809      	ldr	r0, [pc, #36]	@ (80088b0 <knl_devmgr_cleanup+0x74>)
 800888a:	f003 f80c 	bl	800b8a6 <MLock>
	while ( !isQueEmpty(&(knl_resource_control_block.openq)) ) {
 800888e:	4807      	ldr	r0, [pc, #28]	@ (80088ac <knl_devmgr_cleanup+0x70>)
 8008890:	f7ff fda6 	bl	80083e0 <isQueEmpty>
 8008894:	4603      	mov	r3, r0
 8008896:	2b00      	cmp	r3, #0
 8008898:	d0e6      	beq.n	8008868 <knl_devmgr_cleanup+0x2c>
	}
	UnlockDM();
 800889a:	2100      	movs	r1, #0
 800889c:	4804      	ldr	r0, [pc, #16]	@ (80088b0 <knl_devmgr_cleanup+0x74>)
 800889e:	f003 f812 	bl	800b8c6 <MUnlock>

	return;
 80088a2:	e000      	b.n	80088a6 <knl_devmgr_cleanup+0x6a>
		return;
 80088a4:	bf00      	nop
}
 80088a6:	3708      	adds	r7, #8
 80088a8:	46bd      	mov	sp, r7
 80088aa:	bd80      	pop	{r7, pc}
 80088ac:	24001cbc 	.word	0x24001cbc
 80088b0:	24001308 	.word	0x24001308
 80088b4:	24001064 	.word	0x24001064

080088b8 <knl_initDevIO>:

/*
 * Initialization sequence of device input/output-related
 */
EXPORT ER knl_initDevIO( void )
{
 80088b8:	b580      	push	{r7, lr}
 80088ba:	b082      	sub	sp, #8
 80088bc:	af00      	add	r7, sp, #0
	INT	i;

	QueInit(&knl_FreeOpnCB);
 80088be:	481f      	ldr	r0, [pc, #124]	@ (800893c <knl_initDevIO+0x84>)
 80088c0:	f7ff fd7e 	bl	80083c0 <QueInit>
	for ( i = 0; i < MAX_OPNDEV; ++i ) {
 80088c4:	2300      	movs	r3, #0
 80088c6:	607b      	str	r3, [r7, #4]
 80088c8:	e011      	b.n	80088ee <knl_initDevIO+0x36>
		knl_OpnCBtbl[i].resid = 0;
 80088ca:	4a1d      	ldr	r2, [pc, #116]	@ (8008940 <knl_initDevIO+0x88>)
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	019b      	lsls	r3, r3, #6
 80088d0:	4413      	add	r3, r2
 80088d2:	3310      	adds	r3, #16
 80088d4:	2200      	movs	r2, #0
 80088d6:	601a      	str	r2, [r3, #0]
		QueInsert(&knl_OpnCBtbl[i].q, &knl_FreeOpnCB);
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	019b      	lsls	r3, r3, #6
 80088dc:	4a18      	ldr	r2, [pc, #96]	@ (8008940 <knl_initDevIO+0x88>)
 80088de:	4413      	add	r3, r2
 80088e0:	4916      	ldr	r1, [pc, #88]	@ (800893c <knl_initDevIO+0x84>)
 80088e2:	4618      	mov	r0, r3
 80088e4:	f7ff fd8e 	bl	8008404 <QueInsert>
	for ( i = 0; i < MAX_OPNDEV; ++i ) {
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	3301      	adds	r3, #1
 80088ec:	607b      	str	r3, [r7, #4]
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	2b0f      	cmp	r3, #15
 80088f2:	ddea      	ble.n	80088ca <knl_initDevIO+0x12>
	}

	QueInit(&knl_FreeReqCB);
 80088f4:	4813      	ldr	r0, [pc, #76]	@ (8008944 <knl_initDevIO+0x8c>)
 80088f6:	f7ff fd63 	bl	80083c0 <QueInit>
	for ( i = 0; i < MAX_REQDEV; ++i ) {
 80088fa:	2300      	movs	r3, #0
 80088fc:	607b      	str	r3, [r7, #4]
 80088fe:	e015      	b.n	800892c <knl_initDevIO+0x74>
		knl_ReqCBtbl[i].opncb = NULL;
 8008900:	4a11      	ldr	r2, [pc, #68]	@ (8008948 <knl_initDevIO+0x90>)
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	2134      	movs	r1, #52	@ 0x34
 8008906:	fb01 f303 	mul.w	r3, r1, r3
 800890a:	4413      	add	r3, r2
 800890c:	3308      	adds	r3, #8
 800890e:	2200      	movs	r2, #0
 8008910:	601a      	str	r2, [r3, #0]
		QueInsert(&knl_ReqCBtbl[i].q, &knl_FreeReqCB);
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	2234      	movs	r2, #52	@ 0x34
 8008916:	fb02 f303 	mul.w	r3, r2, r3
 800891a:	4a0b      	ldr	r2, [pc, #44]	@ (8008948 <knl_initDevIO+0x90>)
 800891c:	4413      	add	r3, r2
 800891e:	4909      	ldr	r1, [pc, #36]	@ (8008944 <knl_initDevIO+0x8c>)
 8008920:	4618      	mov	r0, r3
 8008922:	f7ff fd6f 	bl	8008404 <QueInsert>
	for ( i = 0; i < MAX_REQDEV; ++i ) {
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	3301      	adds	r3, #1
 800892a:	607b      	str	r3, [r7, #4]
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	2b0f      	cmp	r3, #15
 8008930:	dde6      	ble.n	8008900 <knl_initDevIO+0x48>
	}

	return E_OK;
 8008932:	2300      	movs	r3, #0
}
 8008934:	4618      	mov	r0, r3
 8008936:	3708      	adds	r7, #8
 8008938:	46bd      	mov	sp, r7
 800893a:	bd80      	pop	{r7, pc}
 800893c:	2400196c 	.word	0x2400196c
 8008940:	2400156c 	.word	0x2400156c
 8008944:	24001cb4 	.word	0x24001cb4
 8008948:	24001974 	.word	0x24001974

0800894c <knl_finishDevIO>:

/*
 * Finalization sequence of device input/output-related
 */
EXPORT ER knl_finishDevIO( void )
{
 800894c:	b480      	push	{r7}
 800894e:	af00      	add	r7, sp, #0
	return E_OK;
 8008950:	2300      	movs	r3, #0
}
 8008952:	4618      	mov	r0, r3
 8008954:	46bd      	mov	sp, r7
 8008956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800895a:	4770      	bx	lr

0800895c <QueInit>:
{
 800895c:	b480      	push	{r7}
 800895e:	b083      	sub	sp, #12
 8008960:	af00      	add	r7, sp, #0
 8008962:	6078      	str	r0, [r7, #4]
	que->next = (struct queue *)que;
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	687a      	ldr	r2, [r7, #4]
 8008968:	601a      	str	r2, [r3, #0]
	que->prev = (struct queue *)que;
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	687a      	ldr	r2, [r7, #4]
 800896e:	605a      	str	r2, [r3, #4]
}
 8008970:	bf00      	nop
 8008972:	370c      	adds	r7, #12
 8008974:	46bd      	mov	sp, r7
 8008976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800897a:	4770      	bx	lr

0800897c <isQueEmpty>:
{
 800897c:	b480      	push	{r7}
 800897e:	b083      	sub	sp, #12
 8008980:	af00      	add	r7, sp, #0
 8008982:	6078      	str	r0, [r7, #4]
	return ( que->next == que )? TRUE: FALSE;
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	687a      	ldr	r2, [r7, #4]
 800898a:	429a      	cmp	r2, r3
 800898c:	bf0c      	ite	eq
 800898e:	2301      	moveq	r3, #1
 8008990:	2300      	movne	r3, #0
 8008992:	b2db      	uxtb	r3, r3
}
 8008994:	4618      	mov	r0, r3
 8008996:	370c      	adds	r7, #12
 8008998:	46bd      	mov	sp, r7
 800899a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800899e:	4770      	bx	lr

080089a0 <QueInsert>:
{
 80089a0:	b480      	push	{r7}
 80089a2:	b083      	sub	sp, #12
 80089a4:	af00      	add	r7, sp, #0
 80089a6:	6078      	str	r0, [r7, #4]
 80089a8:	6039      	str	r1, [r7, #0]
	entry->prev = (struct queue*) que->prev;
 80089aa:	683b      	ldr	r3, [r7, #0]
 80089ac:	685a      	ldr	r2, [r3, #4]
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	605a      	str	r2, [r3, #4]
	entry->next = que;
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	683a      	ldr	r2, [r7, #0]
 80089b6:	601a      	str	r2, [r3, #0]
	que->prev->next = entry;
 80089b8:	683b      	ldr	r3, [r7, #0]
 80089ba:	685b      	ldr	r3, [r3, #4]
 80089bc:	687a      	ldr	r2, [r7, #4]
 80089be:	601a      	str	r2, [r3, #0]
	que->prev = entry;
 80089c0:	683b      	ldr	r3, [r7, #0]
 80089c2:	687a      	ldr	r2, [r7, #4]
 80089c4:	605a      	str	r2, [r3, #4]
}
 80089c6:	bf00      	nop
 80089c8:	370c      	adds	r7, #12
 80089ca:	46bd      	mov	sp, r7
 80089cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089d0:	4770      	bx	lr

080089d2 <QueRemoveNext>:
 *	Deletes the entry directly after que from the queue,
 *	and returns the deleted entry.
 *	Returns NULL if que is empty.
 */
Inline QUEUE* QueRemoveNext( QUEUE *que )
{
 80089d2:	b480      	push	{r7}
 80089d4:	b085      	sub	sp, #20
 80089d6:	af00      	add	r7, sp, #0
 80089d8:	6078      	str	r0, [r7, #4]
	QUEUE	*entry;

	if ( que->next == que ) {
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	687a      	ldr	r2, [r7, #4]
 80089e0:	429a      	cmp	r2, r3
 80089e2:	d101      	bne.n	80089e8 <QueRemoveNext+0x16>
		return NULL;
 80089e4:	2300      	movs	r3, #0
 80089e6:	e00b      	b.n	8008a00 <QueRemoveNext+0x2e>
	}

	entry = que->next;
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	60fb      	str	r3, [r7, #12]
	que->next = (struct queue*)entry->next;
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	681a      	ldr	r2, [r3, #0]
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	601a      	str	r2, [r3, #0]
	entry->next->prev = que;
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	687a      	ldr	r2, [r7, #4]
 80089fc:	605a      	str	r2, [r3, #4]

	return entry;
 80089fe:	68fb      	ldr	r3, [r7, #12]
}
 8008a00:	4618      	mov	r0, r3
 8008a02:	3714      	adds	r7, #20
 8008a04:	46bd      	mov	sp, r7
 8008a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a0a:	4770      	bx	lr

08008a0c <knl_isTaskIndependent>:

/*
 * If it is the task-independent part, TRUE
 */
Inline BOOL knl_isTaskIndependent( void )
{
 8008a0c:	b480      	push	{r7}
 8008a0e:	af00      	add	r7, sp, #0
	return ( knl_taskindp > 0 )? TRUE: FALSE;
 8008a10:	4b05      	ldr	r3, [pc, #20]	@ (8008a28 <knl_isTaskIndependent+0x1c>)
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	bfcc      	ite	gt
 8008a18:	2301      	movgt	r3, #1
 8008a1a:	2300      	movle	r3, #0
 8008a1c:	b2db      	uxtb	r3, r3
}
 8008a1e:	4618      	mov	r0, r3
 8008a20:	46bd      	mov	sp, r7
 8008a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a26:	4770      	bx	lr
 8008a28:	240011a4 	.word	0x240011a4

08008a2c <knl_eventflag_cond>:

/*
 * Check for event flag wait release condition
 */
Inline BOOL knl_eventflag_cond( FLGCB *flgcb, UINT waiptn, UINT wfmode )
{
 8008a2c:	b480      	push	{r7}
 8008a2e:	b085      	sub	sp, #20
 8008a30:	af00      	add	r7, sp, #0
 8008a32:	60f8      	str	r0, [r7, #12]
 8008a34:	60b9      	str	r1, [r7, #8]
 8008a36:	607a      	str	r2, [r7, #4]
	if ( (wfmode & TWF_ORW) != 0 ) {
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	f003 0301 	and.w	r3, r3, #1
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d009      	beq.n	8008a56 <knl_eventflag_cond+0x2a>
		return ( (flgcb->flgptn & waiptn) != 0 );
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	695a      	ldr	r2, [r3, #20]
 8008a46:	68bb      	ldr	r3, [r7, #8]
 8008a48:	4013      	ands	r3, r2
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	bf14      	ite	ne
 8008a4e:	2301      	movne	r3, #1
 8008a50:	2300      	moveq	r3, #0
 8008a52:	b2db      	uxtb	r3, r3
 8008a54:	e009      	b.n	8008a6a <knl_eventflag_cond+0x3e>
	} else {
		return ( (flgcb->flgptn & waiptn) == waiptn );
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	695a      	ldr	r2, [r3, #20]
 8008a5a:	68bb      	ldr	r3, [r7, #8]
 8008a5c:	4013      	ands	r3, r2
 8008a5e:	68ba      	ldr	r2, [r7, #8]
 8008a60:	429a      	cmp	r2, r3
 8008a62:	bf0c      	ite	eq
 8008a64:	2301      	moveq	r3, #1
 8008a66:	2300      	movne	r3, #0
 8008a68:	b2db      	uxtb	r3, r3
	}
}
 8008a6a:	4618      	mov	r0, r3
 8008a6c:	3714      	adds	r7, #20
 8008a6e:	46bd      	mov	sp, r7
 8008a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a74:	4770      	bx	lr
	...

08008a78 <knl_eventflag_initialize>:

/*
 * Initialization of event flag control block 
 */
EXPORT ER knl_eventflag_initialize( void )
{
 8008a78:	b580      	push	{r7, lr}
 8008a7a:	b082      	sub	sp, #8
 8008a7c:	af00      	add	r7, sp, #0
	if ( NUM_FLGID < 1 ) {
		return E_SYS;
	}

	/* Register all control blocks onto FreeQue */
	QueInit(&knl_free_flgcb);
 8008a7e:	480e      	ldr	r0, [pc, #56]	@ (8008ab8 <knl_eventflag_initialize+0x40>)
 8008a80:	f7ff ff6c 	bl	800895c <QueInit>
	end = knl_flgcb_table + NUM_FLGID;
 8008a84:	4b0d      	ldr	r3, [pc, #52]	@ (8008abc <knl_eventflag_initialize+0x44>)
 8008a86:	603b      	str	r3, [r7, #0]
	for ( flgcb = knl_flgcb_table; flgcb < end; flgcb++ ) {
 8008a88:	4b0d      	ldr	r3, [pc, #52]	@ (8008ac0 <knl_eventflag_initialize+0x48>)
 8008a8a:	607b      	str	r3, [r7, #4]
 8008a8c:	e00a      	b.n	8008aa4 <knl_eventflag_initialize+0x2c>
		flgcb->flgid = 0;
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	2200      	movs	r2, #0
 8008a92:	609a      	str	r2, [r3, #8]
		QueInsert(&flgcb->wait_queue, &knl_free_flgcb);
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	4908      	ldr	r1, [pc, #32]	@ (8008ab8 <knl_eventflag_initialize+0x40>)
 8008a98:	4618      	mov	r0, r3
 8008a9a:	f7ff ff81 	bl	80089a0 <QueInsert>
	for ( flgcb = knl_flgcb_table; flgcb < end; flgcb++ ) {
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	3318      	adds	r3, #24
 8008aa2:	607b      	str	r3, [r7, #4]
 8008aa4:	687a      	ldr	r2, [r7, #4]
 8008aa6:	683b      	ldr	r3, [r7, #0]
 8008aa8:	429a      	cmp	r2, r3
 8008aaa:	d3f0      	bcc.n	8008a8e <knl_eventflag_initialize+0x16>
	}

	return E_OK;
 8008aac:	2300      	movs	r3, #0
}
 8008aae:	4618      	mov	r0, r3
 8008ab0:	3708      	adds	r7, #8
 8008ab2:	46bd      	mov	sp, r7
 8008ab4:	bd80      	pop	{r7, pc}
 8008ab6:	bf00      	nop
 8008ab8:	24001e48 	.word	0x24001e48
 8008abc:	24001e48 	.word	0x24001e48
 8008ac0:	24001cc8 	.word	0x24001cc8

08008ac4 <tk_cre_flg>:

/*
 * Create event flag
 */
SYSCALL ID tk_cre_flg( CONST T_CFLG *pk_cflg )
{
 8008ac4:	b580      	push	{r7, lr}
 8008ac6:	b088      	sub	sp, #32
 8008ac8:	af00      	add	r7, sp, #0
 8008aca:	6078      	str	r0, [r7, #4]
#if CHK_RSATR
	const ATR VALID_FLGATR = {
 8008acc:	2309      	movs	r3, #9
 8008ace:	61bb      	str	r3, [r7, #24]
#endif
	FLGCB	*flgcb;
	ID	flgid;
	ER	ercd;

	CHECK_RSATR(pk_cflg->flgatr, VALID_FLGATR);
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	685a      	ldr	r2, [r3, #4]
 8008ad4:	69bb      	ldr	r3, [r7, #24]
 8008ad6:	43db      	mvns	r3, r3
 8008ad8:	4013      	ands	r3, r2
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d002      	beq.n	8008ae4 <tk_cre_flg+0x20>
 8008ade:	f06f 030a 	mvn.w	r3, #10
 8008ae2:	e03e      	b.n	8008b62 <tk_cre_flg+0x9e>

	BEGIN_CRITICAL_SECTION;
 8008ae4:	f003 fcdd 	bl	800c4a2 <disint>
 8008ae8:	6178      	str	r0, [r7, #20]
	/* Get control block from FreeQue */
	flgcb = (FLGCB*)QueRemoveNext(&knl_free_flgcb);
 8008aea:	4820      	ldr	r0, [pc, #128]	@ (8008b6c <tk_cre_flg+0xa8>)
 8008aec:	f7ff ff71 	bl	80089d2 <QueRemoveNext>
 8008af0:	6138      	str	r0, [r7, #16]
	if ( flgcb == NULL ) {
 8008af2:	693b      	ldr	r3, [r7, #16]
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d103      	bne.n	8008b00 <tk_cre_flg+0x3c>
		ercd = E_LIMIT;
 8008af8:	f06f 0321 	mvn.w	r3, #33	@ 0x21
 8008afc:	61fb      	str	r3, [r7, #28]
 8008afe:	e01d      	b.n	8008b3c <tk_cre_flg+0x78>
	} else {
		flgid = ID_FLG(flgcb - knl_flgcb_table);
 8008b00:	693b      	ldr	r3, [r7, #16]
 8008b02:	4a1b      	ldr	r2, [pc, #108]	@ (8008b70 <tk_cre_flg+0xac>)
 8008b04:	1a9b      	subs	r3, r3, r2
 8008b06:	10db      	asrs	r3, r3, #3
 8008b08:	4a1a      	ldr	r2, [pc, #104]	@ (8008b74 <tk_cre_flg+0xb0>)
 8008b0a:	fb02 f303 	mul.w	r3, r2, r3
 8008b0e:	3301      	adds	r3, #1
 8008b10:	60fb      	str	r3, [r7, #12]

		/* Initialize control block */
		QueInit(&flgcb->wait_queue);
 8008b12:	693b      	ldr	r3, [r7, #16]
 8008b14:	4618      	mov	r0, r3
 8008b16:	f7ff ff21 	bl	800895c <QueInit>
		flgcb->flgid = flgid;
 8008b1a:	693b      	ldr	r3, [r7, #16]
 8008b1c:	68fa      	ldr	r2, [r7, #12]
 8008b1e:	609a      	str	r2, [r3, #8]
		flgcb->exinf = pk_cflg->exinf;
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	681a      	ldr	r2, [r3, #0]
 8008b24:	693b      	ldr	r3, [r7, #16]
 8008b26:	60da      	str	r2, [r3, #12]
		flgcb->flgatr = pk_cflg->flgatr;
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	685a      	ldr	r2, [r3, #4]
 8008b2c:	693b      	ldr	r3, [r7, #16]
 8008b2e:	611a      	str	r2, [r3, #16]
		flgcb->flgptn = pk_cflg->iflgptn;
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	689a      	ldr	r2, [r3, #8]
 8008b34:	693b      	ldr	r3, [r7, #16]
 8008b36:	615a      	str	r2, [r3, #20]
		if ( (pk_cflg->flgatr & TA_DSNAME) != 0 ) {
			knl_strncpy((char*)flgcb->name, (char*)pk_cflg->dsname,
				OBJECT_NAME_LENGTH);
		}
#endif
		ercd = flgid;
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	61fb      	str	r3, [r7, #28]
	}
	END_CRITICAL_SECTION;
 8008b3c:	697b      	ldr	r3, [r7, #20]
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d10b      	bne.n	8008b5a <tk_cre_flg+0x96>
 8008b42:	4b0d      	ldr	r3, [pc, #52]	@ (8008b78 <tk_cre_flg+0xb4>)
 8008b44:	681a      	ldr	r2, [r3, #0]
 8008b46:	4b0d      	ldr	r3, [pc, #52]	@ (8008b7c <tk_cre_flg+0xb8>)
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	429a      	cmp	r2, r3
 8008b4c:	d005      	beq.n	8008b5a <tk_cre_flg+0x96>
 8008b4e:	4b0c      	ldr	r3, [pc, #48]	@ (8008b80 <tk_cre_flg+0xbc>)
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d101      	bne.n	8008b5a <tk_cre_flg+0x96>
 8008b56:	f003 fb3f 	bl	800c1d8 <knl_dispatch>
 8008b5a:	6978      	ldr	r0, [r7, #20]
 8008b5c:	f003 fc85 	bl	800c46a <set_basepri>

	return ercd;
 8008b60:	69fb      	ldr	r3, [r7, #28]
}
 8008b62:	4618      	mov	r0, r3
 8008b64:	3720      	adds	r7, #32
 8008b66:	46bd      	mov	sp, r7
 8008b68:	bd80      	pop	{r7, pc}
 8008b6a:	bf00      	nop
 8008b6c:	24001e48 	.word	0x24001e48
 8008b70:	24001cc8 	.word	0x24001cc8
 8008b74:	aaaaaaab 	.word	0xaaaaaaab
 8008b78:	240025d8 	.word	0x240025d8
 8008b7c:	240025dc 	.word	0x240025dc
 8008b80:	240025d4 	.word	0x240025d4

08008b84 <tk_del_flg>:
#ifdef USE_FUNC_TK_DEL_FLG
/*
 * Delete event flag
 */
SYSCALL ER tk_del_flg( ID flgid )
{
 8008b84:	b580      	push	{r7, lr}
 8008b86:	b086      	sub	sp, #24
 8008b88:	af00      	add	r7, sp, #0
 8008b8a:	6078      	str	r0, [r7, #4]
	FLGCB	*flgcb;
	ER	ercd = E_OK;
 8008b8c:	2300      	movs	r3, #0
 8008b8e:	617b      	str	r3, [r7, #20]

	CHECK_FLGID(flgid);
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	dd02      	ble.n	8008b9c <tk_del_flg+0x18>
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	2b10      	cmp	r3, #16
 8008b9a:	dd02      	ble.n	8008ba2 <tk_del_flg+0x1e>
 8008b9c:	f06f 0311 	mvn.w	r3, #17
 8008ba0:	e032      	b.n	8008c08 <tk_del_flg+0x84>

	flgcb = get_flgcb(flgid);
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	1e5a      	subs	r2, r3, #1
 8008ba6:	4613      	mov	r3, r2
 8008ba8:	005b      	lsls	r3, r3, #1
 8008baa:	4413      	add	r3, r2
 8008bac:	00db      	lsls	r3, r3, #3
 8008bae:	4a18      	ldr	r2, [pc, #96]	@ (8008c10 <tk_del_flg+0x8c>)
 8008bb0:	4413      	add	r3, r2
 8008bb2:	613b      	str	r3, [r7, #16]

	BEGIN_CRITICAL_SECTION;
 8008bb4:	f003 fc75 	bl	800c4a2 <disint>
 8008bb8:	60f8      	str	r0, [r7, #12]
	if ( flgcb->flgid == 0 ) {
 8008bba:	693b      	ldr	r3, [r7, #16]
 8008bbc:	689b      	ldr	r3, [r3, #8]
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d103      	bne.n	8008bca <tk_del_flg+0x46>
		ercd = E_NOEXS;
 8008bc2:	f06f 0329 	mvn.w	r3, #41	@ 0x29
 8008bc6:	617b      	str	r3, [r7, #20]
 8008bc8:	e00b      	b.n	8008be2 <tk_del_flg+0x5e>
	} else {
		/* Release wait state of task (E_DLT) */
		knl_wait_delete(&flgcb->wait_queue);
 8008bca:	693b      	ldr	r3, [r7, #16]
 8008bcc:	4618      	mov	r0, r3
 8008bce:	f001 ff99 	bl	800ab04 <knl_wait_delete>

		/* Return to FreeQue */
		QueInsert(&flgcb->wait_queue, &knl_free_flgcb);
 8008bd2:	693b      	ldr	r3, [r7, #16]
 8008bd4:	490f      	ldr	r1, [pc, #60]	@ (8008c14 <tk_del_flg+0x90>)
 8008bd6:	4618      	mov	r0, r3
 8008bd8:	f7ff fee2 	bl	80089a0 <QueInsert>
		flgcb->flgid = 0;
 8008bdc:	693b      	ldr	r3, [r7, #16]
 8008bde:	2200      	movs	r2, #0
 8008be0:	609a      	str	r2, [r3, #8]
	}
	END_CRITICAL_SECTION;
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d10b      	bne.n	8008c00 <tk_del_flg+0x7c>
 8008be8:	4b0b      	ldr	r3, [pc, #44]	@ (8008c18 <tk_del_flg+0x94>)
 8008bea:	681a      	ldr	r2, [r3, #0]
 8008bec:	4b0b      	ldr	r3, [pc, #44]	@ (8008c1c <tk_del_flg+0x98>)
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	429a      	cmp	r2, r3
 8008bf2:	d005      	beq.n	8008c00 <tk_del_flg+0x7c>
 8008bf4:	4b0a      	ldr	r3, [pc, #40]	@ (8008c20 <tk_del_flg+0x9c>)
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d101      	bne.n	8008c00 <tk_del_flg+0x7c>
 8008bfc:	f003 faec 	bl	800c1d8 <knl_dispatch>
 8008c00:	68f8      	ldr	r0, [r7, #12]
 8008c02:	f003 fc32 	bl	800c46a <set_basepri>

	return ercd;
 8008c06:	697b      	ldr	r3, [r7, #20]
}
 8008c08:	4618      	mov	r0, r3
 8008c0a:	3718      	adds	r7, #24
 8008c0c:	46bd      	mov	sp, r7
 8008c0e:	bd80      	pop	{r7, pc}
 8008c10:	24001cc8 	.word	0x24001cc8
 8008c14:	24001e48 	.word	0x24001e48
 8008c18:	240025d8 	.word	0x240025d8
 8008c1c:	240025dc 	.word	0x240025dc
 8008c20:	240025d4 	.word	0x240025d4

08008c24 <tk_set_flg>:

/*
 * Event flag set
 */
SYSCALL ER tk_set_flg( ID flgid, UINT setptn )
{
 8008c24:	b580      	push	{r7, lr}
 8008c26:	b08a      	sub	sp, #40	@ 0x28
 8008c28:	af00      	add	r7, sp, #0
 8008c2a:	6078      	str	r0, [r7, #4]
 8008c2c:	6039      	str	r1, [r7, #0]
	FLGCB	*flgcb;
	TCB	*tcb;
	QUEUE	*queue;
	UINT	wfmode, waiptn;
	ER	ercd = E_OK;
 8008c2e:	2300      	movs	r3, #0
 8008c30:	623b      	str	r3, [r7, #32]

	CHECK_FLGID(flgid);
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	dd02      	ble.n	8008c3e <tk_set_flg+0x1a>
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	2b10      	cmp	r3, #16
 8008c3c:	dd02      	ble.n	8008c44 <tk_set_flg+0x20>
 8008c3e:	f06f 0311 	mvn.w	r3, #17
 8008c42:	e06a      	b.n	8008d1a <tk_set_flg+0xf6>

	flgcb = get_flgcb(flgid);
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	1e5a      	subs	r2, r3, #1
 8008c48:	4613      	mov	r3, r2
 8008c4a:	005b      	lsls	r3, r3, #1
 8008c4c:	4413      	add	r3, r2
 8008c4e:	00db      	lsls	r3, r3, #3
 8008c50:	4a34      	ldr	r2, [pc, #208]	@ (8008d24 <tk_set_flg+0x100>)
 8008c52:	4413      	add	r3, r2
 8008c54:	61fb      	str	r3, [r7, #28]

	BEGIN_CRITICAL_SECTION;
 8008c56:	f003 fc24 	bl	800c4a2 <disint>
 8008c5a:	61b8      	str	r0, [r7, #24]
	if ( flgcb->flgid == 0 ) {
 8008c5c:	69fb      	ldr	r3, [r7, #28]
 8008c5e:	689b      	ldr	r3, [r3, #8]
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d103      	bne.n	8008c6c <tk_set_flg+0x48>
		ercd = E_NOEXS;
 8008c64:	f06f 0329 	mvn.w	r3, #41	@ 0x29
 8008c68:	623b      	str	r3, [r7, #32]
		goto error_exit;
 8008c6a:	e043      	b.n	8008cf4 <tk_set_flg+0xd0>
	}

	/* Set event flag */
	flgcb->flgptn |= setptn;
 8008c6c:	69fb      	ldr	r3, [r7, #28]
 8008c6e:	695a      	ldr	r2, [r3, #20]
 8008c70:	683b      	ldr	r3, [r7, #0]
 8008c72:	431a      	orrs	r2, r3
 8008c74:	69fb      	ldr	r3, [r7, #28]
 8008c76:	615a      	str	r2, [r3, #20]

	/* Search task which should be released */
	queue = flgcb->wait_queue.next;
 8008c78:	69fb      	ldr	r3, [r7, #28]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	627b      	str	r3, [r7, #36]	@ 0x24
	while ( queue != &flgcb->wait_queue ) {
 8008c7e:	e033      	b.n	8008ce8 <tk_set_flg+0xc4>
		tcb = (TCB*)queue;
 8008c80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c82:	617b      	str	r3, [r7, #20]
		queue = queue->next;
 8008c84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	627b      	str	r3, [r7, #36]	@ 0x24

		/* Meet condition for release wait? */
		waiptn = tcb->winfo.flg.waiptn;
 8008c8a:	697b      	ldr	r3, [r7, #20]
 8008c8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008c8e:	613b      	str	r3, [r7, #16]
		wfmode = tcb->winfo.flg.wfmode;
 8008c90:	697b      	ldr	r3, [r7, #20]
 8008c92:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008c94:	60fb      	str	r3, [r7, #12]
		if ( knl_eventflag_cond(flgcb, waiptn, wfmode) ) {
 8008c96:	68fa      	ldr	r2, [r7, #12]
 8008c98:	6939      	ldr	r1, [r7, #16]
 8008c9a:	69f8      	ldr	r0, [r7, #28]
 8008c9c:	f7ff fec6 	bl	8008a2c <knl_eventflag_cond>
 8008ca0:	4603      	mov	r3, r0
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d020      	beq.n	8008ce8 <tk_set_flg+0xc4>

			/* Release wait */
			*tcb->winfo.flg.p_flgptn = flgcb->flgptn;
 8008ca6:	697b      	ldr	r3, [r7, #20]
 8008ca8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008caa:	69fa      	ldr	r2, [r7, #28]
 8008cac:	6952      	ldr	r2, [r2, #20]
 8008cae:	601a      	str	r2, [r3, #0]
			knl_wait_release_ok(tcb);
 8008cb0:	6978      	ldr	r0, [r7, #20]
 8008cb2:	f001 fe9a 	bl	800a9ea <knl_wait_release_ok>

			/* Clear event flag */
			if ( (wfmode & TWF_BITCLR) != 0 ) {
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	f003 0320 	and.w	r3, r3, #32
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d00a      	beq.n	8008cd6 <tk_set_flg+0xb2>
				if ( (flgcb->flgptn &= ~waiptn) == 0 ) {
 8008cc0:	69fb      	ldr	r3, [r7, #28]
 8008cc2:	695a      	ldr	r2, [r3, #20]
 8008cc4:	693b      	ldr	r3, [r7, #16]
 8008cc6:	43db      	mvns	r3, r3
 8008cc8:	401a      	ands	r2, r3
 8008cca:	69fb      	ldr	r3, [r7, #28]
 8008ccc:	615a      	str	r2, [r3, #20]
 8008cce:	69fb      	ldr	r3, [r7, #28]
 8008cd0:	695b      	ldr	r3, [r3, #20]
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d00d      	beq.n	8008cf2 <tk_set_flg+0xce>
					break;
				}
			}
			if ( (wfmode & TWF_CLR) != 0 ) {
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	f003 0310 	and.w	r3, r3, #16
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d003      	beq.n	8008ce8 <tk_set_flg+0xc4>
				flgcb->flgptn = 0;
 8008ce0:	69fb      	ldr	r3, [r7, #28]
 8008ce2:	2200      	movs	r2, #0
 8008ce4:	615a      	str	r2, [r3, #20]
				break;
 8008ce6:	e005      	b.n	8008cf4 <tk_set_flg+0xd0>
	while ( queue != &flgcb->wait_queue ) {
 8008ce8:	69fb      	ldr	r3, [r7, #28]
 8008cea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008cec:	429a      	cmp	r2, r3
 8008cee:	d1c7      	bne.n	8008c80 <tk_set_flg+0x5c>
			}
		}
	}

    error_exit:
 8008cf0:	e000      	b.n	8008cf4 <tk_set_flg+0xd0>
					break;
 8008cf2:	bf00      	nop
	END_CRITICAL_SECTION;
 8008cf4:	69bb      	ldr	r3, [r7, #24]
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d10b      	bne.n	8008d12 <tk_set_flg+0xee>
 8008cfa:	4b0b      	ldr	r3, [pc, #44]	@ (8008d28 <tk_set_flg+0x104>)
 8008cfc:	681a      	ldr	r2, [r3, #0]
 8008cfe:	4b0b      	ldr	r3, [pc, #44]	@ (8008d2c <tk_set_flg+0x108>)
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	429a      	cmp	r2, r3
 8008d04:	d005      	beq.n	8008d12 <tk_set_flg+0xee>
 8008d06:	4b0a      	ldr	r3, [pc, #40]	@ (8008d30 <tk_set_flg+0x10c>)
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d101      	bne.n	8008d12 <tk_set_flg+0xee>
 8008d0e:	f003 fa63 	bl	800c1d8 <knl_dispatch>
 8008d12:	69b8      	ldr	r0, [r7, #24]
 8008d14:	f003 fba9 	bl	800c46a <set_basepri>

	return ercd;
 8008d18:	6a3b      	ldr	r3, [r7, #32]
}
 8008d1a:	4618      	mov	r0, r3
 8008d1c:	3728      	adds	r7, #40	@ 0x28
 8008d1e:	46bd      	mov	sp, r7
 8008d20:	bd80      	pop	{r7, pc}
 8008d22:	bf00      	nop
 8008d24:	24001cc8 	.word	0x24001cc8
 8008d28:	240025d8 	.word	0x240025d8
 8008d2c:	240025dc 	.word	0x240025dc
 8008d30:	240025d4 	.word	0x240025d4

08008d34 <flg_chg_pri>:

/*
 * Processing if the priority of wait task changes
 */
LOCAL void flg_chg_pri( TCB *tcb, INT oldpri )
{
 8008d34:	b580      	push	{r7, lr}
 8008d36:	b084      	sub	sp, #16
 8008d38:	af00      	add	r7, sp, #0
 8008d3a:	6078      	str	r0, [r7, #4]
 8008d3c:	6039      	str	r1, [r7, #0]
	FLGCB	*flgcb;

	flgcb = get_flgcb(tcb->wid);
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008d42:	1e5a      	subs	r2, r3, #1
 8008d44:	4613      	mov	r3, r2
 8008d46:	005b      	lsls	r3, r3, #1
 8008d48:	4413      	add	r3, r2
 8008d4a:	00db      	lsls	r3, r3, #3
 8008d4c:	4a05      	ldr	r2, [pc, #20]	@ (8008d64 <flg_chg_pri+0x30>)
 8008d4e:	4413      	add	r3, r2
 8008d50:	60fb      	str	r3, [r7, #12]
	knl_gcb_change_priority((GCB*)flgcb, tcb);
 8008d52:	6879      	ldr	r1, [r7, #4]
 8008d54:	68f8      	ldr	r0, [r7, #12]
 8008d56:	f001 ff27 	bl	800aba8 <knl_gcb_change_priority>
}
 8008d5a:	bf00      	nop
 8008d5c:	3710      	adds	r7, #16
 8008d5e:	46bd      	mov	sp, r7
 8008d60:	bd80      	pop	{r7, pc}
 8008d62:	bf00      	nop
 8008d64:	24001cc8 	.word	0x24001cc8

08008d68 <tk_wai_flg>:

/*
 * Event flag wait
 */
SYSCALL ER tk_wai_flg( ID flgid, UINT waiptn, UINT wfmode, UINT *p_flgptn, TMO tmout )
{
 8008d68:	b580      	push	{r7, lr}
 8008d6a:	b088      	sub	sp, #32
 8008d6c:	af00      	add	r7, sp, #0
 8008d6e:	60f8      	str	r0, [r7, #12]
 8008d70:	60b9      	str	r1, [r7, #8]
 8008d72:	607a      	str	r2, [r7, #4]
 8008d74:	603b      	str	r3, [r7, #0]
	FLGCB	*flgcb;
	ER	ercd = E_OK;
 8008d76:	2300      	movs	r3, #0
 8008d78:	617b      	str	r3, [r7, #20]

	CHECK_FLGID(flgid);
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	dd02      	ble.n	8008d86 <tk_wai_flg+0x1e>
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	2b10      	cmp	r3, #16
 8008d84:	dd02      	ble.n	8008d8c <tk_wai_flg+0x24>
 8008d86:	f06f 0311 	mvn.w	r3, #17
 8008d8a:	e0a3      	b.n	8008ed4 <tk_wai_flg+0x16c>
	CHECK_PAR(waiptn != 0);
 8008d8c:	68bb      	ldr	r3, [r7, #8]
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d102      	bne.n	8008d98 <tk_wai_flg+0x30>
 8008d92:	f06f 0310 	mvn.w	r3, #16
 8008d96:	e09d      	b.n	8008ed4 <tk_wai_flg+0x16c>
	CHECK_PAR((wfmode & ~(TWF_ORW|TWF_CLR|TWF_BITCLR)) == 0);
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	f023 0331 	bic.w	r3, r3, #49	@ 0x31
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d002      	beq.n	8008da8 <tk_wai_flg+0x40>
 8008da2:	f06f 0310 	mvn.w	r3, #16
 8008da6:	e095      	b.n	8008ed4 <tk_wai_flg+0x16c>
	CHECK_TMOUT(tmout);
 8008da8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008daa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008dae:	da02      	bge.n	8008db6 <tk_wai_flg+0x4e>
 8008db0:	f06f 0310 	mvn.w	r3, #16
 8008db4:	e08e      	b.n	8008ed4 <tk_wai_flg+0x16c>
	CHECK_DISPATCH();
 8008db6:	4b49      	ldr	r3, [pc, #292]	@ (8008edc <tk_wai_flg+0x174>)
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d10d      	bne.n	8008dda <tk_wai_flg+0x72>
 8008dbe:	f7ff fe25 	bl	8008a0c <knl_isTaskIndependent>
 8008dc2:	4603      	mov	r3, r0
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d108      	bne.n	8008dda <tk_wai_flg+0x72>
 8008dc8:	4b45      	ldr	r3, [pc, #276]	@ (8008ee0 <tk_wai_flg+0x178>)
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d004      	beq.n	8008dda <tk_wai_flg+0x72>
 8008dd0:	f003 fb5a 	bl	800c488 <get_basepri>
 8008dd4:	4603      	mov	r3, r0
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d002      	beq.n	8008de0 <tk_wai_flg+0x78>
 8008dda:	f06f 0318 	mvn.w	r3, #24
 8008dde:	e079      	b.n	8008ed4 <tk_wai_flg+0x16c>

	flgcb = get_flgcb(flgid);
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	1e5a      	subs	r2, r3, #1
 8008de4:	4613      	mov	r3, r2
 8008de6:	005b      	lsls	r3, r3, #1
 8008de8:	4413      	add	r3, r2
 8008dea:	00db      	lsls	r3, r3, #3
 8008dec:	4a3d      	ldr	r2, [pc, #244]	@ (8008ee4 <tk_wai_flg+0x17c>)
 8008dee:	4413      	add	r3, r2
 8008df0:	61fb      	str	r3, [r7, #28]

	BEGIN_CRITICAL_SECTION;
 8008df2:	f003 fb56 	bl	800c4a2 <disint>
 8008df6:	61b8      	str	r0, [r7, #24]
	if ( flgcb->flgid == 0 ) {
 8008df8:	69fb      	ldr	r3, [r7, #28]
 8008dfa:	689b      	ldr	r3, [r3, #8]
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d103      	bne.n	8008e08 <tk_wai_flg+0xa0>
		ercd = E_NOEXS;
 8008e00:	f06f 0329 	mvn.w	r3, #41	@ 0x29
 8008e04:	617b      	str	r3, [r7, #20]
		goto error_exit;
 8008e06:	e052      	b.n	8008eae <tk_wai_flg+0x146>
	}
	if ( (flgcb->flgatr & TA_WMUL) == 0 && !isQueEmpty(&flgcb->wait_queue) ) {
 8008e08:	69fb      	ldr	r3, [r7, #28]
 8008e0a:	691b      	ldr	r3, [r3, #16]
 8008e0c:	f003 0308 	and.w	r3, r3, #8
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d10a      	bne.n	8008e2a <tk_wai_flg+0xc2>
 8008e14:	69fb      	ldr	r3, [r7, #28]
 8008e16:	4618      	mov	r0, r3
 8008e18:	f7ff fdb0 	bl	800897c <isQueEmpty>
 8008e1c:	4603      	mov	r3, r0
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d103      	bne.n	8008e2a <tk_wai_flg+0xc2>
		/* Disable multiple tasks wait */
		ercd = E_OBJ;
 8008e22:	f06f 0328 	mvn.w	r3, #40	@ 0x28
 8008e26:	617b      	str	r3, [r7, #20]
		goto error_exit;
 8008e28:	e041      	b.n	8008eae <tk_wai_flg+0x146>
	}

	/* Meet condition for release wait? */
	if ( knl_eventflag_cond(flgcb, waiptn, wfmode) ) {
 8008e2a:	687a      	ldr	r2, [r7, #4]
 8008e2c:	68b9      	ldr	r1, [r7, #8]
 8008e2e:	69f8      	ldr	r0, [r7, #28]
 8008e30:	f7ff fdfc 	bl	8008a2c <knl_eventflag_cond>
 8008e34:	4603      	mov	r3, r0
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d018      	beq.n	8008e6c <tk_wai_flg+0x104>
		*p_flgptn = flgcb->flgptn;
 8008e3a:	69fb      	ldr	r3, [r7, #28]
 8008e3c:	695a      	ldr	r2, [r3, #20]
 8008e3e:	683b      	ldr	r3, [r7, #0]
 8008e40:	601a      	str	r2, [r3, #0]

		/* Clear event flag */
		if ( (wfmode & TWF_BITCLR) != 0 ) {
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	f003 0320 	and.w	r3, r3, #32
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d006      	beq.n	8008e5a <tk_wai_flg+0xf2>
			flgcb->flgptn &= ~waiptn;
 8008e4c:	69fb      	ldr	r3, [r7, #28]
 8008e4e:	695a      	ldr	r2, [r3, #20]
 8008e50:	68bb      	ldr	r3, [r7, #8]
 8008e52:	43db      	mvns	r3, r3
 8008e54:	401a      	ands	r2, r3
 8008e56:	69fb      	ldr	r3, [r7, #28]
 8008e58:	615a      	str	r2, [r3, #20]
		}
		if ( (wfmode & TWF_CLR) != 0 ) {
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	f003 0310 	and.w	r3, r3, #16
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d024      	beq.n	8008eae <tk_wai_flg+0x146>
			flgcb->flgptn = 0;
 8008e64:	69fb      	ldr	r3, [r7, #28]
 8008e66:	2200      	movs	r2, #0
 8008e68:	615a      	str	r2, [r3, #20]
 8008e6a:	e020      	b.n	8008eae <tk_wai_flg+0x146>
		}
	} else {
		/* Ready for wait */
		knl_ctxtsk->wspec = ( (flgcb->flgatr & TA_TPRI) != 0 )?
 8008e6c:	69fb      	ldr	r3, [r7, #28]
 8008e6e:	691b      	ldr	r3, [r3, #16]
 8008e70:	f003 0301 	and.w	r3, r3, #1
					&knl_wspec_flg_tpri: &knl_wspec_flg_tfifo;
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d001      	beq.n	8008e7c <tk_wai_flg+0x114>
 8008e78:	4a1b      	ldr	r2, [pc, #108]	@ (8008ee8 <tk_wai_flg+0x180>)
 8008e7a:	e000      	b.n	8008e7e <tk_wai_flg+0x116>
 8008e7c:	4a1b      	ldr	r2, [pc, #108]	@ (8008eec <tk_wai_flg+0x184>)
		knl_ctxtsk->wspec = ( (flgcb->flgatr & TA_TPRI) != 0 )?
 8008e7e:	4b18      	ldr	r3, [pc, #96]	@ (8008ee0 <tk_wai_flg+0x178>)
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	62da      	str	r2, [r3, #44]	@ 0x2c
		knl_ctxtsk->wercd = &ercd;
 8008e84:	4b16      	ldr	r3, [pc, #88]	@ (8008ee0 <tk_wai_flg+0x178>)
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	f107 0214 	add.w	r2, r7, #20
 8008e8c:	63da      	str	r2, [r3, #60]	@ 0x3c
		knl_ctxtsk->winfo.flg.waiptn = waiptn;
 8008e8e:	4b14      	ldr	r3, [pc, #80]	@ (8008ee0 <tk_wai_flg+0x178>)
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	68ba      	ldr	r2, [r7, #8]
 8008e94:	641a      	str	r2, [r3, #64]	@ 0x40
		knl_ctxtsk->winfo.flg.wfmode = wfmode;
 8008e96:	4b12      	ldr	r3, [pc, #72]	@ (8008ee0 <tk_wai_flg+0x178>)
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	687a      	ldr	r2, [r7, #4]
 8008e9c:	645a      	str	r2, [r3, #68]	@ 0x44
		knl_ctxtsk->winfo.flg.p_flgptn = p_flgptn;
 8008e9e:	4b10      	ldr	r3, [pc, #64]	@ (8008ee0 <tk_wai_flg+0x178>)
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	683a      	ldr	r2, [r7, #0]
 8008ea4:	649a      	str	r2, [r3, #72]	@ 0x48
		knl_gcb_make_wait((GCB*)flgcb, tmout);
 8008ea6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008ea8:	69f8      	ldr	r0, [r7, #28]
 8008eaa:	f001 fe47 	bl	800ab3c <knl_gcb_make_wait>
	}

    error_exit:
	END_CRITICAL_SECTION;
 8008eae:	69bb      	ldr	r3, [r7, #24]
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d10b      	bne.n	8008ecc <tk_wai_flg+0x164>
 8008eb4:	4b0a      	ldr	r3, [pc, #40]	@ (8008ee0 <tk_wai_flg+0x178>)
 8008eb6:	681a      	ldr	r2, [r3, #0]
 8008eb8:	4b0d      	ldr	r3, [pc, #52]	@ (8008ef0 <tk_wai_flg+0x188>)
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	429a      	cmp	r2, r3
 8008ebe:	d005      	beq.n	8008ecc <tk_wai_flg+0x164>
 8008ec0:	4b06      	ldr	r3, [pc, #24]	@ (8008edc <tk_wai_flg+0x174>)
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d101      	bne.n	8008ecc <tk_wai_flg+0x164>
 8008ec8:	f003 f986 	bl	800c1d8 <knl_dispatch>
 8008ecc:	69b8      	ldr	r0, [r7, #24]
 8008ece:	f003 facc 	bl	800c46a <set_basepri>

	return ercd;
 8008ed2:	697b      	ldr	r3, [r7, #20]
}
 8008ed4:	4618      	mov	r0, r3
 8008ed6:	3720      	adds	r7, #32
 8008ed8:	46bd      	mov	sp, r7
 8008eda:	bd80      	pop	{r7, pc}
 8008edc:	240025d4 	.word	0x240025d4
 8008ee0:	240025d8 	.word	0x240025d8
 8008ee4:	24001cc8 	.word	0x24001cc8
 8008ee8:	0800d1e4 	.word	0x0800d1e4
 8008eec:	0800d1d8 	.word	0x0800d1d8
 8008ef0:	240025dc 	.word	0x240025dc

08008ef4 <QueInit>:
{
 8008ef4:	b480      	push	{r7}
 8008ef6:	b083      	sub	sp, #12
 8008ef8:	af00      	add	r7, sp, #0
 8008efa:	6078      	str	r0, [r7, #4]
	que->next = (struct queue *)que;
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	687a      	ldr	r2, [r7, #4]
 8008f00:	601a      	str	r2, [r3, #0]
	que->prev = (struct queue *)que;
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	687a      	ldr	r2, [r7, #4]
 8008f06:	605a      	str	r2, [r3, #4]
}
 8008f08:	bf00      	nop
 8008f0a:	370c      	adds	r7, #12
 8008f0c:	46bd      	mov	sp, r7
 8008f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f12:	4770      	bx	lr

08008f14 <QueInsert>:
{
 8008f14:	b480      	push	{r7}
 8008f16:	b083      	sub	sp, #12
 8008f18:	af00      	add	r7, sp, #0
 8008f1a:	6078      	str	r0, [r7, #4]
 8008f1c:	6039      	str	r1, [r7, #0]
	entry->prev = (struct queue*) que->prev;
 8008f1e:	683b      	ldr	r3, [r7, #0]
 8008f20:	685a      	ldr	r2, [r3, #4]
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	605a      	str	r2, [r3, #4]
	entry->next = que;
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	683a      	ldr	r2, [r7, #0]
 8008f2a:	601a      	str	r2, [r3, #0]
	que->prev->next = entry;
 8008f2c:	683b      	ldr	r3, [r7, #0]
 8008f2e:	685b      	ldr	r3, [r3, #4]
 8008f30:	687a      	ldr	r2, [r7, #4]
 8008f32:	601a      	str	r2, [r3, #0]
	que->prev = entry;
 8008f34:	683b      	ldr	r3, [r7, #0]
 8008f36:	687a      	ldr	r2, [r7, #4]
 8008f38:	605a      	str	r2, [r3, #4]
}
 8008f3a:	bf00      	nop
 8008f3c:	370c      	adds	r7, #12
 8008f3e:	46bd      	mov	sp, r7
 8008f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f44:	4770      	bx	lr
	...

08008f48 <knl_mailbox_initialize>:

/*
 * Initialization of mailbox control block 
 */
EXPORT ER knl_mailbox_initialize( void )
{
 8008f48:	b580      	push	{r7, lr}
 8008f4a:	b082      	sub	sp, #8
 8008f4c:	af00      	add	r7, sp, #0
	if ( NUM_MBXID < 1 ) {
		return E_SYS;
	}

	/* Register all control blocks onto FreeQue */
	QueInit(&knl_free_mbxcb);
 8008f4e:	480e      	ldr	r0, [pc, #56]	@ (8008f88 <knl_mailbox_initialize+0x40>)
 8008f50:	f7ff ffd0 	bl	8008ef4 <QueInit>
	end = knl_mbxcb_table + NUM_MBXID;
 8008f54:	4b0d      	ldr	r3, [pc, #52]	@ (8008f8c <knl_mailbox_initialize+0x44>)
 8008f56:	603b      	str	r3, [r7, #0]
	for ( mbxcb = knl_mbxcb_table; mbxcb < end; mbxcb++ ) {
 8008f58:	4b0d      	ldr	r3, [pc, #52]	@ (8008f90 <knl_mailbox_initialize+0x48>)
 8008f5a:	607b      	str	r3, [r7, #4]
 8008f5c:	e00a      	b.n	8008f74 <knl_mailbox_initialize+0x2c>
		mbxcb->mbxid = 0;
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	2200      	movs	r2, #0
 8008f62:	609a      	str	r2, [r3, #8]
		QueInsert(&mbxcb->wait_queue, &knl_free_mbxcb);
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	4908      	ldr	r1, [pc, #32]	@ (8008f88 <knl_mailbox_initialize+0x40>)
 8008f68:	4618      	mov	r0, r3
 8008f6a:	f7ff ffd3 	bl	8008f14 <QueInsert>
	for ( mbxcb = knl_mbxcb_table; mbxcb < end; mbxcb++ ) {
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	331c      	adds	r3, #28
 8008f72:	607b      	str	r3, [r7, #4]
 8008f74:	687a      	ldr	r2, [r7, #4]
 8008f76:	683b      	ldr	r3, [r7, #0]
 8008f78:	429a      	cmp	r2, r3
 8008f7a:	d3f0      	bcc.n	8008f5e <knl_mailbox_initialize+0x16>
	}

	return E_OK;
 8008f7c:	2300      	movs	r3, #0
}
 8008f7e:	4618      	mov	r0, r3
 8008f80:	3708      	adds	r7, #8
 8008f82:	46bd      	mov	sp, r7
 8008f84:	bd80      	pop	{r7, pc}
 8008f86:	bf00      	nop
 8008f88:	24001f30 	.word	0x24001f30
 8008f8c:	24001f30 	.word	0x24001f30
 8008f90:	24001e50 	.word	0x24001e50

08008f94 <QueInit>:
{
 8008f94:	b480      	push	{r7}
 8008f96:	b083      	sub	sp, #12
 8008f98:	af00      	add	r7, sp, #0
 8008f9a:	6078      	str	r0, [r7, #4]
	que->next = (struct queue *)que;
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	687a      	ldr	r2, [r7, #4]
 8008fa0:	601a      	str	r2, [r3, #0]
	que->prev = (struct queue *)que;
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	687a      	ldr	r2, [r7, #4]
 8008fa6:	605a      	str	r2, [r3, #4]
}
 8008fa8:	bf00      	nop
 8008faa:	370c      	adds	r7, #12
 8008fac:	46bd      	mov	sp, r7
 8008fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fb2:	4770      	bx	lr

08008fb4 <QueInsert>:
{
 8008fb4:	b480      	push	{r7}
 8008fb6:	b083      	sub	sp, #12
 8008fb8:	af00      	add	r7, sp, #0
 8008fba:	6078      	str	r0, [r7, #4]
 8008fbc:	6039      	str	r1, [r7, #0]
	entry->prev = (struct queue*) que->prev;
 8008fbe:	683b      	ldr	r3, [r7, #0]
 8008fc0:	685a      	ldr	r2, [r3, #4]
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	605a      	str	r2, [r3, #4]
	entry->next = que;
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	683a      	ldr	r2, [r7, #0]
 8008fca:	601a      	str	r2, [r3, #0]
	que->prev->next = entry;
 8008fcc:	683b      	ldr	r3, [r7, #0]
 8008fce:	685b      	ldr	r3, [r3, #4]
 8008fd0:	687a      	ldr	r2, [r7, #4]
 8008fd2:	601a      	str	r2, [r3, #0]
	que->prev = entry;
 8008fd4:	683b      	ldr	r3, [r7, #0]
 8008fd6:	687a      	ldr	r2, [r7, #4]
 8008fd8:	605a      	str	r2, [r3, #4]
}
 8008fda:	bf00      	nop
 8008fdc:	370c      	adds	r7, #12
 8008fde:	46bd      	mov	sp, r7
 8008fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fe4:	4770      	bx	lr

08008fe6 <QueRemove>:
{
 8008fe6:	b480      	push	{r7}
 8008fe8:	b083      	sub	sp, #12
 8008fea:	af00      	add	r7, sp, #0
 8008fec:	6078      	str	r0, [r7, #4]
	if ( entry->next != entry ) {
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	687a      	ldr	r2, [r7, #4]
 8008ff4:	429a      	cmp	r2, r3
 8008ff6:	d009      	beq.n	800900c <QueRemove+0x26>
		entry->prev->next = (struct queue*) entry->next;
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	685b      	ldr	r3, [r3, #4]
 8008ffc:	687a      	ldr	r2, [r7, #4]
 8008ffe:	6812      	ldr	r2, [r2, #0]
 8009000:	601a      	str	r2, [r3, #0]
		entry->next->prev = (struct queue*) entry->prev;
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	687a      	ldr	r2, [r7, #4]
 8009008:	6852      	ldr	r2, [r2, #4]
 800900a:	605a      	str	r2, [r3, #4]
}
 800900c:	bf00      	nop
 800900e:	370c      	adds	r7, #12
 8009010:	46bd      	mov	sp, r7
 8009012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009016:	4770      	bx	lr

08009018 <knl_searchFreeArea>:
 *	or larger than
 *      'blksz' but closest.
 *	If it does not exist, return '&imacb->freeque'.
 */
EXPORT QUEUE* knl_searchFreeArea( IMACB *imacb, W blksz )
{
 8009018:	b480      	push	{r7}
 800901a:	b085      	sub	sp, #20
 800901c:	af00      	add	r7, sp, #0
 800901e:	6078      	str	r0, [r7, #4]
 8009020:	6039      	str	r1, [r7, #0]
	QUEUE	*q = &imacb->freeque;
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	330c      	adds	r3, #12
 8009026:	60fb      	str	r3, [r7, #12]

	/* For area whose memory pool size is less than 1/4,
	   search from smaller size.
	   Otherwise, search from larger size. */
	if ( blksz > imacb->memsz / 4 ) {
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	2b00      	cmp	r3, #0
 800902e:	da00      	bge.n	8009032 <knl_searchFreeArea+0x1a>
 8009030:	3303      	adds	r3, #3
 8009032:	109b      	asrs	r3, r3, #2
 8009034:	461a      	mov	r2, r3
 8009036:	683b      	ldr	r3, [r7, #0]
 8009038:	4293      	cmp	r3, r2
 800903a:	dd2b      	ble.n	8009094 <knl_searchFreeArea+0x7c>
		/* Search from larger size. */
		W fsz = 0;
 800903c:	2300      	movs	r3, #0
 800903e:	60bb      	str	r3, [r7, #8]
		while ( (q = q->prev) != &imacb->freeque ) {
 8009040:	e010      	b.n	8009064 <knl_searchFreeArea+0x4c>
			fsz = FreeSize(q);
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	3308      	adds	r3, #8
 8009046:	685b      	ldr	r3, [r3, #4]
 8009048:	60bb      	str	r3, [r7, #8]
			if ( fsz <= blksz ) {
 800904a:	68ba      	ldr	r2, [r7, #8]
 800904c:	683b      	ldr	r3, [r7, #0]
 800904e:	429a      	cmp	r2, r3
 8009050:	dc08      	bgt.n	8009064 <knl_searchFreeArea+0x4c>
				return ( fsz < blksz )? q->next: q;
 8009052:	68ba      	ldr	r2, [r7, #8]
 8009054:	683b      	ldr	r3, [r7, #0]
 8009056:	429a      	cmp	r2, r3
 8009058:	da02      	bge.n	8009060 <knl_searchFreeArea+0x48>
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	e024      	b.n	80090aa <knl_searchFreeArea+0x92>
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	e022      	b.n	80090aa <knl_searchFreeArea+0x92>
		while ( (q = q->prev) != &imacb->freeque ) {
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	685b      	ldr	r3, [r3, #4]
 8009068:	60fb      	str	r3, [r7, #12]
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	330c      	adds	r3, #12
 800906e:	68fa      	ldr	r2, [r7, #12]
 8009070:	429a      	cmp	r2, r3
 8009072:	d1e6      	bne.n	8009042 <knl_searchFreeArea+0x2a>
			}
		}
		return ( fsz >= blksz )? q->next: q;
 8009074:	68ba      	ldr	r2, [r7, #8]
 8009076:	683b      	ldr	r3, [r7, #0]
 8009078:	429a      	cmp	r2, r3
 800907a:	db02      	blt.n	8009082 <knl_searchFreeArea+0x6a>
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	e013      	b.n	80090aa <knl_searchFreeArea+0x92>
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	e011      	b.n	80090aa <knl_searchFreeArea+0x92>
	} else {
		/* Search from smaller size. */
		while ( (q = q->next) != &imacb->freeque ) {
			if ( FreeSize(q) >= blksz ) {
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	3308      	adds	r3, #8
 800908a:	685b      	ldr	r3, [r3, #4]
 800908c:	461a      	mov	r2, r3
 800908e:	683b      	ldr	r3, [r7, #0]
 8009090:	4293      	cmp	r3, r2
 8009092:	dd08      	ble.n	80090a6 <knl_searchFreeArea+0x8e>
		while ( (q = q->next) != &imacb->freeque ) {
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	60fb      	str	r3, [r7, #12]
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	330c      	adds	r3, #12
 800909e:	68fa      	ldr	r2, [r7, #12]
 80090a0:	429a      	cmp	r2, r3
 80090a2:	d1f0      	bne.n	8009086 <knl_searchFreeArea+0x6e>
 80090a4:	e000      	b.n	80090a8 <knl_searchFreeArea+0x90>
				break;
 80090a6:	bf00      	nop
			}
		}
		return q;
 80090a8:	68fb      	ldr	r3, [r7, #12]
	}
}
 80090aa:	4618      	mov	r0, r3
 80090ac:	3714      	adds	r7, #20
 80090ae:	46bd      	mov	sp, r7
 80090b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090b4:	4770      	bx	lr

080090b6 <knl_appendFreeArea>:
 *	|   +-----------------------+	    +-----------------------+
 *	|   | AreaQue		    |	    | AreaQue		    |
 *	v   +-----------------------+	    +-----------------------+
 */
EXPORT void knl_appendFreeArea( IMACB *imacb, QUEUE *aq )
{
 80090b6:	b580      	push	{r7, lr}
 80090b8:	b084      	sub	sp, #16
 80090ba:	af00      	add	r7, sp, #0
 80090bc:	6078      	str	r0, [r7, #4]
 80090be:	6039      	str	r1, [r7, #0]
	QUEUE	*fq;
	W	size = AreaSize(aq);
 80090c0:	683b      	ldr	r3, [r7, #0]
 80090c2:	681a      	ldr	r2, [r3, #0]
 80090c4:	683b      	ldr	r3, [r7, #0]
 80090c6:	3308      	adds	r3, #8
 80090c8:	1ad3      	subs	r3, r2, r3
 80090ca:	60fb      	str	r3, [r7, #12]
	/* Registration position search */
	/*  Search the free area whose size is equal to 'blksz',
	 *  or larger than 'blksz' but closest.
	 *  If it does not exist, return '&imacb->freeque'.
	 */
	fq = knl_searchFreeArea(imacb, size);
 80090cc:	68f9      	ldr	r1, [r7, #12]
 80090ce:	6878      	ldr	r0, [r7, #4]
 80090d0:	f7ff ffa2 	bl	8009018 <knl_searchFreeArea>
 80090d4:	60b8      	str	r0, [r7, #8]

	/* Register */
	clrAreaFlag(aq, AREA_USE);
 80090d6:	683b      	ldr	r3, [r7, #0]
 80090d8:	685b      	ldr	r3, [r3, #4]
 80090da:	f023 0301 	bic.w	r3, r3, #1
 80090de:	461a      	mov	r2, r3
 80090e0:	683b      	ldr	r3, [r7, #0]
 80090e2:	605a      	str	r2, [r3, #4]
	if ( fq != &imacb->freeque && FreeSize(fq) == size ) {
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	330c      	adds	r3, #12
 80090e8:	68ba      	ldr	r2, [r7, #8]
 80090ea:	429a      	cmp	r2, r3
 80090ec:	d027      	beq.n	800913e <knl_appendFreeArea+0x88>
 80090ee:	68bb      	ldr	r3, [r7, #8]
 80090f0:	3308      	adds	r3, #8
 80090f2:	685b      	ldr	r3, [r3, #4]
 80090f4:	461a      	mov	r2, r3
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	4293      	cmp	r3, r2
 80090fa:	d120      	bne.n	800913e <knl_appendFreeArea+0x88>
		/* FreeQue Same size */
		(aq + 2)->next = (fq + 1)->next;
 80090fc:	68bb      	ldr	r3, [r7, #8]
 80090fe:	f103 0208 	add.w	r2, r3, #8
 8009102:	683b      	ldr	r3, [r7, #0]
 8009104:	3310      	adds	r3, #16
 8009106:	6812      	ldr	r2, [r2, #0]
 8009108:	601a      	str	r2, [r3, #0]
		(fq + 1)->next = aq + 2;
 800910a:	68bb      	ldr	r3, [r7, #8]
 800910c:	3308      	adds	r3, #8
 800910e:	683a      	ldr	r2, [r7, #0]
 8009110:	3210      	adds	r2, #16
 8009112:	601a      	str	r2, [r3, #0]
		(aq + 2)->prev = fq + 1;
 8009114:	683b      	ldr	r3, [r7, #0]
 8009116:	3310      	adds	r3, #16
 8009118:	68ba      	ldr	r2, [r7, #8]
 800911a:	3208      	adds	r2, #8
 800911c:	605a      	str	r2, [r3, #4]
		if( (aq + 2)->next != NULL ) {
 800911e:	683b      	ldr	r3, [r7, #0]
 8009120:	3310      	adds	r3, #16
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	2b00      	cmp	r3, #0
 8009126:	d005      	beq.n	8009134 <knl_appendFreeArea+0x7e>
			(aq + 2)->next->prev = aq + 2;
 8009128:	683b      	ldr	r3, [r7, #0]
 800912a:	3310      	adds	r3, #16
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	683a      	ldr	r2, [r7, #0]
 8009130:	3210      	adds	r2, #16
 8009132:	605a      	str	r2, [r3, #4]
		}
		(aq + 1)->next = NULL;
 8009134:	683b      	ldr	r3, [r7, #0]
 8009136:	3308      	adds	r3, #8
 8009138:	2200      	movs	r2, #0
 800913a:	601a      	str	r2, [r3, #0]
 800913c:	e00e      	b.n	800915c <knl_appendFreeArea+0xa6>
	} else {
		/* FreeQue Size order */
		QueInsert(aq + 1, fq);
 800913e:	683b      	ldr	r3, [r7, #0]
 8009140:	3308      	adds	r3, #8
 8009142:	68b9      	ldr	r1, [r7, #8]
 8009144:	4618      	mov	r0, r3
 8009146:	f7ff ff35 	bl	8008fb4 <QueInsert>
		(aq + 2)->next = NULL;
 800914a:	683b      	ldr	r3, [r7, #0]
 800914c:	3310      	adds	r3, #16
 800914e:	2200      	movs	r2, #0
 8009150:	601a      	str	r2, [r3, #0]
		(aq + 2)->prev = (QUEUE*)size;
 8009152:	683b      	ldr	r3, [r7, #0]
 8009154:	3310      	adds	r3, #16
 8009156:	68fa      	ldr	r2, [r7, #12]
 8009158:	605a      	str	r2, [r3, #4]
	}
}
 800915a:	bf00      	nop
 800915c:	bf00      	nop
 800915e:	3710      	adds	r7, #16
 8009160:	46bd      	mov	sp, r7
 8009162:	bd80      	pop	{r7, pc}

08009164 <knl_removeFreeQue>:

/*
 * Delete from FreeQue
 */
EXPORT void knl_removeFreeQue( QUEUE *fq )
{
 8009164:	b580      	push	{r7, lr}
 8009166:	b082      	sub	sp, #8
 8009168:	af00      	add	r7, sp, #0
 800916a:	6078      	str	r0, [r7, #4]
	if ( fq->next == NULL ) {	/* FreeQue Same size */
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	2b00      	cmp	r3, #0
 8009172:	d115      	bne.n	80091a0 <knl_removeFreeQue+0x3c>
		(fq + 1)->prev->next = (fq + 1)->next;
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	f103 0208 	add.w	r2, r3, #8
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	3308      	adds	r3, #8
 800917e:	685b      	ldr	r3, [r3, #4]
 8009180:	6812      	ldr	r2, [r2, #0]
 8009182:	601a      	str	r2, [r3, #0]
		if ( (fq + 1)->next != NULL ) {
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	3308      	adds	r3, #8
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	2b00      	cmp	r3, #0
 800918c:	d020      	beq.n	80091d0 <knl_removeFreeQue+0x6c>
			(fq + 1)->next->prev = (fq + 1)->prev;
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	f103 0208 	add.w	r2, r3, #8
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	3308      	adds	r3, #8
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	6852      	ldr	r2, [r2, #4]
 800919c:	605a      	str	r2, [r3, #4]
			QueInsert((fq + 1)->next - 1, fq);
			(fq + 1)->next->prev = (fq + 1)->prev;
		}
		QueRemove(fq);
	}
}
 800919e:	e017      	b.n	80091d0 <knl_removeFreeQue+0x6c>
		if ( (fq + 1)->next != NULL ) {		/* having FreeQue Same size */
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	3308      	adds	r3, #8
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d00f      	beq.n	80091ca <knl_removeFreeQue+0x66>
			QueInsert((fq + 1)->next - 1, fq);
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	3308      	adds	r3, #8
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	3b08      	subs	r3, #8
 80091b2:	6879      	ldr	r1, [r7, #4]
 80091b4:	4618      	mov	r0, r3
 80091b6:	f7ff fefd 	bl	8008fb4 <QueInsert>
			(fq + 1)->next->prev = (fq + 1)->prev;
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	f103 0208 	add.w	r2, r3, #8
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	3308      	adds	r3, #8
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	6852      	ldr	r2, [r2, #4]
 80091c8:	605a      	str	r2, [r3, #4]
		QueRemove(fq);
 80091ca:	6878      	ldr	r0, [r7, #4]
 80091cc:	f7ff ff0b 	bl	8008fe6 <QueRemove>
}
 80091d0:	bf00      	nop
 80091d2:	3708      	adds	r7, #8
 80091d4:	46bd      	mov	sp, r7
 80091d6:	bd80      	pop	{r7, pc}

080091d8 <knl_insertAreaQue>:
/*
 * Register area
 *	Insert 'ent' just after 'que.'
 */
EXPORT void knl_insertAreaQue( QUEUE *que, QUEUE *ent )
{
 80091d8:	b480      	push	{r7}
 80091da:	b083      	sub	sp, #12
 80091dc:	af00      	add	r7, sp, #0
 80091de:	6078      	str	r0, [r7, #4]
 80091e0:	6039      	str	r1, [r7, #0]
	ent->prev = que;
 80091e2:	683b      	ldr	r3, [r7, #0]
 80091e4:	687a      	ldr	r2, [r7, #4]
 80091e6:	605a      	str	r2, [r3, #4]
	ent->next = que->next;
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	681a      	ldr	r2, [r3, #0]
 80091ec:	683b      	ldr	r3, [r7, #0]
 80091ee:	601a      	str	r2, [r3, #0]
	Assign(que->next->prev, ent);
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	685b      	ldr	r3, [r3, #4]
 80091f6:	f003 0201 	and.w	r2, r3, #1
 80091fa:	683b      	ldr	r3, [r7, #0]
 80091fc:	431a      	orrs	r2, r3
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	605a      	str	r2, [r3, #4]
	que->next = ent;
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	683a      	ldr	r2, [r7, #0]
 8009208:	601a      	str	r2, [r3, #0]
}
 800920a:	bf00      	nop
 800920c:	370c      	adds	r7, #12
 800920e:	46bd      	mov	sp, r7
 8009210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009214:	4770      	bx	lr

08009216 <knl_removeAreaQue>:

/*
 * Delete area
 */
EXPORT void knl_removeAreaQue( QUEUE *aq )
{
 8009216:	b480      	push	{r7}
 8009218:	b083      	sub	sp, #12
 800921a:	af00      	add	r7, sp, #0
 800921c:	6078      	str	r0, [r7, #4]
	Mask(aq->prev)->next = aq->next;
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	685b      	ldr	r3, [r3, #4]
 8009222:	f023 0301 	bic.w	r3, r3, #1
 8009226:	461a      	mov	r2, r3
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	6013      	str	r3, [r2, #0]
	Assign(aq->next->prev, Mask(aq->prev));
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	685b      	ldr	r3, [r3, #4]
 8009234:	f003 0201 	and.w	r2, r3, #1
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	685b      	ldr	r3, [r3, #4]
 800923c:	f023 0301 	bic.w	r3, r3, #1
 8009240:	431a      	orrs	r2, r3
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	605a      	str	r2, [r3, #4]
}
 8009248:	bf00      	nop
 800924a:	370c      	adds	r7, #12
 800924c:	46bd      	mov	sp, r7
 800924e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009252:	4770      	bx	lr

08009254 <knl_Imalloc>:

/*
 * Memory allocate
 */
EXPORT void* knl_Imalloc( SZ size )
{
 8009254:	b580      	push	{r7, lr}
 8009256:	b086      	sub	sp, #24
 8009258:	af00      	add	r7, sp, #0
 800925a:	6078      	str	r0, [r7, #4]
	QUEUE	*q, *aq, *aq2;
	UINT	imask;

	/* If it is smaller than the minimum fragment size,
	   allocate the minimum size to it. */
	if( size <= 0 ) {
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	2b00      	cmp	r3, #0
 8009260:	dc01      	bgt.n	8009266 <knl_Imalloc+0x12>
		return (void *)NULL;
 8009262:	2300      	movs	r3, #0
 8009264:	e045      	b.n	80092f2 <knl_Imalloc+0x9e>
	} else 	if ( size < MIN_FRAGMENT ) {
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	2b0f      	cmp	r3, #15
 800926a:	d802      	bhi.n	8009272 <knl_Imalloc+0x1e>
		size = MIN_FRAGMENT;
 800926c:	2310      	movs	r3, #16
 800926e:	607b      	str	r3, [r7, #4]
 8009270:	e004      	b.n	800927c <knl_Imalloc+0x28>
	} else {
		size = ROUND(size);
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	3307      	adds	r3, #7
 8009276:	f023 0307 	bic.w	r3, r3, #7
 800927a:	607b      	str	r3, [r7, #4]
	}

	DI(imask);  /* Exclusive control by interrupt disable */
 800927c:	f003 f911 	bl	800c4a2 <disint>
 8009280:	6138      	str	r0, [r7, #16]

	/* Search FreeQue */
	q = knl_searchFreeArea(knl_imacb, size);
 8009282:	4b1e      	ldr	r3, [pc, #120]	@ (80092fc <knl_Imalloc+0xa8>)
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	6879      	ldr	r1, [r7, #4]
 8009288:	4618      	mov	r0, r3
 800928a:	f7ff fec5 	bl	8009018 <knl_searchFreeArea>
 800928e:	6178      	str	r0, [r7, #20]
	if ( q == &(knl_imacb->freeque) ) {
 8009290:	4b1a      	ldr	r3, [pc, #104]	@ (80092fc <knl_Imalloc+0xa8>)
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	330c      	adds	r3, #12
 8009296:	697a      	ldr	r2, [r7, #20]
 8009298:	429a      	cmp	r2, r3
 800929a:	d102      	bne.n	80092a2 <knl_Imalloc+0x4e>
		q = NULL; /* Insufficient memory */
 800929c:	2300      	movs	r3, #0
 800929e:	617b      	str	r3, [r7, #20]
		goto err_ret;
 80092a0:	e023      	b.n	80092ea <knl_Imalloc+0x96>
	}

	/* There is free area: Split from FreeQue once */
	knl_removeFreeQue(q);
 80092a2:	6978      	ldr	r0, [r7, #20]
 80092a4:	f7ff ff5e 	bl	8009164 <knl_removeFreeQue>

	aq = q - 1;
 80092a8:	697b      	ldr	r3, [r7, #20]
 80092aa:	3b08      	subs	r3, #8
 80092ac:	60fb      	str	r3, [r7, #12]

	/* If there are fragments smaller than the minimum fragment size,
	   allocate them also */
	if ( FreeSize(q) - size >= MIN_FRAGMENT + sizeof(QUEUE) ) {
 80092ae:	697b      	ldr	r3, [r7, #20]
 80092b0:	3308      	adds	r3, #8
 80092b2:	685b      	ldr	r3, [r3, #4]
 80092b4:	461a      	mov	r2, r3
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	1ad3      	subs	r3, r2, r3
 80092ba:	2b17      	cmp	r3, #23
 80092bc:	d90e      	bls.n	80092dc <knl_Imalloc+0x88>

		/* Divide area into 2 */
		aq2 = (QUEUE*)((VB*)(aq + 1) + size);
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	3308      	adds	r3, #8
 80092c2:	68fa      	ldr	r2, [r7, #12]
 80092c4:	4413      	add	r3, r2
 80092c6:	60bb      	str	r3, [r7, #8]
		knl_insertAreaQue(aq, aq2);
 80092c8:	68b9      	ldr	r1, [r7, #8]
 80092ca:	68f8      	ldr	r0, [r7, #12]
 80092cc:	f7ff ff84 	bl	80091d8 <knl_insertAreaQue>

		/* Register remaining area to FreeQue */
		knl_appendFreeArea(knl_imacb, aq2);
 80092d0:	4b0a      	ldr	r3, [pc, #40]	@ (80092fc <knl_Imalloc+0xa8>)
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	68b9      	ldr	r1, [r7, #8]
 80092d6:	4618      	mov	r0, r3
 80092d8:	f7ff feed 	bl	80090b6 <knl_appendFreeArea>
	}
	setAreaFlag(aq, AREA_USE);
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	685b      	ldr	r3, [r3, #4]
 80092e0:	f043 0301 	orr.w	r3, r3, #1
 80092e4:	461a      	mov	r2, r3
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	605a      	str	r2, [r3, #4]

err_ret:
	EI(imask);
 80092ea:	6938      	ldr	r0, [r7, #16]
 80092ec:	f003 f8bd 	bl	800c46a <set_basepri>

	return (void *)q;
 80092f0:	697b      	ldr	r3, [r7, #20]
}
 80092f2:	4618      	mov	r0, r3
 80092f4:	3718      	adds	r7, #24
 80092f6:	46bd      	mov	sp, r7
 80092f8:	bd80      	pop	{r7, pc}
 80092fa:	bf00      	nop
 80092fc:	24001f38 	.word	0x24001f38

08009300 <knl_Ifree>:

/*
 * Free memory
 */
EXPORT void  knl_Ifree( void *ptr )
{
 8009300:	b580      	push	{r7, lr}
 8009302:	b084      	sub	sp, #16
 8009304:	af00      	add	r7, sp, #0
 8009306:	6078      	str	r0, [r7, #4]
	QUEUE	*aq;
	UINT	imask;

	DI(imask);  /* Exclusive control by interrupt disable */
 8009308:	f003 f8cb 	bl	800c4a2 <disint>
 800930c:	60b8      	str	r0, [r7, #8]

	aq = (QUEUE*)ptr - 1;
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	3b08      	subs	r3, #8
 8009312:	60fb      	str	r3, [r7, #12]
	clrAreaFlag(aq, AREA_USE);
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	685b      	ldr	r3, [r3, #4]
 8009318:	f023 0301 	bic.w	r3, r3, #1
 800931c:	461a      	mov	r2, r3
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	605a      	str	r2, [r3, #4]

	if ( !chkAreaFlag(aq->next, AREA_USE) ) {
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	685b      	ldr	r3, [r3, #4]
 8009328:	f003 0301 	and.w	r3, r3, #1
 800932c:	2b00      	cmp	r3, #0
 800932e:	d10a      	bne.n	8009346 <knl_Ifree+0x46>
		/* Merge with free area in after location */
		knl_removeFreeQue(aq->next + 1);
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	3308      	adds	r3, #8
 8009336:	4618      	mov	r0, r3
 8009338:	f7ff ff14 	bl	8009164 <knl_removeFreeQue>
		knl_removeAreaQue(aq->next);
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	4618      	mov	r0, r3
 8009342:	f7ff ff68 	bl	8009216 <knl_removeAreaQue>
	}

	if ( !chkAreaFlag(aq->prev, AREA_USE) ) {
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	685b      	ldr	r3, [r3, #4]
 800934a:	685b      	ldr	r3, [r3, #4]
 800934c:	f003 0301 	and.w	r3, r3, #1
 8009350:	2b00      	cmp	r3, #0
 8009352:	d10c      	bne.n	800936e <knl_Ifree+0x6e>
		/* Merge with free area in front location */
		aq = aq->prev;
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	685b      	ldr	r3, [r3, #4]
 8009358:	60fb      	str	r3, [r7, #12]
		knl_removeFreeQue(aq + 1);
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	3308      	adds	r3, #8
 800935e:	4618      	mov	r0, r3
 8009360:	f7ff ff00 	bl	8009164 <knl_removeFreeQue>
		knl_removeAreaQue(aq->next);
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	4618      	mov	r0, r3
 800936a:	f7ff ff54 	bl	8009216 <knl_removeAreaQue>
	}

	knl_appendFreeArea(knl_imacb, aq);
 800936e:	4b06      	ldr	r3, [pc, #24]	@ (8009388 <knl_Ifree+0x88>)
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	68f9      	ldr	r1, [r7, #12]
 8009374:	4618      	mov	r0, r3
 8009376:	f7ff fe9e 	bl	80090b6 <knl_appendFreeArea>

	EI(imask);
 800937a:	68b8      	ldr	r0, [r7, #8]
 800937c:	f003 f875 	bl	800c46a <set_basepri>
}
 8009380:	bf00      	nop
 8009382:	3710      	adds	r7, #16
 8009384:	46bd      	mov	sp, r7
 8009386:	bd80      	pop	{r7, pc}
 8009388:	24001f38 	.word	0x24001f38

0800938c <initIMACB>:

/*
 * IMACB Initialization 
 */
LOCAL void initIMACB( void )
{
 800938c:	b580      	push	{r7, lr}
 800938e:	af00      	add	r7, sp, #0
	QueInit(&(knl_imacb->areaque));
 8009390:	4b06      	ldr	r3, [pc, #24]	@ (80093ac <initIMACB+0x20>)
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	3304      	adds	r3, #4
 8009396:	4618      	mov	r0, r3
 8009398:	f7ff fdfc 	bl	8008f94 <QueInit>
	QueInit(&(knl_imacb->freeque));
 800939c:	4b03      	ldr	r3, [pc, #12]	@ (80093ac <initIMACB+0x20>)
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	330c      	adds	r3, #12
 80093a2:	4618      	mov	r0, r3
 80093a4:	f7ff fdf6 	bl	8008f94 <QueInit>
}
 80093a8:	bf00      	nop
 80093aa:	bd80      	pop	{r7, pc}
 80093ac:	24001f38 	.word	0x24001f38

080093b0 <knl_init_Imalloc>:

/*
 * Imalloc initial setting 
 */
EXPORT ER knl_init_Imalloc( void )
{
 80093b0:	b580      	push	{r7, lr}
 80093b2:	b082      	sub	sp, #8
 80093b4:	af00      	add	r7, sp, #0
	QUEUE	*top, *end;

	/* Align top with 4 byte unit alignment for IMACB */
	knl_lowmem_top = (void *)(((UW)knl_lowmem_top + 3) & ~0x00000003UL);
 80093b6:	4b2e      	ldr	r3, [pc, #184]	@ (8009470 <knl_init_Imalloc+0xc0>)
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	3303      	adds	r3, #3
 80093bc:	f023 0303 	bic.w	r3, r3, #3
 80093c0:	461a      	mov	r2, r3
 80093c2:	4b2b      	ldr	r3, [pc, #172]	@ (8009470 <knl_init_Imalloc+0xc0>)
 80093c4:	601a      	str	r2, [r3, #0]
	knl_imacb = (IMACB*)knl_lowmem_top;
 80093c6:	4b2a      	ldr	r3, [pc, #168]	@ (8009470 <knl_init_Imalloc+0xc0>)
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	4a2a      	ldr	r2, [pc, #168]	@ (8009474 <knl_init_Imalloc+0xc4>)
 80093cc:	6013      	str	r3, [r2, #0]
	knl_lowmem_top = (void *)((UW)knl_lowmem_top + sizeof(IMACB));
 80093ce:	4b28      	ldr	r3, [pc, #160]	@ (8009470 <knl_init_Imalloc+0xc0>)
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	3314      	adds	r3, #20
 80093d4:	461a      	mov	r2, r3
 80093d6:	4b26      	ldr	r3, [pc, #152]	@ (8009470 <knl_init_Imalloc+0xc0>)
 80093d8:	601a      	str	r2, [r3, #0]

	/* Align top with 8 byte unit alignment */
	knl_lowmem_top = (void *)(((UW)knl_lowmem_top + 7) & ~0x00000007UL);
 80093da:	4b25      	ldr	r3, [pc, #148]	@ (8009470 <knl_init_Imalloc+0xc0>)
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	3307      	adds	r3, #7
 80093e0:	f023 0307 	bic.w	r3, r3, #7
 80093e4:	461a      	mov	r2, r3
 80093e6:	4b22      	ldr	r3, [pc, #136]	@ (8009470 <knl_init_Imalloc+0xc0>)
 80093e8:	601a      	str	r2, [r3, #0]
	top = (QUEUE*)knl_lowmem_top;
 80093ea:	4b21      	ldr	r3, [pc, #132]	@ (8009470 <knl_init_Imalloc+0xc0>)
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	607b      	str	r3, [r7, #4]
	knl_imacb->memsz = (W)((UW)knl_lowmem_limit - (UW)knl_lowmem_top - sizeof(QUEUE)*2);
 80093f0:	4b21      	ldr	r3, [pc, #132]	@ (8009478 <knl_init_Imalloc+0xc8>)
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	461a      	mov	r2, r3
 80093f6:	4b1e      	ldr	r3, [pc, #120]	@ (8009470 <knl_init_Imalloc+0xc0>)
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	1ad3      	subs	r3, r2, r3
 80093fc:	f1a3 0210 	sub.w	r2, r3, #16
 8009400:	4b1c      	ldr	r3, [pc, #112]	@ (8009474 <knl_init_Imalloc+0xc4>)
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	601a      	str	r2, [r3, #0]

	knl_lowmem_top = knl_lowmem_limit;  /* Update memory free space */
 8009406:	4b1c      	ldr	r3, [pc, #112]	@ (8009478 <knl_init_Imalloc+0xc8>)
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	4a19      	ldr	r2, [pc, #100]	@ (8009470 <knl_init_Imalloc+0xc0>)
 800940c:	6013      	str	r3, [r2, #0]

	initIMACB();
 800940e:	f7ff ffbd 	bl	800938c <initIMACB>

	/* Register on AreaQue */
	end = (QUEUE*)((VB*)top + knl_imacb->memsz) + 1;
 8009412:	4b18      	ldr	r3, [pc, #96]	@ (8009474 <knl_init_Imalloc+0xc4>)
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	3308      	adds	r3, #8
 800941a:	687a      	ldr	r2, [r7, #4]
 800941c:	4413      	add	r3, r2
 800941e:	603b      	str	r3, [r7, #0]
	knl_insertAreaQue(&knl_imacb->areaque, end);
 8009420:	4b14      	ldr	r3, [pc, #80]	@ (8009474 <knl_init_Imalloc+0xc4>)
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	3304      	adds	r3, #4
 8009426:	6839      	ldr	r1, [r7, #0]
 8009428:	4618      	mov	r0, r3
 800942a:	f7ff fed5 	bl	80091d8 <knl_insertAreaQue>
	knl_insertAreaQue(&knl_imacb->areaque, top);
 800942e:	4b11      	ldr	r3, [pc, #68]	@ (8009474 <knl_init_Imalloc+0xc4>)
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	3304      	adds	r3, #4
 8009434:	6879      	ldr	r1, [r7, #4]
 8009436:	4618      	mov	r0, r3
 8009438:	f7ff fece 	bl	80091d8 <knl_insertAreaQue>
	setAreaFlag(end, AREA_USE);
 800943c:	683b      	ldr	r3, [r7, #0]
 800943e:	685b      	ldr	r3, [r3, #4]
 8009440:	f043 0301 	orr.w	r3, r3, #1
 8009444:	461a      	mov	r2, r3
 8009446:	683b      	ldr	r3, [r7, #0]
 8009448:	605a      	str	r2, [r3, #4]
	setAreaFlag(&knl_imacb->areaque, AREA_USE);
 800944a:	4b0a      	ldr	r3, [pc, #40]	@ (8009474 <knl_init_Imalloc+0xc4>)
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	689b      	ldr	r3, [r3, #8]
 8009450:	f043 0201 	orr.w	r2, r3, #1
 8009454:	4b07      	ldr	r3, [pc, #28]	@ (8009474 <knl_init_Imalloc+0xc4>)
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	609a      	str	r2, [r3, #8]

	knl_appendFreeArea(knl_imacb, top);
 800945a:	4b06      	ldr	r3, [pc, #24]	@ (8009474 <knl_init_Imalloc+0xc4>)
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	6879      	ldr	r1, [r7, #4]
 8009460:	4618      	mov	r0, r3
 8009462:	f7ff fe28 	bl	80090b6 <knl_appendFreeArea>

	return E_OK;
 8009466:	2300      	movs	r3, #0
}
 8009468:	4618      	mov	r0, r3
 800946a:	3708      	adds	r7, #8
 800946c:	46bd      	mov	sp, r7
 800946e:	bd80      	pop	{r7, pc}
 8009470:	240011b0 	.word	0x240011b0
 8009474:	24001f38 	.word	0x24001f38
 8009478:	240011b4 	.word	0x240011b4

0800947c <QueInit>:
{
 800947c:	b480      	push	{r7}
 800947e:	b083      	sub	sp, #12
 8009480:	af00      	add	r7, sp, #0
 8009482:	6078      	str	r0, [r7, #4]
	que->next = (struct queue *)que;
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	687a      	ldr	r2, [r7, #4]
 8009488:	601a      	str	r2, [r3, #0]
	que->prev = (struct queue *)que;
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	687a      	ldr	r2, [r7, #4]
 800948e:	605a      	str	r2, [r3, #4]
}
 8009490:	bf00      	nop
 8009492:	370c      	adds	r7, #12
 8009494:	46bd      	mov	sp, r7
 8009496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800949a:	4770      	bx	lr

0800949c <QueInsert>:
{
 800949c:	b480      	push	{r7}
 800949e:	b083      	sub	sp, #12
 80094a0:	af00      	add	r7, sp, #0
 80094a2:	6078      	str	r0, [r7, #4]
 80094a4:	6039      	str	r1, [r7, #0]
	entry->prev = (struct queue*) que->prev;
 80094a6:	683b      	ldr	r3, [r7, #0]
 80094a8:	685a      	ldr	r2, [r3, #4]
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	605a      	str	r2, [r3, #4]
	entry->next = que;
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	683a      	ldr	r2, [r7, #0]
 80094b2:	601a      	str	r2, [r3, #0]
	que->prev->next = entry;
 80094b4:	683b      	ldr	r3, [r7, #0]
 80094b6:	685b      	ldr	r3, [r3, #4]
 80094b8:	687a      	ldr	r2, [r7, #4]
 80094ba:	601a      	str	r2, [r3, #0]
	que->prev = entry;
 80094bc:	683b      	ldr	r3, [r7, #0]
 80094be:	687a      	ldr	r2, [r7, #4]
 80094c0:	605a      	str	r2, [r3, #4]
}
 80094c2:	bf00      	nop
 80094c4:	370c      	adds	r7, #12
 80094c6:	46bd      	mov	sp, r7
 80094c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094cc:	4770      	bx	lr

080094ce <knl_InitOBJLOCK>:
typedef struct objlock {
	QUEUE		wtskq;		/* Wait task queue */
} OBJLOCK;

Inline void knl_InitOBJLOCK( OBJLOCK *loc )
{
 80094ce:	b480      	push	{r7}
 80094d0:	b083      	sub	sp, #12
 80094d2:	af00      	add	r7, sp, #0
 80094d4:	6078      	str	r0, [r7, #4]
	loc->wtskq.next = NULL;
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	2200      	movs	r2, #0
 80094da:	601a      	str	r2, [r3, #0]
}
 80094dc:	bf00      	nop
 80094de:	370c      	adds	r7, #12
 80094e0:	46bd      	mov	sp, r7
 80094e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094e6:	4770      	bx	lr

080094e8 <knl_fix_memorypool_initialize>:

/*
 * Initialization of fixed size memory pool control block
 */
EXPORT ER knl_fix_memorypool_initialize( void )
{
 80094e8:	b580      	push	{r7, lr}
 80094ea:	b082      	sub	sp, #8
 80094ec:	af00      	add	r7, sp, #0
	if ( NUM_MPFID < 1 ) {
		return E_SYS;
	}

	/* Register all control blocks onto FreeQue */
	QueInit(&knl_free_mpfcb);
 80094ee:	4810      	ldr	r0, [pc, #64]	@ (8009530 <knl_fix_memorypool_initialize+0x48>)
 80094f0:	f7ff ffc4 	bl	800947c <QueInit>
	end = knl_mpfcb_table + NUM_MPFID;
 80094f4:	4b0f      	ldr	r3, [pc, #60]	@ (8009534 <knl_fix_memorypool_initialize+0x4c>)
 80094f6:	603b      	str	r3, [r7, #0]
	for ( mpfcb = knl_mpfcb_table; mpfcb < end; mpfcb++ ) {
 80094f8:	4b0f      	ldr	r3, [pc, #60]	@ (8009538 <knl_fix_memorypool_initialize+0x50>)
 80094fa:	607b      	str	r3, [r7, #4]
 80094fc:	e00f      	b.n	800951e <knl_fix_memorypool_initialize+0x36>
		mpfcb->mpfid = 0;
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	2200      	movs	r2, #0
 8009502:	609a      	str	r2, [r3, #8]
		knl_InitOBJLOCK(&mpfcb->lock);
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	3330      	adds	r3, #48	@ 0x30
 8009508:	4618      	mov	r0, r3
 800950a:	f7ff ffe0 	bl	80094ce <knl_InitOBJLOCK>
		QueInsert(&mpfcb->wait_queue, &knl_free_mpfcb);
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	4907      	ldr	r1, [pc, #28]	@ (8009530 <knl_fix_memorypool_initialize+0x48>)
 8009512:	4618      	mov	r0, r3
 8009514:	f7ff ffc2 	bl	800949c <QueInsert>
	for ( mpfcb = knl_mpfcb_table; mpfcb < end; mpfcb++ ) {
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	3338      	adds	r3, #56	@ 0x38
 800951c:	607b      	str	r3, [r7, #4]
 800951e:	687a      	ldr	r2, [r7, #4]
 8009520:	683b      	ldr	r3, [r7, #0]
 8009522:	429a      	cmp	r2, r3
 8009524:	d3eb      	bcc.n	80094fe <knl_fix_memorypool_initialize+0x16>
	}

	return E_OK;
 8009526:	2300      	movs	r3, #0
}
 8009528:	4618      	mov	r0, r3
 800952a:	3708      	adds	r7, #8
 800952c:	46bd      	mov	sp, r7
 800952e:	bd80      	pop	{r7, pc}
 8009530:	240020fc 	.word	0x240020fc
 8009534:	240020fc 	.word	0x240020fc
 8009538:	24001f3c 	.word	0x24001f3c

0800953c <QueInit>:
{
 800953c:	b480      	push	{r7}
 800953e:	b083      	sub	sp, #12
 8009540:	af00      	add	r7, sp, #0
 8009542:	6078      	str	r0, [r7, #4]
	que->next = (struct queue *)que;
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	687a      	ldr	r2, [r7, #4]
 8009548:	601a      	str	r2, [r3, #0]
	que->prev = (struct queue *)que;
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	687a      	ldr	r2, [r7, #4]
 800954e:	605a      	str	r2, [r3, #4]
}
 8009550:	bf00      	nop
 8009552:	370c      	adds	r7, #12
 8009554:	46bd      	mov	sp, r7
 8009556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800955a:	4770      	bx	lr

0800955c <QueInsert>:
{
 800955c:	b480      	push	{r7}
 800955e:	b083      	sub	sp, #12
 8009560:	af00      	add	r7, sp, #0
 8009562:	6078      	str	r0, [r7, #4]
 8009564:	6039      	str	r1, [r7, #0]
	entry->prev = (struct queue*) que->prev;
 8009566:	683b      	ldr	r3, [r7, #0]
 8009568:	685a      	ldr	r2, [r3, #4]
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	605a      	str	r2, [r3, #4]
	entry->next = que;
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	683a      	ldr	r2, [r7, #0]
 8009572:	601a      	str	r2, [r3, #0]
	que->prev->next = entry;
 8009574:	683b      	ldr	r3, [r7, #0]
 8009576:	685b      	ldr	r3, [r3, #4]
 8009578:	687a      	ldr	r2, [r7, #4]
 800957a:	601a      	str	r2, [r3, #0]
	que->prev = entry;
 800957c:	683b      	ldr	r3, [r7, #0]
 800957e:	687a      	ldr	r2, [r7, #4]
 8009580:	605a      	str	r2, [r3, #4]
}
 8009582:	bf00      	nop
 8009584:	370c      	adds	r7, #12
 8009586:	46bd      	mov	sp, r7
 8009588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800958c:	4770      	bx	lr
	...

08009590 <knl_memorypool_initialize>:

/*
 * Initialization of variable size memory pool control block
 */
EXPORT ER knl_memorypool_initialize( void )
{
 8009590:	b580      	push	{r7, lr}
 8009592:	b082      	sub	sp, #8
 8009594:	af00      	add	r7, sp, #0
	if ( NUM_MPLID < 1 ) {
		return E_SYS;
	}

	/* Register all control blocks onto FreeQue */
	QueInit(&knl_free_mplcb);
 8009596:	480e      	ldr	r0, [pc, #56]	@ (80095d0 <knl_memorypool_initialize+0x40>)
 8009598:	f7ff ffd0 	bl	800953c <QueInit>
	end = knl_mplcb_table + NUM_MPLID;
 800959c:	4b0d      	ldr	r3, [pc, #52]	@ (80095d4 <knl_memorypool_initialize+0x44>)
 800959e:	603b      	str	r3, [r7, #0]
	for ( mplcb = knl_mplcb_table; mplcb < end; mplcb++ ) {
 80095a0:	4b0d      	ldr	r3, [pc, #52]	@ (80095d8 <knl_memorypool_initialize+0x48>)
 80095a2:	607b      	str	r3, [r7, #4]
 80095a4:	e00a      	b.n	80095bc <knl_memorypool_initialize+0x2c>
		mplcb->mplid = 0;
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	2200      	movs	r2, #0
 80095aa:	609a      	str	r2, [r3, #8]
		QueInsert(&mplcb->wait_queue, &knl_free_mplcb);
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	4908      	ldr	r1, [pc, #32]	@ (80095d0 <knl_memorypool_initialize+0x40>)
 80095b0:	4618      	mov	r0, r3
 80095b2:	f7ff ffd3 	bl	800955c <QueInsert>
	for ( mplcb = knl_mplcb_table; mplcb < end; mplcb++ ) {
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	3334      	adds	r3, #52	@ 0x34
 80095ba:	607b      	str	r3, [r7, #4]
 80095bc:	687a      	ldr	r2, [r7, #4]
 80095be:	683b      	ldr	r3, [r7, #0]
 80095c0:	429a      	cmp	r2, r3
 80095c2:	d3f0      	bcc.n	80095a6 <knl_memorypool_initialize+0x16>
	}

	return E_OK;
 80095c4:	2300      	movs	r3, #0
}
 80095c6:	4618      	mov	r0, r3
 80095c8:	3708      	adds	r7, #8
 80095ca:	46bd      	mov	sp, r7
 80095cc:	bd80      	pop	{r7, pc}
 80095ce:	bf00      	nop
 80095d0:	240021d4 	.word	0x240021d4
 80095d4:	240021d4 	.word	0x240021d4
 80095d8:	24002104 	.word	0x24002104

080095dc <QueInit>:
{
 80095dc:	b480      	push	{r7}
 80095de:	b083      	sub	sp, #12
 80095e0:	af00      	add	r7, sp, #0
 80095e2:	6078      	str	r0, [r7, #4]
	que->next = (struct queue *)que;
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	687a      	ldr	r2, [r7, #4]
 80095e8:	601a      	str	r2, [r3, #0]
	que->prev = (struct queue *)que;
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	687a      	ldr	r2, [r7, #4]
 80095ee:	605a      	str	r2, [r3, #4]
}
 80095f0:	bf00      	nop
 80095f2:	370c      	adds	r7, #12
 80095f4:	46bd      	mov	sp, r7
 80095f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095fa:	4770      	bx	lr

080095fc <QueInsert>:
{
 80095fc:	b480      	push	{r7}
 80095fe:	b083      	sub	sp, #12
 8009600:	af00      	add	r7, sp, #0
 8009602:	6078      	str	r0, [r7, #4]
 8009604:	6039      	str	r1, [r7, #0]
	entry->prev = (struct queue*) que->prev;
 8009606:	683b      	ldr	r3, [r7, #0]
 8009608:	685a      	ldr	r2, [r3, #4]
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	605a      	str	r2, [r3, #4]
	entry->next = que;
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	683a      	ldr	r2, [r7, #0]
 8009612:	601a      	str	r2, [r3, #0]
	que->prev->next = entry;
 8009614:	683b      	ldr	r3, [r7, #0]
 8009616:	685b      	ldr	r3, [r3, #4]
 8009618:	687a      	ldr	r2, [r7, #4]
 800961a:	601a      	str	r2, [r3, #0]
	que->prev = entry;
 800961c:	683b      	ldr	r3, [r7, #0]
 800961e:	687a      	ldr	r2, [r7, #4]
 8009620:	605a      	str	r2, [r3, #4]
}
 8009622:	bf00      	nop
 8009624:	370c      	adds	r7, #12
 8009626:	46bd      	mov	sp, r7
 8009628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800962c:	4770      	bx	lr
	...

08009630 <knl_messagebuffer_initialize>:

/*
 * Initialization of message buffer control block 
 */
EXPORT ER knl_messagebuffer_initialize( void )
{
 8009630:	b580      	push	{r7, lr}
 8009632:	b082      	sub	sp, #8
 8009634:	af00      	add	r7, sp, #0
	if ( NUM_MBFID < 1 ) {
		return E_SYS;
	}

	/* Register all control blocks onto FreeQue */
	QueInit(&knl_free_mbfcb);
 8009636:	480e      	ldr	r0, [pc, #56]	@ (8009670 <knl_messagebuffer_initialize+0x40>)
 8009638:	f7ff ffd0 	bl	80095dc <QueInit>
	end = knl_mbfcb_table + NUM_MBFID;
 800963c:	4b0d      	ldr	r3, [pc, #52]	@ (8009674 <knl_messagebuffer_initialize+0x44>)
 800963e:	603b      	str	r3, [r7, #0]
	for ( mbfcb = knl_mbfcb_table; mbfcb < end; mbfcb++ ) {
 8009640:	4b0d      	ldr	r3, [pc, #52]	@ (8009678 <knl_messagebuffer_initialize+0x48>)
 8009642:	607b      	str	r3, [r7, #4]
 8009644:	e00a      	b.n	800965c <knl_messagebuffer_initialize+0x2c>
		mbfcb->mbfid = 0;
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	2200      	movs	r2, #0
 800964a:	609a      	str	r2, [r3, #8]
		QueInsert(&mbfcb->send_queue, &knl_free_mbfcb);
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	4908      	ldr	r1, [pc, #32]	@ (8009670 <knl_messagebuffer_initialize+0x40>)
 8009650:	4618      	mov	r0, r3
 8009652:	f7ff ffd3 	bl	80095fc <QueInsert>
	for ( mbfcb = knl_mbfcb_table; mbfcb < end; mbfcb++ ) {
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	3334      	adds	r3, #52	@ 0x34
 800965a:	607b      	str	r3, [r7, #4]
 800965c:	687a      	ldr	r2, [r7, #4]
 800965e:	683b      	ldr	r3, [r7, #0]
 8009660:	429a      	cmp	r2, r3
 8009662:	d3f0      	bcc.n	8009646 <knl_messagebuffer_initialize+0x16>
	}

	return E_OK;
 8009664:	2300      	movs	r3, #0
}
 8009666:	4618      	mov	r0, r3
 8009668:	3708      	adds	r7, #8
 800966a:	46bd      	mov	sp, r7
 800966c:	bd80      	pop	{r7, pc}
 800966e:	bf00      	nop
 8009670:	2400237c 	.word	0x2400237c
 8009674:	2400237c 	.word	0x2400237c
 8009678:	240021dc 	.word	0x240021dc

0800967c <QueInit>:
{
 800967c:	b480      	push	{r7}
 800967e:	b083      	sub	sp, #12
 8009680:	af00      	add	r7, sp, #0
 8009682:	6078      	str	r0, [r7, #4]
	que->next = (struct queue *)que;
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	687a      	ldr	r2, [r7, #4]
 8009688:	601a      	str	r2, [r3, #0]
	que->prev = (struct queue *)que;
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	687a      	ldr	r2, [r7, #4]
 800968e:	605a      	str	r2, [r3, #4]
}
 8009690:	bf00      	nop
 8009692:	370c      	adds	r7, #12
 8009694:	46bd      	mov	sp, r7
 8009696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800969a:	4770      	bx	lr

0800969c <QueInsert>:
{
 800969c:	b480      	push	{r7}
 800969e:	b083      	sub	sp, #12
 80096a0:	af00      	add	r7, sp, #0
 80096a2:	6078      	str	r0, [r7, #4]
 80096a4:	6039      	str	r1, [r7, #0]
	entry->prev = (struct queue*) que->prev;
 80096a6:	683b      	ldr	r3, [r7, #0]
 80096a8:	685a      	ldr	r2, [r3, #4]
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	605a      	str	r2, [r3, #4]
	entry->next = que;
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	683a      	ldr	r2, [r7, #0]
 80096b2:	601a      	str	r2, [r3, #0]
	que->prev->next = entry;
 80096b4:	683b      	ldr	r3, [r7, #0]
 80096b6:	685b      	ldr	r3, [r3, #4]
 80096b8:	687a      	ldr	r2, [r7, #4]
 80096ba:	601a      	str	r2, [r3, #0]
	que->prev = entry;
 80096bc:	683b      	ldr	r3, [r7, #0]
 80096be:	687a      	ldr	r2, [r7, #4]
 80096c0:	605a      	str	r2, [r3, #4]
}
 80096c2:	bf00      	nop
 80096c4:	370c      	adds	r7, #12
 80096c6:	46bd      	mov	sp, r7
 80096c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096cc:	4770      	bx	lr
	...

080096d0 <knl_mutex_initialize>:

/*
 * Initialization of mutex control block 
 */
EXPORT ER knl_mutex_initialize(void)
{
 80096d0:	b580      	push	{r7, lr}
 80096d2:	b082      	sub	sp, #8
 80096d4:	af00      	add	r7, sp, #0
	if ( NUM_MTXID < 1 ) {
		return E_SYS;
	}

	/* Register all control blocks onto FreeQue */
	QueInit(&knl_free_mtxcb);
 80096d6:	480e      	ldr	r0, [pc, #56]	@ (8009710 <knl_mutex_initialize+0x40>)
 80096d8:	f7ff ffd0 	bl	800967c <QueInit>
	end = knl_mtxcb_table + NUM_MTXID;
 80096dc:	4b0d      	ldr	r3, [pc, #52]	@ (8009714 <knl_mutex_initialize+0x44>)
 80096de:	603b      	str	r3, [r7, #0]
	for( mtxcb = knl_mtxcb_table; mtxcb < end; mtxcb++ ) {
 80096e0:	4b0d      	ldr	r3, [pc, #52]	@ (8009718 <knl_mutex_initialize+0x48>)
 80096e2:	607b      	str	r3, [r7, #4]
 80096e4:	e00a      	b.n	80096fc <knl_mutex_initialize+0x2c>
		mtxcb->mtxid = 0;
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	2200      	movs	r2, #0
 80096ea:	609a      	str	r2, [r3, #8]
		QueInsert(&mtxcb->wait_queue, &knl_free_mtxcb);
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	4908      	ldr	r1, [pc, #32]	@ (8009710 <knl_mutex_initialize+0x40>)
 80096f0:	4618      	mov	r0, r3
 80096f2:	f7ff ffd3 	bl	800969c <QueInsert>
	for( mtxcb = knl_mtxcb_table; mtxcb < end; mtxcb++ ) {
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	3320      	adds	r3, #32
 80096fa:	607b      	str	r3, [r7, #4]
 80096fc:	687a      	ldr	r2, [r7, #4]
 80096fe:	683b      	ldr	r3, [r7, #0]
 8009700:	429a      	cmp	r2, r3
 8009702:	d3f0      	bcc.n	80096e6 <knl_mutex_initialize+0x16>
	}

	return E_OK;
 8009704:	2300      	movs	r3, #0
}
 8009706:	4618      	mov	r0, r3
 8009708:	3708      	adds	r7, #8
 800970a:	46bd      	mov	sp, r7
 800970c:	bd80      	pop	{r7, pc}
 800970e:	bf00      	nop
 8009710:	24002404 	.word	0x24002404
 8009714:	24002404 	.word	0x24002404
 8009718:	24002384 	.word	0x24002384

0800971c <QueInit>:
{
 800971c:	b480      	push	{r7}
 800971e:	b083      	sub	sp, #12
 8009720:	af00      	add	r7, sp, #0
 8009722:	6078      	str	r0, [r7, #4]
	que->next = (struct queue *)que;
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	687a      	ldr	r2, [r7, #4]
 8009728:	601a      	str	r2, [r3, #0]
	que->prev = (struct queue *)que;
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	687a      	ldr	r2, [r7, #4]
 800972e:	605a      	str	r2, [r3, #4]
}
 8009730:	bf00      	nop
 8009732:	370c      	adds	r7, #12
 8009734:	46bd      	mov	sp, r7
 8009736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800973a:	4770      	bx	lr

0800973c <QueInsert>:
{
 800973c:	b480      	push	{r7}
 800973e:	b083      	sub	sp, #12
 8009740:	af00      	add	r7, sp, #0
 8009742:	6078      	str	r0, [r7, #4]
 8009744:	6039      	str	r1, [r7, #0]
	entry->prev = (struct queue*) que->prev;
 8009746:	683b      	ldr	r3, [r7, #0]
 8009748:	685a      	ldr	r2, [r3, #4]
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	605a      	str	r2, [r3, #4]
	entry->next = que;
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	683a      	ldr	r2, [r7, #0]
 8009752:	601a      	str	r2, [r3, #0]
	que->prev->next = entry;
 8009754:	683b      	ldr	r3, [r7, #0]
 8009756:	685b      	ldr	r3, [r3, #4]
 8009758:	687a      	ldr	r2, [r7, #4]
 800975a:	601a      	str	r2, [r3, #0]
	que->prev = entry;
 800975c:	683b      	ldr	r3, [r7, #0]
 800975e:	687a      	ldr	r2, [r7, #4]
 8009760:	605a      	str	r2, [r3, #4]
}
 8009762:	bf00      	nop
 8009764:	370c      	adds	r7, #12
 8009766:	46bd      	mov	sp, r7
 8009768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800976c:	4770      	bx	lr
	...

08009770 <knl_isTaskIndependent>:
{
 8009770:	b480      	push	{r7}
 8009772:	af00      	add	r7, sp, #0
	return ( knl_taskindp > 0 )? TRUE: FALSE;
 8009774:	4b05      	ldr	r3, [pc, #20]	@ (800978c <knl_isTaskIndependent+0x1c>)
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	2b00      	cmp	r3, #0
 800977a:	bfcc      	ite	gt
 800977c:	2301      	movgt	r3, #1
 800977e:	2300      	movle	r3, #0
 8009780:	b2db      	uxtb	r3, r3
}
 8009782:	4618      	mov	r0, r3
 8009784:	46bd      	mov	sp, r7
 8009786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800978a:	4770      	bx	lr
 800978c:	240011a4 	.word	0x240011a4

08009790 <knl_semaphore_initialize>:

/* 
 * Initialization of semaphore control block 
 */
EXPORT ER knl_semaphore_initialize( void )
{
 8009790:	b580      	push	{r7, lr}
 8009792:	b082      	sub	sp, #8
 8009794:	af00      	add	r7, sp, #0
	if ( NUM_SEMID < 1 ) {
		return E_SYS;
	}

	/* Register all control blocks onto FreeQue */
	QueInit(&knl_free_semcb);
 8009796:	480e      	ldr	r0, [pc, #56]	@ (80097d0 <knl_semaphore_initialize+0x40>)
 8009798:	f7ff ffc0 	bl	800971c <QueInit>
	end = knl_semcb_table + NUM_SEMID;
 800979c:	4b0d      	ldr	r3, [pc, #52]	@ (80097d4 <knl_semaphore_initialize+0x44>)
 800979e:	603b      	str	r3, [r7, #0]
	for ( semcb = knl_semcb_table; semcb < end; semcb++ ) {
 80097a0:	4b0d      	ldr	r3, [pc, #52]	@ (80097d8 <knl_semaphore_initialize+0x48>)
 80097a2:	607b      	str	r3, [r7, #4]
 80097a4:	e00a      	b.n	80097bc <knl_semaphore_initialize+0x2c>
		semcb->semid = 0;
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	2200      	movs	r2, #0
 80097aa:	609a      	str	r2, [r3, #8]
		QueInsert(&semcb->wait_queue, &knl_free_semcb);
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	4908      	ldr	r1, [pc, #32]	@ (80097d0 <knl_semaphore_initialize+0x40>)
 80097b0:	4618      	mov	r0, r3
 80097b2:	f7ff ffc3 	bl	800973c <QueInsert>
	for ( semcb = knl_semcb_table; semcb < end; semcb++ ) {
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	331c      	adds	r3, #28
 80097ba:	607b      	str	r3, [r7, #4]
 80097bc:	687a      	ldr	r2, [r7, #4]
 80097be:	683b      	ldr	r3, [r7, #0]
 80097c0:	429a      	cmp	r2, r3
 80097c2:	d3f0      	bcc.n	80097a6 <knl_semaphore_initialize+0x16>
	}

	return E_OK;
 80097c4:	2300      	movs	r3, #0
}
 80097c6:	4618      	mov	r0, r3
 80097c8:	3708      	adds	r7, #8
 80097ca:	46bd      	mov	sp, r7
 80097cc:	bd80      	pop	{r7, pc}
 80097ce:	bf00      	nop
 80097d0:	240025cc 	.word	0x240025cc
 80097d4:	240025cc 	.word	0x240025cc
 80097d8:	2400240c 	.word	0x2400240c

080097dc <tk_del_sem>:
#ifdef USE_FUNC_TK_DEL_SEM
/*
 * Delete semaphore
 */
SYSCALL ER tk_del_sem( ID semid )
{
 80097dc:	b580      	push	{r7, lr}
 80097de:	b086      	sub	sp, #24
 80097e0:	af00      	add	r7, sp, #0
 80097e2:	6078      	str	r0, [r7, #4]
	SEMCB	*semcb;
	ER	ercd = E_OK;
 80097e4:	2300      	movs	r3, #0
 80097e6:	617b      	str	r3, [r7, #20]

	CHECK_SEMID(semid);
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	dd02      	ble.n	80097f4 <tk_del_sem+0x18>
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	2b10      	cmp	r3, #16
 80097f2:	dd02      	ble.n	80097fa <tk_del_sem+0x1e>
 80097f4:	f06f 0311 	mvn.w	r3, #17
 80097f8:	e032      	b.n	8009860 <tk_del_sem+0x84>

	semcb = get_semcb(semid);
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	1e5a      	subs	r2, r3, #1
 80097fe:	4613      	mov	r3, r2
 8009800:	00db      	lsls	r3, r3, #3
 8009802:	1a9b      	subs	r3, r3, r2
 8009804:	009b      	lsls	r3, r3, #2
 8009806:	4a18      	ldr	r2, [pc, #96]	@ (8009868 <tk_del_sem+0x8c>)
 8009808:	4413      	add	r3, r2
 800980a:	613b      	str	r3, [r7, #16]

	BEGIN_CRITICAL_SECTION;
 800980c:	f002 fe49 	bl	800c4a2 <disint>
 8009810:	60f8      	str	r0, [r7, #12]
	if ( semcb->semid == 0 ) {
 8009812:	693b      	ldr	r3, [r7, #16]
 8009814:	689b      	ldr	r3, [r3, #8]
 8009816:	2b00      	cmp	r3, #0
 8009818:	d103      	bne.n	8009822 <tk_del_sem+0x46>
		ercd = E_NOEXS;
 800981a:	f06f 0329 	mvn.w	r3, #41	@ 0x29
 800981e:	617b      	str	r3, [r7, #20]
 8009820:	e00b      	b.n	800983a <tk_del_sem+0x5e>
	} else {
		/* Release wait state of task (E_DLT) */
		knl_wait_delete(&semcb->wait_queue);
 8009822:	693b      	ldr	r3, [r7, #16]
 8009824:	4618      	mov	r0, r3
 8009826:	f001 f96d 	bl	800ab04 <knl_wait_delete>

		/* Return to FreeQue */
		QueInsert(&semcb->wait_queue, &knl_free_semcb);
 800982a:	693b      	ldr	r3, [r7, #16]
 800982c:	490f      	ldr	r1, [pc, #60]	@ (800986c <tk_del_sem+0x90>)
 800982e:	4618      	mov	r0, r3
 8009830:	f7ff ff84 	bl	800973c <QueInsert>
		semcb->semid = 0;
 8009834:	693b      	ldr	r3, [r7, #16]
 8009836:	2200      	movs	r2, #0
 8009838:	609a      	str	r2, [r3, #8]
	}
	END_CRITICAL_SECTION;
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	2b00      	cmp	r3, #0
 800983e:	d10b      	bne.n	8009858 <tk_del_sem+0x7c>
 8009840:	4b0b      	ldr	r3, [pc, #44]	@ (8009870 <tk_del_sem+0x94>)
 8009842:	681a      	ldr	r2, [r3, #0]
 8009844:	4b0b      	ldr	r3, [pc, #44]	@ (8009874 <tk_del_sem+0x98>)
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	429a      	cmp	r2, r3
 800984a:	d005      	beq.n	8009858 <tk_del_sem+0x7c>
 800984c:	4b0a      	ldr	r3, [pc, #40]	@ (8009878 <tk_del_sem+0x9c>)
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	2b00      	cmp	r3, #0
 8009852:	d101      	bne.n	8009858 <tk_del_sem+0x7c>
 8009854:	f002 fcc0 	bl	800c1d8 <knl_dispatch>
 8009858:	68f8      	ldr	r0, [r7, #12]
 800985a:	f002 fe06 	bl	800c46a <set_basepri>

	return ercd;
 800985e:	697b      	ldr	r3, [r7, #20]
}
 8009860:	4618      	mov	r0, r3
 8009862:	3718      	adds	r7, #24
 8009864:	46bd      	mov	sp, r7
 8009866:	bd80      	pop	{r7, pc}
 8009868:	2400240c 	.word	0x2400240c
 800986c:	240025cc 	.word	0x240025cc
 8009870:	240025d8 	.word	0x240025d8
 8009874:	240025dc 	.word	0x240025dc
 8009878:	240025d4 	.word	0x240025d4

0800987c <sem_chg_pri>:

/*
 * Processing if the priority of wait task changes
 */
LOCAL void sem_chg_pri( TCB *tcb, INT oldpri )
{
 800987c:	b580      	push	{r7, lr}
 800987e:	b086      	sub	sp, #24
 8009880:	af00      	add	r7, sp, #0
 8009882:	6078      	str	r0, [r7, #4]
 8009884:	6039      	str	r1, [r7, #0]
	SEMCB	*semcb;
	QUEUE	*queue;
	TCB	*top;

	semcb = get_semcb(tcb->wid);
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800988a:	1e5a      	subs	r2, r3, #1
 800988c:	4613      	mov	r3, r2
 800988e:	00db      	lsls	r3, r3, #3
 8009890:	1a9b      	subs	r3, r3, r2
 8009892:	009b      	lsls	r3, r3, #2
 8009894:	4a19      	ldr	r2, [pc, #100]	@ (80098fc <sem_chg_pri+0x80>)
 8009896:	4413      	add	r3, r2
 8009898:	613b      	str	r3, [r7, #16]
	if ( oldpri >= 0 ) {
 800989a:	683b      	ldr	r3, [r7, #0]
 800989c:	2b00      	cmp	r3, #0
 800989e:	db03      	blt.n	80098a8 <sem_chg_pri+0x2c>
		/* Reorder wait line */
		knl_gcb_change_priority((GCB*)semcb, tcb);
 80098a0:	6879      	ldr	r1, [r7, #4]
 80098a2:	6938      	ldr	r0, [r7, #16]
 80098a4:	f001 f980 	bl	800aba8 <knl_gcb_change_priority>
	}

	if ( (semcb->sematr & TA_CNT) != 0 ) {
 80098a8:	693b      	ldr	r3, [r7, #16]
 80098aa:	691b      	ldr	r3, [r3, #16]
 80098ac:	f003 0302 	and.w	r3, r3, #2
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	d11d      	bne.n	80098f0 <sem_chg_pri+0x74>
		return;
	}

	/* From the head task in a wait queue, allocate semaphore counts
	   and release wait state as much as possible */
	queue = semcb->wait_queue.next;
 80098b4:	693b      	ldr	r3, [r7, #16]
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	617b      	str	r3, [r7, #20]
	while ( queue != &semcb->wait_queue ) {
 80098ba:	e014      	b.n	80098e6 <sem_chg_pri+0x6a>
		top = (TCB*)queue;
 80098bc:	697b      	ldr	r3, [r7, #20]
 80098be:	60fb      	str	r3, [r7, #12]
		queue = queue->next;
 80098c0:	697b      	ldr	r3, [r7, #20]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	617b      	str	r3, [r7, #20]

		/* Meet condition for releasing wait? */
		if ( semcb->semcnt < top->winfo.sem.cnt ) {
 80098c6:	693b      	ldr	r3, [r7, #16]
 80098c8:	695a      	ldr	r2, [r3, #20]
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80098ce:	429a      	cmp	r2, r3
 80098d0:	db10      	blt.n	80098f4 <sem_chg_pri+0x78>
			break;
		}

		/* Release wait */
		knl_wait_release_ok(top);
 80098d2:	68f8      	ldr	r0, [r7, #12]
 80098d4:	f001 f889 	bl	800a9ea <knl_wait_release_ok>

		semcb->semcnt -= top->winfo.sem.cnt;
 80098d8:	693b      	ldr	r3, [r7, #16]
 80098da:	695a      	ldr	r2, [r3, #20]
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80098e0:	1ad2      	subs	r2, r2, r3
 80098e2:	693b      	ldr	r3, [r7, #16]
 80098e4:	615a      	str	r2, [r3, #20]
	while ( queue != &semcb->wait_queue ) {
 80098e6:	693b      	ldr	r3, [r7, #16]
 80098e8:	697a      	ldr	r2, [r7, #20]
 80098ea:	429a      	cmp	r2, r3
 80098ec:	d1e6      	bne.n	80098bc <sem_chg_pri+0x40>
 80098ee:	e002      	b.n	80098f6 <sem_chg_pri+0x7a>
		return;
 80098f0:	bf00      	nop
 80098f2:	e000      	b.n	80098f6 <sem_chg_pri+0x7a>
			break;
 80098f4:	bf00      	nop
	}
}
 80098f6:	3718      	adds	r7, #24
 80098f8:	46bd      	mov	sp, r7
 80098fa:	bd80      	pop	{r7, pc}
 80098fc:	2400240c 	.word	0x2400240c

08009900 <sem_rel_wai>:

/*
 * Processing if the wait task is freed
 */
LOCAL void sem_rel_wai( TCB *tcb )
{
 8009900:	b580      	push	{r7, lr}
 8009902:	b082      	sub	sp, #8
 8009904:	af00      	add	r7, sp, #0
 8009906:	6078      	str	r0, [r7, #4]
	sem_chg_pri(tcb, -1);
 8009908:	f04f 31ff 	mov.w	r1, #4294967295
 800990c:	6878      	ldr	r0, [r7, #4]
 800990e:	f7ff ffb5 	bl	800987c <sem_chg_pri>
}
 8009912:	bf00      	nop
 8009914:	3708      	adds	r7, #8
 8009916:	46bd      	mov	sp, r7
 8009918:	bd80      	pop	{r7, pc}
	...

0800991c <tk_wai_sem>:

/*
 * Wait on semaphore
 */
SYSCALL ER tk_wai_sem( ID semid, INT cnt, TMO tmout )
{
 800991c:	b580      	push	{r7, lr}
 800991e:	b088      	sub	sp, #32
 8009920:	af00      	add	r7, sp, #0
 8009922:	60f8      	str	r0, [r7, #12]
 8009924:	60b9      	str	r1, [r7, #8]
 8009926:	607a      	str	r2, [r7, #4]
	SEMCB	*semcb;
	ER	ercd = E_OK;
 8009928:	2300      	movs	r3, #0
 800992a:	617b      	str	r3, [r7, #20]

	CHECK_SEMID(semid);
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	2b00      	cmp	r3, #0
 8009930:	dd02      	ble.n	8009938 <tk_wai_sem+0x1c>
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	2b10      	cmp	r3, #16
 8009936:	dd02      	ble.n	800993e <tk_wai_sem+0x22>
 8009938:	f06f 0311 	mvn.w	r3, #17
 800993c:	e087      	b.n	8009a4e <tk_wai_sem+0x132>
	CHECK_PAR(cnt > 0);
 800993e:	68bb      	ldr	r3, [r7, #8]
 8009940:	2b00      	cmp	r3, #0
 8009942:	dc02      	bgt.n	800994a <tk_wai_sem+0x2e>
 8009944:	f06f 0310 	mvn.w	r3, #16
 8009948:	e081      	b.n	8009a4e <tk_wai_sem+0x132>
	CHECK_TMOUT(tmout);
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009950:	da02      	bge.n	8009958 <tk_wai_sem+0x3c>
 8009952:	f06f 0310 	mvn.w	r3, #16
 8009956:	e07a      	b.n	8009a4e <tk_wai_sem+0x132>
	CHECK_DISPATCH();
 8009958:	4b3f      	ldr	r3, [pc, #252]	@ (8009a58 <tk_wai_sem+0x13c>)
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	2b00      	cmp	r3, #0
 800995e:	d10d      	bne.n	800997c <tk_wai_sem+0x60>
 8009960:	f7ff ff06 	bl	8009770 <knl_isTaskIndependent>
 8009964:	4603      	mov	r3, r0
 8009966:	2b00      	cmp	r3, #0
 8009968:	d108      	bne.n	800997c <tk_wai_sem+0x60>
 800996a:	4b3c      	ldr	r3, [pc, #240]	@ (8009a5c <tk_wai_sem+0x140>)
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	2b00      	cmp	r3, #0
 8009970:	d004      	beq.n	800997c <tk_wai_sem+0x60>
 8009972:	f002 fd89 	bl	800c488 <get_basepri>
 8009976:	4603      	mov	r3, r0
 8009978:	2b00      	cmp	r3, #0
 800997a:	d002      	beq.n	8009982 <tk_wai_sem+0x66>
 800997c:	f06f 0318 	mvn.w	r3, #24
 8009980:	e065      	b.n	8009a4e <tk_wai_sem+0x132>

	semcb = get_semcb(semid);
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	1e5a      	subs	r2, r3, #1
 8009986:	4613      	mov	r3, r2
 8009988:	00db      	lsls	r3, r3, #3
 800998a:	1a9b      	subs	r3, r3, r2
 800998c:	009b      	lsls	r3, r3, #2
 800998e:	4a34      	ldr	r2, [pc, #208]	@ (8009a60 <tk_wai_sem+0x144>)
 8009990:	4413      	add	r3, r2
 8009992:	61fb      	str	r3, [r7, #28]

	BEGIN_CRITICAL_SECTION;
 8009994:	f002 fd85 	bl	800c4a2 <disint>
 8009998:	61b8      	str	r0, [r7, #24]
	if ( semcb->semid == 0 ) {
 800999a:	69fb      	ldr	r3, [r7, #28]
 800999c:	689b      	ldr	r3, [r3, #8]
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d103      	bne.n	80099aa <tk_wai_sem+0x8e>
		ercd = E_NOEXS;
 80099a2:	f06f 0329 	mvn.w	r3, #41	@ 0x29
 80099a6:	617b      	str	r3, [r7, #20]
		goto error_exit;
 80099a8:	e03e      	b.n	8009a28 <tk_wai_sem+0x10c>
	}
#if CHK_PAR
	if ( cnt > semcb->maxsem ) {
 80099aa:	69fb      	ldr	r3, [r7, #28]
 80099ac:	699b      	ldr	r3, [r3, #24]
 80099ae:	68ba      	ldr	r2, [r7, #8]
 80099b0:	429a      	cmp	r2, r3
 80099b2:	dd03      	ble.n	80099bc <tk_wai_sem+0xa0>
		ercd = E_PAR;
 80099b4:	f06f 0310 	mvn.w	r3, #16
 80099b8:	617b      	str	r3, [r7, #20]
		goto error_exit;
 80099ba:	e035      	b.n	8009a28 <tk_wai_sem+0x10c>
	}
#endif

	if ( ((semcb->sematr & TA_CNT) != 0
 80099bc:	69fb      	ldr	r3, [r7, #28]
 80099be:	691b      	ldr	r3, [r3, #16]
 80099c0:	f003 0302 	and.w	r3, r3, #2
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d10a      	bne.n	80099de <tk_wai_sem+0xc2>
	      || knl_gcb_top_of_wait_queue((GCB*)semcb, knl_ctxtsk) == knl_ctxtsk)
 80099c8:	4b24      	ldr	r3, [pc, #144]	@ (8009a5c <tk_wai_sem+0x140>)
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	4619      	mov	r1, r3
 80099ce:	69f8      	ldr	r0, [r7, #28]
 80099d0:	f001 f8fc 	bl	800abcc <knl_gcb_top_of_wait_queue>
 80099d4:	4602      	mov	r2, r0
 80099d6:	4b21      	ldr	r3, [pc, #132]	@ (8009a5c <tk_wai_sem+0x140>)
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	429a      	cmp	r2, r3
 80099dc:	d10b      	bne.n	80099f6 <tk_wai_sem+0xda>
	  && semcb->semcnt >= cnt ) {
 80099de:	69fb      	ldr	r3, [r7, #28]
 80099e0:	695b      	ldr	r3, [r3, #20]
 80099e2:	68ba      	ldr	r2, [r7, #8]
 80099e4:	429a      	cmp	r2, r3
 80099e6:	dc06      	bgt.n	80099f6 <tk_wai_sem+0xda>
		/* Get semaphore count */
		semcb->semcnt -= cnt;
 80099e8:	69fb      	ldr	r3, [r7, #28]
 80099ea:	695a      	ldr	r2, [r3, #20]
 80099ec:	68bb      	ldr	r3, [r7, #8]
 80099ee:	1ad2      	subs	r2, r2, r3
 80099f0:	69fb      	ldr	r3, [r7, #28]
 80099f2:	615a      	str	r2, [r3, #20]
 80099f4:	e018      	b.n	8009a28 <tk_wai_sem+0x10c>

	} else {
		/* Ready for wait */
		knl_ctxtsk->wspec = ( (semcb->sematr & TA_TPRI) != 0 )?
 80099f6:	69fb      	ldr	r3, [r7, #28]
 80099f8:	691b      	ldr	r3, [r3, #16]
 80099fa:	f003 0301 	and.w	r3, r3, #1
					&knl_wspec_sem_tpri: &knl_wspec_sem_tfifo;
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d001      	beq.n	8009a06 <tk_wai_sem+0xea>
 8009a02:	4a18      	ldr	r2, [pc, #96]	@ (8009a64 <tk_wai_sem+0x148>)
 8009a04:	e000      	b.n	8009a08 <tk_wai_sem+0xec>
 8009a06:	4a18      	ldr	r2, [pc, #96]	@ (8009a68 <tk_wai_sem+0x14c>)
		knl_ctxtsk->wspec = ( (semcb->sematr & TA_TPRI) != 0 )?
 8009a08:	4b14      	ldr	r3, [pc, #80]	@ (8009a5c <tk_wai_sem+0x140>)
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	62da      	str	r2, [r3, #44]	@ 0x2c
		knl_ctxtsk->wercd = &ercd;
 8009a0e:	4b13      	ldr	r3, [pc, #76]	@ (8009a5c <tk_wai_sem+0x140>)
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	f107 0214 	add.w	r2, r7, #20
 8009a16:	63da      	str	r2, [r3, #60]	@ 0x3c
		knl_ctxtsk->winfo.sem.cnt = cnt;
 8009a18:	4b10      	ldr	r3, [pc, #64]	@ (8009a5c <tk_wai_sem+0x140>)
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	68ba      	ldr	r2, [r7, #8]
 8009a1e:	641a      	str	r2, [r3, #64]	@ 0x40
		knl_gcb_make_wait((GCB*)semcb, tmout);
 8009a20:	6879      	ldr	r1, [r7, #4]
 8009a22:	69f8      	ldr	r0, [r7, #28]
 8009a24:	f001 f88a 	bl	800ab3c <knl_gcb_make_wait>
	}

    error_exit:
	END_CRITICAL_SECTION;
 8009a28:	69bb      	ldr	r3, [r7, #24]
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d10b      	bne.n	8009a46 <tk_wai_sem+0x12a>
 8009a2e:	4b0b      	ldr	r3, [pc, #44]	@ (8009a5c <tk_wai_sem+0x140>)
 8009a30:	681a      	ldr	r2, [r3, #0]
 8009a32:	4b0e      	ldr	r3, [pc, #56]	@ (8009a6c <tk_wai_sem+0x150>)
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	429a      	cmp	r2, r3
 8009a38:	d005      	beq.n	8009a46 <tk_wai_sem+0x12a>
 8009a3a:	4b07      	ldr	r3, [pc, #28]	@ (8009a58 <tk_wai_sem+0x13c>)
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	d101      	bne.n	8009a46 <tk_wai_sem+0x12a>
 8009a42:	f002 fbc9 	bl	800c1d8 <knl_dispatch>
 8009a46:	69b8      	ldr	r0, [r7, #24]
 8009a48:	f002 fd0f 	bl	800c46a <set_basepri>

	return ercd;
 8009a4c:	697b      	ldr	r3, [r7, #20]
}
 8009a4e:	4618      	mov	r0, r3
 8009a50:	3720      	adds	r7, #32
 8009a52:	46bd      	mov	sp, r7
 8009a54:	bd80      	pop	{r7, pc}
 8009a56:	bf00      	nop
 8009a58:	240025d4 	.word	0x240025d4
 8009a5c:	240025d8 	.word	0x240025d8
 8009a60:	2400240c 	.word	0x2400240c
 8009a64:	0800d1fc 	.word	0x0800d1fc
 8009a68:	0800d1f0 	.word	0x0800d1f0
 8009a6c:	240025dc 	.word	0x240025dc

08009a70 <QueInit>:
{
 8009a70:	b480      	push	{r7}
 8009a72:	b083      	sub	sp, #12
 8009a74:	af00      	add	r7, sp, #0
 8009a76:	6078      	str	r0, [r7, #4]
	que->next = (struct queue *)que;
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	687a      	ldr	r2, [r7, #4]
 8009a7c:	601a      	str	r2, [r3, #0]
	que->prev = (struct queue *)que;
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	687a      	ldr	r2, [r7, #4]
 8009a82:	605a      	str	r2, [r3, #4]
}
 8009a84:	bf00      	nop
 8009a86:	370c      	adds	r7, #12
 8009a88:	46bd      	mov	sp, r7
 8009a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a8e:	4770      	bx	lr

08009a90 <isQueEmpty>:
{
 8009a90:	b480      	push	{r7}
 8009a92:	b083      	sub	sp, #12
 8009a94:	af00      	add	r7, sp, #0
 8009a96:	6078      	str	r0, [r7, #4]
	return ( que->next == que )? TRUE: FALSE;
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	687a      	ldr	r2, [r7, #4]
 8009a9e:	429a      	cmp	r2, r3
 8009aa0:	bf0c      	ite	eq
 8009aa2:	2301      	moveq	r3, #1
 8009aa4:	2300      	movne	r3, #0
 8009aa6:	b2db      	uxtb	r3, r3
}
 8009aa8:	4618      	mov	r0, r3
 8009aaa:	370c      	adds	r7, #12
 8009aac:	46bd      	mov	sp, r7
 8009aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ab2:	4770      	bx	lr

08009ab4 <QueInsert>:
{
 8009ab4:	b480      	push	{r7}
 8009ab6:	b083      	sub	sp, #12
 8009ab8:	af00      	add	r7, sp, #0
 8009aba:	6078      	str	r0, [r7, #4]
 8009abc:	6039      	str	r1, [r7, #0]
	entry->prev = (struct queue*) que->prev;
 8009abe:	683b      	ldr	r3, [r7, #0]
 8009ac0:	685a      	ldr	r2, [r3, #4]
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	605a      	str	r2, [r3, #4]
	entry->next = que;
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	683a      	ldr	r2, [r7, #0]
 8009aca:	601a      	str	r2, [r3, #0]
	que->prev->next = entry;
 8009acc:	683b      	ldr	r3, [r7, #0]
 8009ace:	685b      	ldr	r3, [r3, #4]
 8009ad0:	687a      	ldr	r2, [r7, #4]
 8009ad2:	601a      	str	r2, [r3, #0]
	que->prev = entry;
 8009ad4:	683b      	ldr	r3, [r7, #0]
 8009ad6:	687a      	ldr	r2, [r7, #4]
 8009ad8:	605a      	str	r2, [r3, #4]
}
 8009ada:	bf00      	nop
 8009adc:	370c      	adds	r7, #12
 8009ade:	46bd      	mov	sp, r7
 8009ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ae4:	4770      	bx	lr

08009ae6 <QueRemove>:
{
 8009ae6:	b480      	push	{r7}
 8009ae8:	b083      	sub	sp, #12
 8009aea:	af00      	add	r7, sp, #0
 8009aec:	6078      	str	r0, [r7, #4]
	if ( entry->next != entry ) {
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	687a      	ldr	r2, [r7, #4]
 8009af4:	429a      	cmp	r2, r3
 8009af6:	d009      	beq.n	8009b0c <QueRemove+0x26>
		entry->prev->next = (struct queue*) entry->next;
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	685b      	ldr	r3, [r3, #4]
 8009afc:	687a      	ldr	r2, [r7, #4]
 8009afe:	6812      	ldr	r2, [r2, #0]
 8009b00:	601a      	str	r2, [r3, #0]
		entry->next->prev = (struct queue*) entry->prev;
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	687a      	ldr	r2, [r7, #4]
 8009b08:	6852      	ldr	r2, [r2, #4]
 8009b0a:	605a      	str	r2, [r3, #4]
}
 8009b0c:	bf00      	nop
 8009b0e:	370c      	adds	r7, #12
 8009b10:	46bd      	mov	sp, r7
 8009b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b16:	4770      	bx	lr

08009b18 <knl_ready_queue_calc_top_priority>:

IMPORT RDYQUE	knl_ready_queue;

#if NUM_TSKPRI <= INT_BITWIDTH
Inline INT knl_ready_queue_calc_top_priority( UINT bitmap, INT pos )
{
 8009b18:	b480      	push	{r7}
 8009b1a:	b083      	sub	sp, #12
 8009b1c:	af00      	add	r7, sp, #0
 8009b1e:	6078      	str	r0, [r7, #4]
 8009b20:	6039      	str	r1, [r7, #0]
	for ( ; pos < NUM_TSKPRI; pos++ ) {
 8009b22:	e00b      	b.n	8009b3c <knl_ready_queue_calc_top_priority+0x24>
		if ( bitmap & (1U << pos) ) {
 8009b24:	2201      	movs	r2, #1
 8009b26:	683b      	ldr	r3, [r7, #0]
 8009b28:	409a      	lsls	r2, r3
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	4013      	ands	r3, r2
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	d001      	beq.n	8009b36 <knl_ready_queue_calc_top_priority+0x1e>
			return pos;
 8009b32:	683b      	ldr	r3, [r7, #0]
 8009b34:	e006      	b.n	8009b44 <knl_ready_queue_calc_top_priority+0x2c>
	for ( ; pos < NUM_TSKPRI; pos++ ) {
 8009b36:	683b      	ldr	r3, [r7, #0]
 8009b38:	3301      	adds	r3, #1
 8009b3a:	603b      	str	r3, [r7, #0]
 8009b3c:	683b      	ldr	r3, [r7, #0]
 8009b3e:	2b1f      	cmp	r3, #31
 8009b40:	ddf0      	ble.n	8009b24 <knl_ready_queue_calc_top_priority+0xc>
		}
	}
	return NUM_TSKPRI;
 8009b42:	2320      	movs	r3, #32
}
 8009b44:	4618      	mov	r0, r3
 8009b46:	370c      	adds	r7, #12
 8009b48:	46bd      	mov	sp, r7
 8009b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b4e:	4770      	bx	lr

08009b50 <knl_ready_queue_initialize>:

/*
 * Ready queue initialization
 */
Inline void knl_ready_queue_initialize( RDYQUE *rq )
{
 8009b50:	b580      	push	{r7, lr}
 8009b52:	b084      	sub	sp, #16
 8009b54:	af00      	add	r7, sp, #0
 8009b56:	6078      	str	r0, [r7, #4]
	INT	i;

	rq->top_priority = NUM_TSKPRI;
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	2220      	movs	r2, #32
 8009b5c:	601a      	str	r2, [r3, #0]
	for ( i = 0; i < NUM_TSKPRI; i++ ) {
 8009b5e:	2300      	movs	r3, #0
 8009b60:	60fb      	str	r3, [r7, #12]
 8009b62:	e00a      	b.n	8009b7a <knl_ready_queue_initialize+0x2a>
		QueInit(&rq->tskque[i]);
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	00db      	lsls	r3, r3, #3
 8009b68:	687a      	ldr	r2, [r7, #4]
 8009b6a:	4413      	add	r3, r2
 8009b6c:	3304      	adds	r3, #4
 8009b6e:	4618      	mov	r0, r3
 8009b70:	f7ff ff7e 	bl	8009a70 <QueInit>
	for ( i = 0; i < NUM_TSKPRI; i++ ) {
 8009b74:	68fb      	ldr	r3, [r7, #12]
 8009b76:	3301      	adds	r3, #1
 8009b78:	60fb      	str	r3, [r7, #12]
 8009b7a:	68fb      	ldr	r3, [r7, #12]
 8009b7c:	2b1f      	cmp	r3, #31
 8009b7e:	ddf1      	ble.n	8009b64 <knl_ready_queue_initialize+0x14>
	}
	rq->null = NULL;
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	2200      	movs	r2, #0
 8009b84:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104
	rq->klocktsk = NULL;
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	2200      	movs	r2, #0
 8009b8c:	f8c3 210c 	str.w	r2, [r3, #268]	@ 0x10c
	knl_memset(rq->bitmap, 0, sizeof(rq->bitmap));
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 8009b96:	2204      	movs	r2, #4
 8009b98:	2100      	movs	r1, #0
 8009b9a:	4618      	mov	r0, r3
 8009b9c:	f001 f83e 	bl	800ac1c <knl_memset>
}
 8009ba0:	bf00      	nop
 8009ba2:	3710      	adds	r7, #16
 8009ba4:	46bd      	mov	sp, r7
 8009ba6:	bd80      	pop	{r7, pc}

08009ba8 <knl_ready_queue_top>:

/*
 * Return the highest priority task in ready queue
 */
Inline TCB* knl_ready_queue_top( RDYQUE *rq )
{
 8009ba8:	b480      	push	{r7}
 8009baa:	b083      	sub	sp, #12
 8009bac:	af00      	add	r7, sp, #0
 8009bae:	6078      	str	r0, [r7, #4]
	/* If there is a task at kernel lock, that is the highest priority task */
	if ( rq->klocktsk != NULL ) {
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d003      	beq.n	8009bc2 <knl_ready_queue_top+0x1a>
		return rq->klocktsk;
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 8009bc0:	e005      	b.n	8009bce <knl_ready_queue_top+0x26>
	}

	return (TCB*)rq->tskque[rq->top_priority].next;
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	687a      	ldr	r2, [r7, #4]
 8009bc8:	00db      	lsls	r3, r3, #3
 8009bca:	4413      	add	r3, r2
 8009bcc:	685b      	ldr	r3, [r3, #4]
}
 8009bce:	4618      	mov	r0, r3
 8009bd0:	370c      	adds	r7, #12
 8009bd2:	46bd      	mov	sp, r7
 8009bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bd8:	4770      	bx	lr

08009bda <knl_ready_queue_insert>:
 *	indicated with 'tcb'. Set the applicable bit in the bitmap area and 
 *	update 'top_priority' if necessary. When updating 'top_priority,' 
 *	return TRUE, otherwise FALSE.
 */
Inline BOOL knl_ready_queue_insert( RDYQUE *rq, TCB *tcb )
{
 8009bda:	b580      	push	{r7, lr}
 8009bdc:	b084      	sub	sp, #16
 8009bde:	af00      	add	r7, sp, #0
 8009be0:	6078      	str	r0, [r7, #4]
 8009be2:	6039      	str	r1, [r7, #0]
	INT	priority = tcb->priority;
 8009be4:	683b      	ldr	r3, [r7, #0]
 8009be6:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 8009bea:	60fb      	str	r3, [r7, #12]

	QueInsert(&tcb->tskque, &rq->tskque[priority]);
 8009bec:	6838      	ldr	r0, [r7, #0]
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	00db      	lsls	r3, r3, #3
 8009bf2:	687a      	ldr	r2, [r7, #4]
 8009bf4:	4413      	add	r3, r2
 8009bf6:	3304      	adds	r3, #4
 8009bf8:	4619      	mov	r1, r3
 8009bfa:	f7ff ff5b 	bl	8009ab4 <QueInsert>
#if NUM_TSKPRI <= INT_BITWIDTH
	rq->bitmap[0] |= (1U << priority);
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 8009c04:	2101      	movs	r1, #1
 8009c06:	68fb      	ldr	r3, [r7, #12]
 8009c08:	fa01 f303 	lsl.w	r3, r1, r3
 8009c0c:	431a      	orrs	r2, r3
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
#else
	knl_bitset(rq->bitmap, priority);
#endif

	if ( tcb->klocked ) {
 8009c14:	683b      	ldr	r3, [r7, #0]
 8009c16:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009c1a:	f003 0302 	and.w	r3, r3, #2
 8009c1e:	b2db      	uxtb	r3, r3
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	d003      	beq.n	8009c2c <knl_ready_queue_insert+0x52>
		rq->klocktsk = tcb;
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	683a      	ldr	r2, [r7, #0]
 8009c28:	f8c3 210c 	str.w	r2, [r3, #268]	@ 0x10c
	}

	if ( priority < rq->top_priority ) {
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	68fa      	ldr	r2, [r7, #12]
 8009c32:	429a      	cmp	r2, r3
 8009c34:	da04      	bge.n	8009c40 <knl_ready_queue_insert+0x66>
		rq->top_priority = priority;
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	68fa      	ldr	r2, [r7, #12]
 8009c3a:	601a      	str	r2, [r3, #0]
		return TRUE;
 8009c3c:	2301      	movs	r3, #1
 8009c3e:	e000      	b.n	8009c42 <knl_ready_queue_insert+0x68>
	}
	return FALSE;
 8009c40:	2300      	movs	r3, #0
}
 8009c42:	4618      	mov	r0, r3
 8009c44:	3710      	adds	r7, #16
 8009c46:	46bd      	mov	sp, r7
 8009c48:	bd80      	pop	{r7, pc}

08009c4a <knl_ready_queue_delete>:
 *	In addition, update 'top_priority' if the deleted task had the highest 
 *	priority. In such case, use the bitmap area to search the second
 *	highest priority task.
 */
Inline void knl_ready_queue_delete( RDYQUE *rq, TCB *tcb )
{
 8009c4a:	b580      	push	{r7, lr}
 8009c4c:	b084      	sub	sp, #16
 8009c4e:	af00      	add	r7, sp, #0
 8009c50:	6078      	str	r0, [r7, #4]
 8009c52:	6039      	str	r1, [r7, #0]
	INT	priority = tcb->priority;
 8009c54:	683b      	ldr	r3, [r7, #0]
 8009c56:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 8009c5a:	60fb      	str	r3, [r7, #12]
#if NUM_TSKPRI > INT_BITWIDTH
	INT	i;
#endif

	if ( rq->klocktsk == tcb ) {
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 8009c62:	683a      	ldr	r2, [r7, #0]
 8009c64:	429a      	cmp	r2, r3
 8009c66:	d103      	bne.n	8009c70 <knl_ready_queue_delete+0x26>
		rq->klocktsk = NULL;
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	2200      	movs	r2, #0
 8009c6c:	f8c3 210c 	str.w	r2, [r3, #268]	@ 0x10c
	}

	QueRemove(&tcb->tskque);
 8009c70:	683b      	ldr	r3, [r7, #0]
 8009c72:	4618      	mov	r0, r3
 8009c74:	f7ff ff37 	bl	8009ae6 <QueRemove>
	if ( tcb->klockwait ) {
 8009c78:	683b      	ldr	r3, [r7, #0]
 8009c7a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009c7e:	f003 0301 	and.w	r3, r3, #1
 8009c82:	b2db      	uxtb	r3, r3
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	d007      	beq.n	8009c98 <knl_ready_queue_delete+0x4e>
		/* Delete from kernel lock wait queue */
		tcb->klockwait = FALSE;
 8009c88:	683a      	ldr	r2, [r7, #0]
 8009c8a:	f892 3028 	ldrb.w	r3, [r2, #40]	@ 0x28
 8009c8e:	f36f 0300 	bfc	r3, #0, #1
 8009c92:	f882 3028 	strb.w	r3, [r2, #40]	@ 0x28
		return;
 8009c96:	e029      	b.n	8009cec <knl_ready_queue_delete+0xa2>
	}
	if ( !isQueEmpty(&rq->tskque[priority]) ) {
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	00db      	lsls	r3, r3, #3
 8009c9c:	687a      	ldr	r2, [r7, #4]
 8009c9e:	4413      	add	r3, r2
 8009ca0:	3304      	adds	r3, #4
 8009ca2:	4618      	mov	r0, r3
 8009ca4:	f7ff fef4 	bl	8009a90 <isQueEmpty>
 8009ca8:	4603      	mov	r3, r0
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	d01b      	beq.n	8009ce6 <knl_ready_queue_delete+0x9c>
		return;
	}

#if NUM_TSKPRI <= INT_BITWIDTH
	rq->bitmap[0] &= ~(1U << priority);
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 8009cb4:	2101      	movs	r1, #1
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	fa01 f303 	lsl.w	r3, r1, r3
 8009cbc:	43db      	mvns	r3, r3
 8009cbe:	401a      	ands	r2, r3
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
#else
	knl_bitclr(rq->bitmap, priority);
#endif
	if ( priority != rq->top_priority ) {
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	68fa      	ldr	r2, [r7, #12]
 8009ccc:	429a      	cmp	r2, r3
 8009cce:	d10c      	bne.n	8009cea <knl_ready_queue_delete+0xa0>
		return;
	}

#if NUM_TSKPRI <= INT_BITWIDTH
	rq->top_priority = knl_ready_queue_calc_top_priority(rq->bitmap[0], priority);
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8009cd6:	68f9      	ldr	r1, [r7, #12]
 8009cd8:	4618      	mov	r0, r3
 8009cda:	f7ff ff1d 	bl	8009b18 <knl_ready_queue_calc_top_priority>
 8009cde:	4602      	mov	r2, r0
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	601a      	str	r2, [r3, #0]
 8009ce4:	e002      	b.n	8009cec <knl_ready_queue_delete+0xa2>
		return;
 8009ce6:	bf00      	nop
 8009ce8:	e000      	b.n	8009cec <knl_ready_queue_delete+0xa2>
		return;
 8009cea:	bf00      	nop
		rq->top_priority = priority + i;
	} else {
		rq->top_priority = NUM_TSKPRI;
	}
#endif
}
 8009cec:	3710      	adds	r7, #16
 8009cee:	46bd      	mov	sp, r7
 8009cf0:	bd80      	pop	{r7, pc}

08009cf2 <knl_setup_context>:
/*
 * Create stack frame for task startup
 *	Call from 'make_dormant()'
 */
Inline void knl_setup_context( TCB *tcb )
{
 8009cf2:	b480      	push	{r7}
 8009cf4:	b085      	sub	sp, #20
 8009cf6:	af00      	add	r7, sp, #0
 8009cf8:	6078      	str	r0, [r7, #4]
	SStackFrame	*ssp;

	ssp = tcb->isstack;
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009cfe:	60fb      	str	r3, [r7, #12]
	ssp--;
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	3b44      	subs	r3, #68	@ 0x44
 8009d04:	60fb      	str	r3, [r7, #12]

	/* CPU context initialization */
	ssp->exp_ret	= 0xFFFFFFF9;
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	f06f 0206 	mvn.w	r2, #6
 8009d0c:	601a      	str	r2, [r3, #0]
	ssp->lr		= 0;
 8009d0e:	68fb      	ldr	r3, [r7, #12]
 8009d10:	2200      	movs	r2, #0
 8009d12:	639a      	str	r2, [r3, #56]	@ 0x38
	ssp->xpsr	= 0x01000000;		/* Initial SR */
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8009d1a:	641a      	str	r2, [r3, #64]	@ 0x40
	ssp->pc = (void*)((UW)tcb->task & ~0x00000001UL);	/* Task startup address */
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	695b      	ldr	r3, [r3, #20]
 8009d20:	f023 0301 	bic.w	r3, r3, #1
 8009d24:	461a      	mov	r2, r3
 8009d26:	68fb      	ldr	r3, [r7, #12]
 8009d28:	63da      	str	r2, [r3, #60]	@ 0x3c

	tcb->tskctxb.ssp = ssp;		/* System stack pointer */
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	68fa      	ldr	r2, [r7, #12]
 8009d2e:	619a      	str	r2, [r3, #24]

#if USE_FPU && ALWAYS_FPU_ATR
	tcb->tskatr |= TA_FPU;		/* Always set the TA_FPU attribute on all tasks */
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	691b      	ldr	r3, [r3, #16]
 8009d34:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	611a      	str	r2, [r3, #16]
#endif
}
 8009d3c:	bf00      	nop
 8009d3e:	3714      	adds	r7, #20
 8009d40:	46bd      	mov	sp, r7
 8009d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d46:	4770      	bx	lr

08009d48 <knl_task_initialize>:

/*
 * TCB Initialization
 */
EXPORT ER knl_task_initialize( void )
{
 8009d48:	b580      	push	{r7, lr}
 8009d4a:	b084      	sub	sp, #16
 8009d4c:	af00      	add	r7, sp, #0
	if ( NUM_TSKID < 1 ) {
		return E_SYS;
	}

	/* Initialize task execution control information */
	knl_ctxtsk = knl_schedtsk = NULL;
 8009d4e:	4b19      	ldr	r3, [pc, #100]	@ (8009db4 <knl_task_initialize+0x6c>)
 8009d50:	2200      	movs	r2, #0
 8009d52:	601a      	str	r2, [r3, #0]
 8009d54:	4b17      	ldr	r3, [pc, #92]	@ (8009db4 <knl_task_initialize+0x6c>)
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	4a17      	ldr	r2, [pc, #92]	@ (8009db8 <knl_task_initialize+0x70>)
 8009d5a:	6013      	str	r3, [r2, #0]
	knl_ready_queue_initialize(&knl_ready_queue);
 8009d5c:	4817      	ldr	r0, [pc, #92]	@ (8009dbc <knl_task_initialize+0x74>)
 8009d5e:	f7ff fef7 	bl	8009b50 <knl_ready_queue_initialize>
	knl_dispatch_disabled = DDS_ENABLE;
 8009d62:	4b17      	ldr	r3, [pc, #92]	@ (8009dc0 <knl_task_initialize+0x78>)
 8009d64:	2200      	movs	r2, #0
 8009d66:	601a      	str	r2, [r3, #0]

	/* Register all TCBs onto FreeQue */
	QueInit(&knl_free_tcb);
 8009d68:	4816      	ldr	r0, [pc, #88]	@ (8009dc4 <knl_task_initialize+0x7c>)
 8009d6a:	f7ff fe81 	bl	8009a70 <QueInit>
	for ( tcb = knl_tcb_table, i = 0; i < NUM_TSKID; tcb++, i++ ) {
 8009d6e:	4b16      	ldr	r3, [pc, #88]	@ (8009dc8 <knl_task_initialize+0x80>)
 8009d70:	60bb      	str	r3, [r7, #8]
 8009d72:	2300      	movs	r3, #0
 8009d74:	60fb      	str	r3, [r7, #12]
 8009d76:	e014      	b.n	8009da2 <knl_task_initialize+0x5a>
		tskid = ID_TSK(i);
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	3301      	adds	r3, #1
 8009d7c:	607b      	str	r3, [r7, #4]
		tcb->tskid = tskid;
 8009d7e:	68bb      	ldr	r3, [r7, #8]
 8009d80:	687a      	ldr	r2, [r7, #4]
 8009d82:	609a      	str	r2, [r3, #8]
		tcb->state = TS_NONEXIST;
 8009d84:	68bb      	ldr	r3, [r7, #8]
 8009d86:	2200      	movs	r2, #0
 8009d88:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
#if USE_LEGACY_API && USE_RENDEZVOUS
		tcb->wrdvno = tskid;
#endif

		QueInsert(&tcb->tskque, &knl_free_tcb);
 8009d8c:	68bb      	ldr	r3, [r7, #8]
 8009d8e:	490d      	ldr	r1, [pc, #52]	@ (8009dc4 <knl_task_initialize+0x7c>)
 8009d90:	4618      	mov	r0, r3
 8009d92:	f7ff fe8f 	bl	8009ab4 <QueInsert>
	for ( tcb = knl_tcb_table, i = 0; i < NUM_TSKID; tcb++, i++ ) {
 8009d96:	68bb      	ldr	r3, [r7, #8]
 8009d98:	3368      	adds	r3, #104	@ 0x68
 8009d9a:	60bb      	str	r3, [r7, #8]
 8009d9c:	68fb      	ldr	r3, [r7, #12]
 8009d9e:	3301      	adds	r3, #1
 8009da0:	60fb      	str	r3, [r7, #12]
 8009da2:	68fb      	ldr	r3, [r7, #12]
 8009da4:	2b1f      	cmp	r3, #31
 8009da6:	dde7      	ble.n	8009d78 <knl_task_initialize+0x30>
	}

	return E_OK;
 8009da8:	2300      	movs	r3, #0
}
 8009daa:	4618      	mov	r0, r3
 8009dac:	3710      	adds	r7, #16
 8009dae:	46bd      	mov	sp, r7
 8009db0:	bd80      	pop	{r7, pc}
 8009db2:	bf00      	nop
 8009db4:	240025dc 	.word	0x240025dc
 8009db8:	240025d8 	.word	0x240025d8
 8009dbc:	240025e0 	.word	0x240025e0
 8009dc0:	240025d4 	.word	0x240025d4
 8009dc4:	240033f0 	.word	0x240033f0
 8009dc8:	240026f0 	.word	0x240026f0

08009dcc <knl_make_dormant>:

/*
 * Prepare task execution.
 */
EXPORT void knl_make_dormant( TCB *tcb )
{
 8009dcc:	b580      	push	{r7, lr}
 8009dce:	b082      	sub	sp, #8
 8009dd0:	af00      	add	r7, sp, #0
 8009dd2:	6078      	str	r0, [r7, #4]
	/* Initialize variables which should be reset at DORMANT state */
	tcb->state	= TS_DORMANT;
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	2208      	movs	r2, #8
 8009dd8:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
	tcb->priority	= tcb->bpriority = tcb->ipriority;
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	f893 2024 	ldrb.w	r2, [r3, #36]	@ 0x24
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	f893 2025 	ldrb.w	r2, [r3, #37]	@ 0x25
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
	tcb->sysmode	= tcb->isysmode;
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	f993 3020 	ldrsb.w	r3, [r3, #32]
 8009dfa:	461a      	mov	r2, r3
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	845a      	strh	r2, [r3, #34]	@ 0x22
	tcb->wupcnt	= 0;
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	2200      	movs	r2, #0
 8009e04:	635a      	str	r2, [r3, #52]	@ 0x34
	tcb->suscnt	= 0;
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	2200      	movs	r2, #0
 8009e0a:	639a      	str	r2, [r3, #56]	@ 0x38

	tcb->klockwait	= FALSE;
 8009e0c:	687a      	ldr	r2, [r7, #4]
 8009e0e:	f892 3028 	ldrb.w	r3, [r2, #40]	@ 0x28
 8009e12:	f36f 0300 	bfc	r3, #0, #1
 8009e16:	f882 3028 	strb.w	r3, [r2, #40]	@ 0x28
	tcb->klocked	= FALSE;
 8009e1a:	687a      	ldr	r2, [r7, #4]
 8009e1c:	f892 3028 	ldrb.w	r3, [r2, #40]	@ 0x28
 8009e20:	f36f 0341 	bfc	r3, #1, #1
 8009e24:	f882 3028 	strb.w	r3, [r2, #40]	@ 0x28
#if USE_DBGSPT && defined(USE_FUNC_TD_INF_TSK)
	tcb->stime	= 0;
	tcb->utime	= 0;
#endif

	tcb->wercd = NULL;
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	2200      	movs	r2, #0
 8009e2c:	63da      	str	r2, [r3, #60]	@ 0x3c

#if USE_MUTEX == 1
	tcb->mtxlist	= NULL;
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	2200      	movs	r2, #0
 8009e32:	665a      	str	r2, [r3, #100]	@ 0x64
#endif

	/* Set context to start task */
	knl_setup_context(tcb);
 8009e34:	6878      	ldr	r0, [r7, #4]
 8009e36:	f7ff ff5c 	bl	8009cf2 <knl_setup_context>
}
 8009e3a:	bf00      	nop
 8009e3c:	3708      	adds	r7, #8
 8009e3e:	46bd      	mov	sp, r7
 8009e40:	bd80      	pop	{r7, pc}
	...

08009e44 <knl_make_ready>:
 * Set task to READY state.
 *	Update the task state and insert in the ready queue. If necessary, 
 *	update 'knl_schedtsk' and request to start task dispatcher. 
 */
EXPORT void knl_make_ready( TCB *tcb )
{
 8009e44:	b580      	push	{r7, lr}
 8009e46:	b082      	sub	sp, #8
 8009e48:	af00      	add	r7, sp, #0
 8009e4a:	6078      	str	r0, [r7, #4]
	tcb->state = TS_READY;
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	2201      	movs	r2, #1
 8009e50:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
	if ( knl_ready_queue_insert(&knl_ready_queue, tcb) ) {
 8009e54:	6879      	ldr	r1, [r7, #4]
 8009e56:	4806      	ldr	r0, [pc, #24]	@ (8009e70 <knl_make_ready+0x2c>)
 8009e58:	f7ff febf 	bl	8009bda <knl_ready_queue_insert>
 8009e5c:	4603      	mov	r3, r0
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	d002      	beq.n	8009e68 <knl_make_ready+0x24>
		knl_schedtsk = tcb;
 8009e62:	4a04      	ldr	r2, [pc, #16]	@ (8009e74 <knl_make_ready+0x30>)
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	6013      	str	r3, [r2, #0]
	}
}
 8009e68:	bf00      	nop
 8009e6a:	3708      	adds	r7, #8
 8009e6c:	46bd      	mov	sp, r7
 8009e6e:	bd80      	pop	{r7, pc}
 8009e70:	240025e0 	.word	0x240025e0
 8009e74:	240025dc 	.word	0x240025dc

08009e78 <knl_make_non_ready>:
 *	If the deleted task is 'knl_schedtsk', set 'knl_schedtsk' to the
 *	highest priority task in the ready queue. 
 *	'tcb' task must be READY.
 */
EXPORT void knl_make_non_ready( TCB *tcb )
{
 8009e78:	b580      	push	{r7, lr}
 8009e7a:	b082      	sub	sp, #8
 8009e7c:	af00      	add	r7, sp, #0
 8009e7e:	6078      	str	r0, [r7, #4]
	knl_ready_queue_delete(&knl_ready_queue, tcb);
 8009e80:	6879      	ldr	r1, [r7, #4]
 8009e82:	4809      	ldr	r0, [pc, #36]	@ (8009ea8 <knl_make_non_ready+0x30>)
 8009e84:	f7ff fee1 	bl	8009c4a <knl_ready_queue_delete>
	if ( knl_schedtsk == tcb ) {
 8009e88:	4b08      	ldr	r3, [pc, #32]	@ (8009eac <knl_make_non_ready+0x34>)
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	687a      	ldr	r2, [r7, #4]
 8009e8e:	429a      	cmp	r2, r3
 8009e90:	d105      	bne.n	8009e9e <knl_make_non_ready+0x26>
		knl_schedtsk = knl_ready_queue_top(&knl_ready_queue);
 8009e92:	4805      	ldr	r0, [pc, #20]	@ (8009ea8 <knl_make_non_ready+0x30>)
 8009e94:	f7ff fe88 	bl	8009ba8 <knl_ready_queue_top>
 8009e98:	4603      	mov	r3, r0
 8009e9a:	4a04      	ldr	r2, [pc, #16]	@ (8009eac <knl_make_non_ready+0x34>)
 8009e9c:	6013      	str	r3, [r2, #0]
	}
}
 8009e9e:	bf00      	nop
 8009ea0:	3708      	adds	r7, #8
 8009ea2:	46bd      	mov	sp, r7
 8009ea4:	bd80      	pop	{r7, pc}
 8009ea6:	bf00      	nop
 8009ea8:	240025e0 	.word	0x240025e0
 8009eac:	240025dc 	.word	0x240025dc

08009eb0 <QueRemoveNext>:
{
 8009eb0:	b480      	push	{r7}
 8009eb2:	b085      	sub	sp, #20
 8009eb4:	af00      	add	r7, sp, #0
 8009eb6:	6078      	str	r0, [r7, #4]
	if ( que->next == que ) {
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	687a      	ldr	r2, [r7, #4]
 8009ebe:	429a      	cmp	r2, r3
 8009ec0:	d101      	bne.n	8009ec6 <QueRemoveNext+0x16>
		return NULL;
 8009ec2:	2300      	movs	r3, #0
 8009ec4:	e00b      	b.n	8009ede <QueRemoveNext+0x2e>
	entry = que->next;
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	60fb      	str	r3, [r7, #12]
	que->next = (struct queue*)entry->next;
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	681a      	ldr	r2, [r3, #0]
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	601a      	str	r2, [r3, #0]
	entry->next->prev = que;
 8009ed4:	68fb      	ldr	r3, [r7, #12]
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	687a      	ldr	r2, [r7, #4]
 8009eda:	605a      	str	r2, [r3, #4]
	return entry;
 8009edc:	68fb      	ldr	r3, [r7, #12]
}
 8009ede:	4618      	mov	r0, r3
 8009ee0:	3714      	adds	r7, #20
 8009ee2:	46bd      	mov	sp, r7
 8009ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ee8:	4770      	bx	lr
	...

08009eec <knl_isTaskIndependent>:
{
 8009eec:	b480      	push	{r7}
 8009eee:	af00      	add	r7, sp, #0
	return ( knl_taskindp > 0 )? TRUE: FALSE;
 8009ef0:	4b05      	ldr	r3, [pc, #20]	@ (8009f08 <knl_isTaskIndependent+0x1c>)
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	bfcc      	ite	gt
 8009ef8:	2301      	movgt	r3, #1
 8009efa:	2300      	movle	r3, #0
 8009efc:	b2db      	uxtb	r3, r3
}
 8009efe:	4618      	mov	r0, r3
 8009f00:	46bd      	mov	sp, r7
 8009f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f06:	4770      	bx	lr
 8009f08:	240011a4 	.word	0x240011a4

08009f0c <knl_setup_stacd>:
/*
 * Set task startup code
 *	Called by 'tk_sta_tsk()' processing.
 */
Inline void knl_setup_stacd( TCB *tcb, INT stacd )
{
 8009f0c:	b480      	push	{r7}
 8009f0e:	b085      	sub	sp, #20
 8009f10:	af00      	add	r7, sp, #0
 8009f12:	6078      	str	r0, [r7, #4]
 8009f14:	6039      	str	r1, [r7, #0]
	SStackFrame	*ssp;
	
	ssp = tcb->tskctxb.ssp;
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	699b      	ldr	r3, [r3, #24]
 8009f1a:	60fb      	str	r3, [r7, #12]

	ssp->r[0] = stacd;
 8009f1c:	683a      	ldr	r2, [r7, #0]
 8009f1e:	68fb      	ldr	r3, [r7, #12]
 8009f20:	625a      	str	r2, [r3, #36]	@ 0x24
	ssp->r[1] = (VW)tcb->exinf;
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	68db      	ldr	r3, [r3, #12]
 8009f26:	461a      	mov	r2, r3
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8009f2c:	bf00      	nop
 8009f2e:	3714      	adds	r7, #20
 8009f30:	46bd      	mov	sp, r7
 8009f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f36:	4770      	bx	lr

08009f38 <tk_cre_tsk>:

/*
 * Create task
 */
SYSCALL ID tk_cre_tsk( CONST T_CTSK *pk_ctsk )
{
 8009f38:	b580      	push	{r7, lr}
 8009f3a:	b088      	sub	sp, #32
 8009f3c:	af00      	add	r7, sp, #0
 8009f3e:	6078      	str	r0, [r7, #4]
#if CHK_RSATR
	const ATR VALID_TSKATR = {	/* Valid value of task attribute */
 8009f40:	f241 3321 	movw	r3, #4897	@ 0x1321
 8009f44:	613b      	str	r3, [r7, #16]
	TCB	*tcb;
	W	sstksz;
	void	*stack;
	ER	ercd;

	CHECK_RSATR(pk_ctsk->tskatr, VALID_TSKATR);
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	685a      	ldr	r2, [r3, #4]
 8009f4a:	693b      	ldr	r3, [r7, #16]
 8009f4c:	43db      	mvns	r3, r3
 8009f4e:	4013      	ands	r3, r2
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	d002      	beq.n	8009f5a <tk_cre_tsk+0x22>
 8009f54:	f06f 030a 	mvn.w	r3, #10
 8009f58:	e090      	b.n	800a07c <tk_cre_tsk+0x144>
#if !USE_IMALLOC
	/* TA_USERBUF must be specified if configured in no Imalloc */
	CHECK_PAR((pk_ctsk->tskatr & TA_USERBUF) != 0);
#endif
	CHECK_PAR(pk_ctsk->stksz >= 0);
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	691b      	ldr	r3, [r3, #16]
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	da02      	bge.n	8009f68 <tk_cre_tsk+0x30>
 8009f62:	f06f 0310 	mvn.w	r3, #16
 8009f66:	e089      	b.n	800a07c <tk_cre_tsk+0x144>
	CHECK_PRI(pk_ctsk->itskpri);
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	68db      	ldr	r3, [r3, #12]
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	dd03      	ble.n	8009f78 <tk_cre_tsk+0x40>
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	68db      	ldr	r3, [r3, #12]
 8009f74:	2b20      	cmp	r3, #32
 8009f76:	dd02      	ble.n	8009f7e <tk_cre_tsk+0x46>
 8009f78:	f06f 0310 	mvn.w	r3, #16
 8009f7c:	e07e      	b.n	800a07c <tk_cre_tsk+0x144>

	if ( (pk_ctsk->tskatr & TA_USERBUF) != 0 ) {
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	685b      	ldr	r3, [r3, #4]
 8009f82:	f003 0320 	and.w	r3, r3, #32
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	d00c      	beq.n	8009fa4 <tk_cre_tsk+0x6c>
		/* Use user buffer */
		sstksz = pk_ctsk->stksz;
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	691b      	ldr	r3, [r3, #16]
 8009f8e:	61fb      	str	r3, [r7, #28]
		CHECK_PAR(sstksz >= MIN_SYS_STACK_SIZE);
 8009f90:	69fb      	ldr	r3, [r7, #28]
 8009f92:	2b7f      	cmp	r3, #127	@ 0x7f
 8009f94:	dc02      	bgt.n	8009f9c <tk_cre_tsk+0x64>
 8009f96:	f06f 0310 	mvn.w	r3, #16
 8009f9a:	e06f      	b.n	800a07c <tk_cre_tsk+0x144>
		stack = pk_ctsk->bufptr;
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	695b      	ldr	r3, [r3, #20]
 8009fa0:	61bb      	str	r3, [r7, #24]
 8009fa2:	e015      	b.n	8009fd0 <tk_cre_tsk+0x98>
	} else {
#if USE_IMALLOC
		/* Allocate system stack area */
		sstksz = pk_ctsk->stksz + DEFAULT_SYS_STKSZ;
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	691b      	ldr	r3, [r3, #16]
 8009fa8:	3380      	adds	r3, #128	@ 0x80
 8009faa:	61fb      	str	r3, [r7, #28]
		sstksz  = (sstksz  + 7) / 8 * 8;	/* Align to a multiple of 8 */
 8009fac:	69fb      	ldr	r3, [r7, #28]
 8009fae:	3307      	adds	r3, #7
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	da00      	bge.n	8009fb6 <tk_cre_tsk+0x7e>
 8009fb4:	3307      	adds	r3, #7
 8009fb6:	10db      	asrs	r3, r3, #3
 8009fb8:	00db      	lsls	r3, r3, #3
 8009fba:	61fb      	str	r3, [r7, #28]
		stack = knl_Imalloc((UW)sstksz);
 8009fbc:	69f8      	ldr	r0, [r7, #28]
 8009fbe:	f7ff f949 	bl	8009254 <knl_Imalloc>
 8009fc2:	61b8      	str	r0, [r7, #24]
		if ( stack == NULL ) {
 8009fc4:	69bb      	ldr	r3, [r7, #24]
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	d102      	bne.n	8009fd0 <tk_cre_tsk+0x98>
			return E_NOMEM;
 8009fca:	f06f 0320 	mvn.w	r3, #32
 8009fce:	e055      	b.n	800a07c <tk_cre_tsk+0x144>
		}
#endif
	}

	BEGIN_CRITICAL_SECTION;
 8009fd0:	f002 fa67 	bl	800c4a2 <disint>
 8009fd4:	60f8      	str	r0, [r7, #12]
	/* Get control block from FreeQue */
	tcb = (TCB*)QueRemoveNext(&knl_free_tcb);
 8009fd6:	482b      	ldr	r0, [pc, #172]	@ (800a084 <tk_cre_tsk+0x14c>)
 8009fd8:	f7ff ff6a 	bl	8009eb0 <QueRemoveNext>
 8009fdc:	60b8      	str	r0, [r7, #8]
	if ( tcb == NULL ) {
 8009fde:	68bb      	ldr	r3, [r7, #8]
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	d103      	bne.n	8009fec <tk_cre_tsk+0xb4>
		ercd = E_LIMIT;
 8009fe4:	f06f 0321 	mvn.w	r3, #33	@ 0x21
 8009fe8:	617b      	str	r3, [r7, #20]
		goto error_exit;
 8009fea:	e028      	b.n	800a03e <tk_cre_tsk+0x106>
	}

	/* Initialize control block */
	tcb->exinf     = pk_ctsk->exinf;
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	681a      	ldr	r2, [r3, #0]
 8009ff0:	68bb      	ldr	r3, [r7, #8]
 8009ff2:	60da      	str	r2, [r3, #12]
	tcb->tskatr    = pk_ctsk->tskatr;
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	685a      	ldr	r2, [r3, #4]
 8009ff8:	68bb      	ldr	r3, [r7, #8]
 8009ffa:	611a      	str	r2, [r3, #16]
	tcb->task      = pk_ctsk->task;
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	689a      	ldr	r2, [r3, #8]
 800a000:	68bb      	ldr	r3, [r7, #8]
 800a002:	615a      	str	r2, [r3, #20]
	tcb->ipriority = (UB)int_priority(pk_ctsk->itskpri);
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	68db      	ldr	r3, [r3, #12]
 800a008:	b2db      	uxtb	r3, r3
 800a00a:	3b01      	subs	r3, #1
 800a00c:	b2da      	uxtb	r2, r3
 800a00e:	68bb      	ldr	r3, [r7, #8]
 800a010:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
	tcb->sstksz    = sstksz;
 800a014:	68bb      	ldr	r3, [r7, #8]
 800a016:	69fa      	ldr	r2, [r7, #28]
 800a018:	61da      	str	r2, [r3, #28]
		knl_strncpy((char*)tcb->name, (char*)pk_ctsk->dsname, OBJECT_NAME_LENGTH);
	}
#endif

	/* Set stack pointer */
	tcb->isstack = (VB*)stack + sstksz;
 800a01a:	69fb      	ldr	r3, [r7, #28]
 800a01c:	69ba      	ldr	r2, [r7, #24]
 800a01e:	441a      	add	r2, r3
 800a020:	68bb      	ldr	r3, [r7, #8]
 800a022:	661a      	str	r2, [r3, #96]	@ 0x60

	/* Set initial value of task operation mode */
	tcb->isysmode = 1;
 800a024:	68bb      	ldr	r3, [r7, #8]
 800a026:	2201      	movs	r2, #1
 800a028:	f883 2020 	strb.w	r2, [r3, #32]
	tcb->sysmode  = 1;
 800a02c:	68bb      	ldr	r3, [r7, #8]
 800a02e:	2201      	movs	r2, #1
 800a030:	845a      	strh	r2, [r3, #34]	@ 0x22

	/* make it to DORMANT state */
	knl_make_dormant(tcb);
 800a032:	68b8      	ldr	r0, [r7, #8]
 800a034:	f7ff feca 	bl	8009dcc <knl_make_dormant>

	ercd = tcb->tskid;
 800a038:	68bb      	ldr	r3, [r7, #8]
 800a03a:	689b      	ldr	r3, [r3, #8]
 800a03c:	617b      	str	r3, [r7, #20]

    error_exit:
	END_CRITICAL_SECTION;
 800a03e:	68fb      	ldr	r3, [r7, #12]
 800a040:	2b00      	cmp	r3, #0
 800a042:	d10b      	bne.n	800a05c <tk_cre_tsk+0x124>
 800a044:	4b10      	ldr	r3, [pc, #64]	@ (800a088 <tk_cre_tsk+0x150>)
 800a046:	681a      	ldr	r2, [r3, #0]
 800a048:	4b10      	ldr	r3, [pc, #64]	@ (800a08c <tk_cre_tsk+0x154>)
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	429a      	cmp	r2, r3
 800a04e:	d005      	beq.n	800a05c <tk_cre_tsk+0x124>
 800a050:	4b0f      	ldr	r3, [pc, #60]	@ (800a090 <tk_cre_tsk+0x158>)
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	2b00      	cmp	r3, #0
 800a056:	d101      	bne.n	800a05c <tk_cre_tsk+0x124>
 800a058:	f002 f8be 	bl	800c1d8 <knl_dispatch>
 800a05c:	68f8      	ldr	r0, [r7, #12]
 800a05e:	f002 fa04 	bl	800c46a <set_basepri>

#if USE_IMALLOC
	if ( (ercd < E_OK) && ((pk_ctsk->tskatr & TA_USERBUF) == 0) ) {
 800a062:	697b      	ldr	r3, [r7, #20]
 800a064:	2b00      	cmp	r3, #0
 800a066:	da08      	bge.n	800a07a <tk_cre_tsk+0x142>
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	685b      	ldr	r3, [r3, #4]
 800a06c:	f003 0320 	and.w	r3, r3, #32
 800a070:	2b00      	cmp	r3, #0
 800a072:	d102      	bne.n	800a07a <tk_cre_tsk+0x142>
		knl_Ifree(stack);
 800a074:	69b8      	ldr	r0, [r7, #24]
 800a076:	f7ff f943 	bl	8009300 <knl_Ifree>
	}
#endif

	return ercd;
 800a07a:	697b      	ldr	r3, [r7, #20]
}
 800a07c:	4618      	mov	r0, r3
 800a07e:	3720      	adds	r7, #32
 800a080:	46bd      	mov	sp, r7
 800a082:	bd80      	pop	{r7, pc}
 800a084:	240033f0 	.word	0x240033f0
 800a088:	240025d8 	.word	0x240025d8
 800a08c:	240025dc 	.word	0x240025dc
 800a090:	240025d4 	.word	0x240025d4

0800a094 <tk_sta_tsk>:

/*
 * Start task
 */
SYSCALL ER tk_sta_tsk( ID tskid, INT stacd )
{
 800a094:	b580      	push	{r7, lr}
 800a096:	b086      	sub	sp, #24
 800a098:	af00      	add	r7, sp, #0
 800a09a:	6078      	str	r0, [r7, #4]
 800a09c:	6039      	str	r1, [r7, #0]
	TCB	*tcb;
	TSTAT	state;
	ER	ercd = E_OK;
 800a09e:	2300      	movs	r3, #0
 800a0a0:	617b      	str	r3, [r7, #20]

	CHECK_TSKID(tskid);
 800a0a2:	f7ff ff23 	bl	8009eec <knl_isTaskIndependent>
 800a0a6:	4603      	mov	r3, r0
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	d109      	bne.n	800a0c0 <tk_sta_tsk+0x2c>
 800a0ac:	4b2f      	ldr	r3, [pc, #188]	@ (800a16c <tk_sta_tsk+0xd8>)
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	d005      	beq.n	800a0c0 <tk_sta_tsk+0x2c>
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	d102      	bne.n	800a0c0 <tk_sta_tsk+0x2c>
 800a0ba:	f06f 0328 	mvn.w	r3, #40	@ 0x28
 800a0be:	e050      	b.n	800a162 <tk_sta_tsk+0xce>
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	dd02      	ble.n	800a0cc <tk_sta_tsk+0x38>
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	2b20      	cmp	r3, #32
 800a0ca:	dd02      	ble.n	800a0d2 <tk_sta_tsk+0x3e>
 800a0cc:	f06f 0311 	mvn.w	r3, #17
 800a0d0:	e047      	b.n	800a162 <tk_sta_tsk+0xce>
	CHECK_NONSELF(tskid);
 800a0d2:	f7ff ff0b 	bl	8009eec <knl_isTaskIndependent>
 800a0d6:	4603      	mov	r3, r0
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d10c      	bne.n	800a0f6 <tk_sta_tsk+0x62>
 800a0dc:	4b23      	ldr	r3, [pc, #140]	@ (800a16c <tk_sta_tsk+0xd8>)
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	d008      	beq.n	800a0f6 <tk_sta_tsk+0x62>
 800a0e4:	4b21      	ldr	r3, [pc, #132]	@ (800a16c <tk_sta_tsk+0xd8>)
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	689b      	ldr	r3, [r3, #8]
 800a0ea:	687a      	ldr	r2, [r7, #4]
 800a0ec:	429a      	cmp	r2, r3
 800a0ee:	d102      	bne.n	800a0f6 <tk_sta_tsk+0x62>
 800a0f0:	f06f 0328 	mvn.w	r3, #40	@ 0x28
 800a0f4:	e035      	b.n	800a162 <tk_sta_tsk+0xce>

	tcb = get_tcb(tskid);
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	3b01      	subs	r3, #1
 800a0fa:	2268      	movs	r2, #104	@ 0x68
 800a0fc:	fb02 f303 	mul.w	r3, r2, r3
 800a100:	4a1b      	ldr	r2, [pc, #108]	@ (800a170 <tk_sta_tsk+0xdc>)
 800a102:	4413      	add	r3, r2
 800a104:	613b      	str	r3, [r7, #16]

	BEGIN_CRITICAL_SECTION;
 800a106:	f002 f9cc 	bl	800c4a2 <disint>
 800a10a:	60f8      	str	r0, [r7, #12]
	state = (TSTAT)tcb->state;
 800a10c:	693b      	ldr	r3, [r7, #16]
 800a10e:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
 800a112:	72fb      	strb	r3, [r7, #11]
	if ( state != TS_DORMANT ) {
 800a114:	7afb      	ldrb	r3, [r7, #11]
 800a116:	2b08      	cmp	r3, #8
 800a118:	d009      	beq.n	800a12e <tk_sta_tsk+0x9a>
		ercd = ( state == TS_NONEXIST )? E_NOEXS: E_OBJ;
 800a11a:	7afb      	ldrb	r3, [r7, #11]
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	d102      	bne.n	800a126 <tk_sta_tsk+0x92>
 800a120:	f06f 0329 	mvn.w	r3, #41	@ 0x29
 800a124:	e001      	b.n	800a12a <tk_sta_tsk+0x96>
 800a126:	f06f 0328 	mvn.w	r3, #40	@ 0x28
 800a12a:	617b      	str	r3, [r7, #20]
 800a12c:	e006      	b.n	800a13c <tk_sta_tsk+0xa8>
	} else {
		knl_setup_stacd(tcb, stacd);
 800a12e:	6839      	ldr	r1, [r7, #0]
 800a130:	6938      	ldr	r0, [r7, #16]
 800a132:	f7ff feeb 	bl	8009f0c <knl_setup_stacd>
		knl_make_ready(tcb);
 800a136:	6938      	ldr	r0, [r7, #16]
 800a138:	f7ff fe84 	bl	8009e44 <knl_make_ready>
	}
	END_CRITICAL_SECTION;
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	2b00      	cmp	r3, #0
 800a140:	d10b      	bne.n	800a15a <tk_sta_tsk+0xc6>
 800a142:	4b0a      	ldr	r3, [pc, #40]	@ (800a16c <tk_sta_tsk+0xd8>)
 800a144:	681a      	ldr	r2, [r3, #0]
 800a146:	4b0b      	ldr	r3, [pc, #44]	@ (800a174 <tk_sta_tsk+0xe0>)
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	429a      	cmp	r2, r3
 800a14c:	d005      	beq.n	800a15a <tk_sta_tsk+0xc6>
 800a14e:	4b0a      	ldr	r3, [pc, #40]	@ (800a178 <tk_sta_tsk+0xe4>)
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	2b00      	cmp	r3, #0
 800a154:	d101      	bne.n	800a15a <tk_sta_tsk+0xc6>
 800a156:	f002 f83f 	bl	800c1d8 <knl_dispatch>
 800a15a:	68f8      	ldr	r0, [r7, #12]
 800a15c:	f002 f985 	bl	800c46a <set_basepri>

	return ercd;
 800a160:	697b      	ldr	r3, [r7, #20]
}
 800a162:	4618      	mov	r0, r3
 800a164:	3718      	adds	r7, #24
 800a166:	46bd      	mov	sp, r7
 800a168:	bd80      	pop	{r7, pc}
 800a16a:	bf00      	nop
 800a16c:	240025d8 	.word	0x240025d8
 800a170:	240026f0 	.word	0x240026f0
 800a174:	240025dc 	.word	0x240025dc
 800a178:	240025d4 	.word	0x240025d4

0800a17c <tk_get_tid>:
#ifdef USE_FUNC_TK_GET_TID
/*
 * Refer task ID at execution
 */
SYSCALL ID tk_get_tid( void )
{
 800a17c:	b480      	push	{r7}
 800a17e:	af00      	add	r7, sp, #0
	return ( knl_ctxtsk == NULL )? 0: knl_ctxtsk->tskid;
 800a180:	4b06      	ldr	r3, [pc, #24]	@ (800a19c <tk_get_tid+0x20>)
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	2b00      	cmp	r3, #0
 800a186:	d003      	beq.n	800a190 <tk_get_tid+0x14>
 800a188:	4b04      	ldr	r3, [pc, #16]	@ (800a19c <tk_get_tid+0x20>)
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	689b      	ldr	r3, [r3, #8]
 800a18e:	e000      	b.n	800a192 <tk_get_tid+0x16>
 800a190:	2300      	movs	r3, #0
}
 800a192:	4618      	mov	r0, r3
 800a194:	46bd      	mov	sp, r7
 800a196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a19a:	4770      	bx	lr
 800a19c:	240025d8 	.word	0x240025d8

0800a1a0 <QueInit>:
{
 800a1a0:	b480      	push	{r7}
 800a1a2:	b083      	sub	sp, #12
 800a1a4:	af00      	add	r7, sp, #0
 800a1a6:	6078      	str	r0, [r7, #4]
	que->next = (struct queue *)que;
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	687a      	ldr	r2, [r7, #4]
 800a1ac:	601a      	str	r2, [r3, #0]
	que->prev = (struct queue *)que;
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	687a      	ldr	r2, [r7, #4]
 800a1b2:	605a      	str	r2, [r3, #4]
}
 800a1b4:	bf00      	nop
 800a1b6:	370c      	adds	r7, #12
 800a1b8:	46bd      	mov	sp, r7
 800a1ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1be:	4770      	bx	lr

0800a1c0 <knl_isTaskIndependent>:
{
 800a1c0:	b480      	push	{r7}
 800a1c2:	af00      	add	r7, sp, #0
	return ( knl_taskindp > 0 )? TRUE: FALSE;
 800a1c4:	4b05      	ldr	r3, [pc, #20]	@ (800a1dc <knl_isTaskIndependent+0x1c>)
 800a1c6:	681b      	ldr	r3, [r3, #0]
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	bfcc      	ite	gt
 800a1cc:	2301      	movgt	r3, #1
 800a1ce:	2300      	movle	r3, #0
 800a1d0:	b2db      	uxtb	r3, r3
}
 800a1d2:	4618      	mov	r0, r3
 800a1d4:	46bd      	mov	sp, r7
 800a1d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1da:	4770      	bx	lr
 800a1dc:	240011a4 	.word	0x240011a4

0800a1e0 <tk_slp_tsk>:
#ifdef USE_FUNC_TK_SLP_TSK
/*
 * Move its own task state to wait state
 */
SYSCALL ER tk_slp_tsk( TMO tmout )
{
 800a1e0:	b580      	push	{r7, lr}
 800a1e2:	b084      	sub	sp, #16
 800a1e4:	af00      	add	r7, sp, #0
 800a1e6:	6078      	str	r0, [r7, #4]
	ER	ercd = E_OK;
 800a1e8:	2300      	movs	r3, #0
 800a1ea:	60bb      	str	r3, [r7, #8]

	CHECK_TMOUT(tmout);
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a1f2:	da02      	bge.n	800a1fa <tk_slp_tsk+0x1a>
 800a1f4:	f06f 0310 	mvn.w	r3, #16
 800a1f8:	e051      	b.n	800a29e <tk_slp_tsk+0xbe>
	CHECK_DISPATCH();
 800a1fa:	4b2b      	ldr	r3, [pc, #172]	@ (800a2a8 <tk_slp_tsk+0xc8>)
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	d10d      	bne.n	800a21e <tk_slp_tsk+0x3e>
 800a202:	f7ff ffdd 	bl	800a1c0 <knl_isTaskIndependent>
 800a206:	4603      	mov	r3, r0
 800a208:	2b00      	cmp	r3, #0
 800a20a:	d108      	bne.n	800a21e <tk_slp_tsk+0x3e>
 800a20c:	4b27      	ldr	r3, [pc, #156]	@ (800a2ac <tk_slp_tsk+0xcc>)
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	2b00      	cmp	r3, #0
 800a212:	d004      	beq.n	800a21e <tk_slp_tsk+0x3e>
 800a214:	f002 f938 	bl	800c488 <get_basepri>
 800a218:	4603      	mov	r3, r0
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	d002      	beq.n	800a224 <tk_slp_tsk+0x44>
 800a21e:	f06f 0318 	mvn.w	r3, #24
 800a222:	e03c      	b.n	800a29e <tk_slp_tsk+0xbe>

	BEGIN_CRITICAL_SECTION;
 800a224:	f002 f93d 	bl	800c4a2 <disint>
 800a228:	60f8      	str	r0, [r7, #12]

	if ( knl_ctxtsk->wupcnt > 0 ) {
 800a22a:	4b20      	ldr	r3, [pc, #128]	@ (800a2ac <tk_slp_tsk+0xcc>)
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a230:	2b00      	cmp	r3, #0
 800a232:	dd05      	ble.n	800a240 <tk_slp_tsk+0x60>
		knl_ctxtsk->wupcnt--;
 800a234:	4b1d      	ldr	r3, [pc, #116]	@ (800a2ac <tk_slp_tsk+0xcc>)
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a23a:	3a01      	subs	r2, #1
 800a23c:	635a      	str	r2, [r3, #52]	@ 0x34
 800a23e:	e01b      	b.n	800a278 <tk_slp_tsk+0x98>
	} else {
		ercd = E_TMOUT;
 800a240:	f06f 0331 	mvn.w	r3, #49	@ 0x31
 800a244:	60bb      	str	r3, [r7, #8]
		if ( tmout != TMO_POL ) {
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	2b00      	cmp	r3, #0
 800a24a:	d015      	beq.n	800a278 <tk_slp_tsk+0x98>
			knl_ctxtsk->wspec = &knl_wspec_slp;
 800a24c:	4b17      	ldr	r3, [pc, #92]	@ (800a2ac <tk_slp_tsk+0xcc>)
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	4a17      	ldr	r2, [pc, #92]	@ (800a2b0 <tk_slp_tsk+0xd0>)
 800a252:	62da      	str	r2, [r3, #44]	@ 0x2c
			knl_ctxtsk->wid = 0;
 800a254:	4b15      	ldr	r3, [pc, #84]	@ (800a2ac <tk_slp_tsk+0xcc>)
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	2200      	movs	r2, #0
 800a25a:	631a      	str	r2, [r3, #48]	@ 0x30
			knl_ctxtsk->wercd = &ercd;
 800a25c:	4b13      	ldr	r3, [pc, #76]	@ (800a2ac <tk_slp_tsk+0xcc>)
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	f107 0208 	add.w	r2, r7, #8
 800a264:	63da      	str	r2, [r3, #60]	@ 0x3c
			knl_make_wait(tmout, TA_NULL);
 800a266:	2100      	movs	r1, #0
 800a268:	6878      	ldr	r0, [r7, #4]
 800a26a:	f000 fbe7 	bl	800aa3c <knl_make_wait>
			QueInit(&knl_ctxtsk->tskque);
 800a26e:	4b0f      	ldr	r3, [pc, #60]	@ (800a2ac <tk_slp_tsk+0xcc>)
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	4618      	mov	r0, r3
 800a274:	f7ff ff94 	bl	800a1a0 <QueInit>
		}
	}

	END_CRITICAL_SECTION;
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d10b      	bne.n	800a296 <tk_slp_tsk+0xb6>
 800a27e:	4b0b      	ldr	r3, [pc, #44]	@ (800a2ac <tk_slp_tsk+0xcc>)
 800a280:	681a      	ldr	r2, [r3, #0]
 800a282:	4b0c      	ldr	r3, [pc, #48]	@ (800a2b4 <tk_slp_tsk+0xd4>)
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	429a      	cmp	r2, r3
 800a288:	d005      	beq.n	800a296 <tk_slp_tsk+0xb6>
 800a28a:	4b07      	ldr	r3, [pc, #28]	@ (800a2a8 <tk_slp_tsk+0xc8>)
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	2b00      	cmp	r3, #0
 800a290:	d101      	bne.n	800a296 <tk_slp_tsk+0xb6>
 800a292:	f001 ffa1 	bl	800c1d8 <knl_dispatch>
 800a296:	68f8      	ldr	r0, [r7, #12]
 800a298:	f002 f8e7 	bl	800c46a <set_basepri>

	return ercd;
 800a29c:	68bb      	ldr	r3, [r7, #8]
}
 800a29e:	4618      	mov	r0, r3
 800a2a0:	3710      	adds	r7, #16
 800a2a2:	46bd      	mov	sp, r7
 800a2a4:	bd80      	pop	{r7, pc}
 800a2a6:	bf00      	nop
 800a2a8:	240025d4 	.word	0x240025d4
 800a2ac:	240025d8 	.word	0x240025d8
 800a2b0:	0800d208 	.word	0x0800d208
 800a2b4:	240025dc 	.word	0x240025dc

0800a2b8 <tk_dly_tsk>:

/*
 * Task delay
 */
SYSCALL ER tk_dly_tsk( RELTIM dlytim )
{
 800a2b8:	b580      	push	{r7, lr}
 800a2ba:	b084      	sub	sp, #16
 800a2bc:	af00      	add	r7, sp, #0
 800a2be:	6078      	str	r0, [r7, #4]
	ER	ercd = E_OK;
 800a2c0:	2300      	movs	r3, #0
 800a2c2:	60bb      	str	r3, [r7, #8]

	CHECK_RELTIM(dlytim);
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	da02      	bge.n	800a2d0 <tk_dly_tsk+0x18>
 800a2ca:	f06f 0310 	mvn.w	r3, #16
 800a2ce:	e043      	b.n	800a358 <tk_dly_tsk+0xa0>

	CHECK_DISPATCH();
 800a2d0:	4b23      	ldr	r3, [pc, #140]	@ (800a360 <tk_dly_tsk+0xa8>)
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	d10d      	bne.n	800a2f4 <tk_dly_tsk+0x3c>
 800a2d8:	f7ff ff72 	bl	800a1c0 <knl_isTaskIndependent>
 800a2dc:	4603      	mov	r3, r0
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	d108      	bne.n	800a2f4 <tk_dly_tsk+0x3c>
 800a2e2:	4b20      	ldr	r3, [pc, #128]	@ (800a364 <tk_dly_tsk+0xac>)
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d004      	beq.n	800a2f4 <tk_dly_tsk+0x3c>
 800a2ea:	f002 f8cd 	bl	800c488 <get_basepri>
 800a2ee:	4603      	mov	r3, r0
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	d002      	beq.n	800a2fa <tk_dly_tsk+0x42>
 800a2f4:	f06f 0318 	mvn.w	r3, #24
 800a2f8:	e02e      	b.n	800a358 <tk_dly_tsk+0xa0>

	if ( dlytim > 0 ) {
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	d02a      	beq.n	800a356 <tk_dly_tsk+0x9e>
		BEGIN_CRITICAL_SECTION;
 800a300:	f002 f8cf 	bl	800c4a2 <disint>
 800a304:	60f8      	str	r0, [r7, #12]
		knl_ctxtsk->wspec = &knl_wspec_dly;
 800a306:	4b17      	ldr	r3, [pc, #92]	@ (800a364 <tk_dly_tsk+0xac>)
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	4a17      	ldr	r2, [pc, #92]	@ (800a368 <tk_dly_tsk+0xb0>)
 800a30c:	62da      	str	r2, [r3, #44]	@ 0x2c
		knl_ctxtsk->wid = 0;
 800a30e:	4b15      	ldr	r3, [pc, #84]	@ (800a364 <tk_dly_tsk+0xac>)
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	2200      	movs	r2, #0
 800a314:	631a      	str	r2, [r3, #48]	@ 0x30
		knl_ctxtsk->wercd = &ercd;
 800a316:	4b13      	ldr	r3, [pc, #76]	@ (800a364 <tk_dly_tsk+0xac>)
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	f107 0208 	add.w	r2, r7, #8
 800a31e:	63da      	str	r2, [r3, #60]	@ 0x3c
		knl_make_wait_reltim(dlytim, TA_NULL);
 800a320:	2100      	movs	r1, #0
 800a322:	6878      	ldr	r0, [r7, #4]
 800a324:	f000 fbbc 	bl	800aaa0 <knl_make_wait_reltim>
		QueInit(&knl_ctxtsk->tskque);
 800a328:	4b0e      	ldr	r3, [pc, #56]	@ (800a364 <tk_dly_tsk+0xac>)
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	4618      	mov	r0, r3
 800a32e:	f7ff ff37 	bl	800a1a0 <QueInit>
		END_CRITICAL_SECTION;
 800a332:	68fb      	ldr	r3, [r7, #12]
 800a334:	2b00      	cmp	r3, #0
 800a336:	d10b      	bne.n	800a350 <tk_dly_tsk+0x98>
 800a338:	4b0a      	ldr	r3, [pc, #40]	@ (800a364 <tk_dly_tsk+0xac>)
 800a33a:	681a      	ldr	r2, [r3, #0]
 800a33c:	4b0b      	ldr	r3, [pc, #44]	@ (800a36c <tk_dly_tsk+0xb4>)
 800a33e:	681b      	ldr	r3, [r3, #0]
 800a340:	429a      	cmp	r2, r3
 800a342:	d005      	beq.n	800a350 <tk_dly_tsk+0x98>
 800a344:	4b06      	ldr	r3, [pc, #24]	@ (800a360 <tk_dly_tsk+0xa8>)
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	2b00      	cmp	r3, #0
 800a34a:	d101      	bne.n	800a350 <tk_dly_tsk+0x98>
 800a34c:	f001 ff44 	bl	800c1d8 <knl_dispatch>
 800a350:	68f8      	ldr	r0, [r7, #12]
 800a352:	f002 f88a 	bl	800c46a <set_basepri>
	}

	return ercd;
 800a356:	68bb      	ldr	r3, [r7, #8]
}
 800a358:	4618      	mov	r0, r3
 800a35a:	3710      	adds	r7, #16
 800a35c:	46bd      	mov	sp, r7
 800a35e:	bd80      	pop	{r7, pc}
 800a360:	240025d4 	.word	0x240025d4
 800a364:	240025d8 	.word	0x240025d8
 800a368:	0800d214 	.word	0x0800d214
 800a36c:	240025dc 	.word	0x240025dc

0800a370 <QueInit>:
{
 800a370:	b480      	push	{r7}
 800a372:	b083      	sub	sp, #12
 800a374:	af00      	add	r7, sp, #0
 800a376:	6078      	str	r0, [r7, #4]
	que->next = (struct queue *)que;
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	687a      	ldr	r2, [r7, #4]
 800a37c:	601a      	str	r2, [r3, #0]
	que->prev = (struct queue *)que;
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	687a      	ldr	r2, [r7, #4]
 800a382:	605a      	str	r2, [r3, #4]
}
 800a384:	bf00      	nop
 800a386:	370c      	adds	r7, #12
 800a388:	46bd      	mov	sp, r7
 800a38a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a38e:	4770      	bx	lr

0800a390 <QueInsert>:
{
 800a390:	b480      	push	{r7}
 800a392:	b083      	sub	sp, #12
 800a394:	af00      	add	r7, sp, #0
 800a396:	6078      	str	r0, [r7, #4]
 800a398:	6039      	str	r1, [r7, #0]
	entry->prev = (struct queue*) que->prev;
 800a39a:	683b      	ldr	r3, [r7, #0]
 800a39c:	685a      	ldr	r2, [r3, #4]
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	605a      	str	r2, [r3, #4]
	entry->next = que;
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	683a      	ldr	r2, [r7, #0]
 800a3a6:	601a      	str	r2, [r3, #0]
	que->prev->next = entry;
 800a3a8:	683b      	ldr	r3, [r7, #0]
 800a3aa:	685b      	ldr	r3, [r3, #4]
 800a3ac:	687a      	ldr	r2, [r7, #4]
 800a3ae:	601a      	str	r2, [r3, #0]
	que->prev = entry;
 800a3b0:	683b      	ldr	r3, [r7, #0]
 800a3b2:	687a      	ldr	r2, [r7, #4]
 800a3b4:	605a      	str	r2, [r3, #4]
}
 800a3b6:	bf00      	nop
 800a3b8:	370c      	adds	r7, #12
 800a3ba:	46bd      	mov	sp, r7
 800a3bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3c0:	4770      	bx	lr
	...

0800a3c4 <knl_cyclichandler_initialize>:

/*
 * Initialization of cyclic handler control block
 */
EXPORT ER knl_cyclichandler_initialize( void )
{
 800a3c4:	b580      	push	{r7, lr}
 800a3c6:	b082      	sub	sp, #8
 800a3c8:	af00      	add	r7, sp, #0
	if ( NUM_CYCID < 1 ) {
		return E_SYS;
	}

	/* Register all control blocks onto FreeQue */
	QueInit(&knl_free_cyccb);
 800a3ca:	480d      	ldr	r0, [pc, #52]	@ (800a400 <knl_cyclichandler_initialize+0x3c>)
 800a3cc:	f7ff ffd0 	bl	800a370 <QueInit>
	end = knl_cyccb_table + NUM_CYCID;
 800a3d0:	4b0c      	ldr	r3, [pc, #48]	@ (800a404 <knl_cyclichandler_initialize+0x40>)
 800a3d2:	603b      	str	r3, [r7, #0]
	for ( cyccb = knl_cyccb_table; cyccb < end; cyccb++ ) {
 800a3d4:	4b0c      	ldr	r3, [pc, #48]	@ (800a408 <knl_cyclichandler_initialize+0x44>)
 800a3d6:	607b      	str	r3, [r7, #4]
 800a3d8:	e009      	b.n	800a3ee <knl_cyclichandler_initialize+0x2a>
		cyccb->cychdr = NULL; /* Unregistered handler */
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	2200      	movs	r2, #0
 800a3de:	609a      	str	r2, [r3, #8]
		QueInsert((QUEUE*)cyccb, &knl_free_cyccb);
 800a3e0:	4907      	ldr	r1, [pc, #28]	@ (800a400 <knl_cyclichandler_initialize+0x3c>)
 800a3e2:	6878      	ldr	r0, [r7, #4]
 800a3e4:	f7ff ffd4 	bl	800a390 <QueInsert>
	for ( cyccb = knl_cyccb_table; cyccb < end; cyccb++ ) {
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	3328      	adds	r3, #40	@ 0x28
 800a3ec:	607b      	str	r3, [r7, #4]
 800a3ee:	687a      	ldr	r2, [r7, #4]
 800a3f0:	683b      	ldr	r3, [r7, #0]
 800a3f2:	429a      	cmp	r2, r3
 800a3f4:	d3f1      	bcc.n	800a3da <knl_cyclichandler_initialize+0x16>
	}

	return E_OK;
 800a3f6:	2300      	movs	r3, #0
}
 800a3f8:	4618      	mov	r0, r3
 800a3fa:	3708      	adds	r7, #8
 800a3fc:	46bd      	mov	sp, r7
 800a3fe:	bd80      	pop	{r7, pc}
 800a400:	24003498 	.word	0x24003498
 800a404:	24003498 	.word	0x24003498
 800a408:	240033f8 	.word	0x240033f8

0800a40c <knl_alarmhandler_initialize>:

/*
 * Initialization of alarm handler control block 
 */
EXPORT ER knl_alarmhandler_initialize( void )
{
 800a40c:	b580      	push	{r7, lr}
 800a40e:	b082      	sub	sp, #8
 800a410:	af00      	add	r7, sp, #0
	if ( NUM_ALMID < 1 ) {
		return E_SYS;
	}

	/* Register all control blocks onto FreeQue */
	QueInit(&knl_free_almcb);
 800a412:	480d      	ldr	r0, [pc, #52]	@ (800a448 <knl_alarmhandler_initialize+0x3c>)
 800a414:	f7ff ffac 	bl	800a370 <QueInit>
	end = knl_almcb_table + NUM_ALMID;
 800a418:	4b0c      	ldr	r3, [pc, #48]	@ (800a44c <knl_alarmhandler_initialize+0x40>)
 800a41a:	603b      	str	r3, [r7, #0]
	for ( almcb = knl_almcb_table; almcb < end; almcb++ ) {
 800a41c:	4b0c      	ldr	r3, [pc, #48]	@ (800a450 <knl_alarmhandler_initialize+0x44>)
 800a41e:	607b      	str	r3, [r7, #4]
 800a420:	e009      	b.n	800a436 <knl_alarmhandler_initialize+0x2a>
		almcb->almhdr = NULL; /* Unregistered handler */
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	2200      	movs	r2, #0
 800a426:	609a      	str	r2, [r3, #8]
		QueInsert((QUEUE*)almcb, &knl_free_almcb);
 800a428:	4907      	ldr	r1, [pc, #28]	@ (800a448 <knl_alarmhandler_initialize+0x3c>)
 800a42a:	6878      	ldr	r0, [r7, #4]
 800a42c:	f7ff ffb0 	bl	800a390 <QueInsert>
	for ( almcb = knl_almcb_table; almcb < end; almcb++ ) {
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	3324      	adds	r3, #36	@ 0x24
 800a434:	607b      	str	r3, [r7, #4]
 800a436:	687a      	ldr	r2, [r7, #4]
 800a438:	683b      	ldr	r3, [r7, #0]
 800a43a:	429a      	cmp	r2, r3
 800a43c:	d3f1      	bcc.n	800a422 <knl_alarmhandler_initialize+0x16>
	}

	return E_OK;
 800a43e:	2300      	movs	r3, #0
}
 800a440:	4618      	mov	r0, r3
 800a442:	3708      	adds	r7, #8
 800a444:	46bd      	mov	sp, r7
 800a446:	bd80      	pop	{r7, pc}
 800a448:	240035c0 	.word	0x240035c0
 800a44c:	240035c0 	.word	0x240035c0
 800a450:	240034a0 	.word	0x240034a0

0800a454 <out_w>:
Inline void out_d( UW port, UD data )
{
	*(_UD*)port = data;
}
Inline void out_w( UW port, UW data )
{
 800a454:	b480      	push	{r7}
 800a456:	b083      	sub	sp, #12
 800a458:	af00      	add	r7, sp, #0
 800a45a:	6078      	str	r0, [r7, #4]
 800a45c:	6039      	str	r1, [r7, #0]
	*(_UW*)port = data;
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	683a      	ldr	r2, [r7, #0]
 800a462:	601a      	str	r2, [r3, #0]
}
 800a464:	bf00      	nop
 800a466:	370c      	adds	r7, #12
 800a468:	46bd      	mov	sp, r7
 800a46a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a46e:	4770      	bx	lr

0800a470 <in_w>:
Inline UD in_d( UW port )
{
	return *(_UD*)port;
}
Inline UW in_w( UW port )
{
 800a470:	b480      	push	{r7}
 800a472:	b083      	sub	sp, #12
 800a474:	af00      	add	r7, sp, #0
 800a476:	6078      	str	r0, [r7, #4]
	return *(_UW*)port;
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	681b      	ldr	r3, [r3, #0]
}
 800a47c:	4618      	mov	r0, r3
 800a47e:	370c      	adds	r7, #12
 800a480:	46bd      	mov	sp, r7
 800a482:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a486:	4770      	bx	lr

0800a488 <QueInit>:
{
 800a488:	b480      	push	{r7}
 800a48a:	b083      	sub	sp, #12
 800a48c:	af00      	add	r7, sp, #0
 800a48e:	6078      	str	r0, [r7, #4]
	que->next = (struct queue *)que;
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	687a      	ldr	r2, [r7, #4]
 800a494:	601a      	str	r2, [r3, #0]
	que->prev = (struct queue *)que;
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	687a      	ldr	r2, [r7, #4]
 800a49a:	605a      	str	r2, [r3, #4]
}
 800a49c:	bf00      	nop
 800a49e:	370c      	adds	r7, #12
 800a4a0:	46bd      	mov	sp, r7
 800a4a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4a6:	4770      	bx	lr

0800a4a8 <isQueEmpty>:
{
 800a4a8:	b480      	push	{r7}
 800a4aa:	b083      	sub	sp, #12
 800a4ac:	af00      	add	r7, sp, #0
 800a4ae:	6078      	str	r0, [r7, #4]
	return ( que->next == que )? TRUE: FALSE;
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	687a      	ldr	r2, [r7, #4]
 800a4b6:	429a      	cmp	r2, r3
 800a4b8:	bf0c      	ite	eq
 800a4ba:	2301      	moveq	r3, #1
 800a4bc:	2300      	movne	r3, #0
 800a4be:	b2db      	uxtb	r3, r3
}
 800a4c0:	4618      	mov	r0, r3
 800a4c2:	370c      	adds	r7, #12
 800a4c4:	46bd      	mov	sp, r7
 800a4c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ca:	4770      	bx	lr

0800a4cc <QueInsert>:
{
 800a4cc:	b480      	push	{r7}
 800a4ce:	b083      	sub	sp, #12
 800a4d0:	af00      	add	r7, sp, #0
 800a4d2:	6078      	str	r0, [r7, #4]
 800a4d4:	6039      	str	r1, [r7, #0]
	entry->prev = (struct queue*) que->prev;
 800a4d6:	683b      	ldr	r3, [r7, #0]
 800a4d8:	685a      	ldr	r2, [r3, #4]
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	605a      	str	r2, [r3, #4]
	entry->next = que;
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	683a      	ldr	r2, [r7, #0]
 800a4e2:	601a      	str	r2, [r3, #0]
	que->prev->next = entry;
 800a4e4:	683b      	ldr	r3, [r7, #0]
 800a4e6:	685b      	ldr	r3, [r3, #4]
 800a4e8:	687a      	ldr	r2, [r7, #4]
 800a4ea:	601a      	str	r2, [r3, #0]
	que->prev = entry;
 800a4ec:	683b      	ldr	r3, [r7, #0]
 800a4ee:	687a      	ldr	r2, [r7, #4]
 800a4f0:	605a      	str	r2, [r3, #4]
}
 800a4f2:	bf00      	nop
 800a4f4:	370c      	adds	r7, #12
 800a4f6:	46bd      	mov	sp, r7
 800a4f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4fc:	4770      	bx	lr

0800a4fe <QueRemove>:
{
 800a4fe:	b480      	push	{r7}
 800a500:	b083      	sub	sp, #12
 800a502:	af00      	add	r7, sp, #0
 800a504:	6078      	str	r0, [r7, #4]
	if ( entry->next != entry ) {
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	687a      	ldr	r2, [r7, #4]
 800a50c:	429a      	cmp	r2, r3
 800a50e:	d009      	beq.n	800a524 <QueRemove+0x26>
		entry->prev->next = (struct queue*) entry->next;
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	685b      	ldr	r3, [r3, #4]
 800a514:	687a      	ldr	r2, [r7, #4]
 800a516:	6812      	ldr	r2, [r2, #0]
 800a518:	601a      	str	r2, [r3, #0]
		entry->next->prev = (struct queue*) entry->prev;
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	687a      	ldr	r2, [r7, #4]
 800a520:	6852      	ldr	r2, [r2, #4]
 800a522:	605a      	str	r2, [r3, #4]
}
 800a524:	bf00      	nop
 800a526:	370c      	adds	r7, #12
 800a528:	46bd      	mov	sp, r7
 800a52a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a52e:	4770      	bx	lr

0800a530 <knl_abstim_reached>:
typedef	UW	ABSTIM;

#define ABSTIM_DIFF_MIN  (0x7FFFFFFF)

Inline BOOL knl_abstim_reached( ABSTIM curtim, ABSTIM evttim )
{
 800a530:	b480      	push	{r7}
 800a532:	b083      	sub	sp, #12
 800a534:	af00      	add	r7, sp, #0
 800a536:	6078      	str	r0, [r7, #4]
 800a538:	6039      	str	r1, [r7, #0]
	return (ABSTIM)(curtim - evttim) <= (ABSTIM)ABSTIM_DIFF_MIN;
 800a53a:	687a      	ldr	r2, [r7, #4]
 800a53c:	683b      	ldr	r3, [r7, #0]
 800a53e:	1ad3      	subs	r3, r2, r3
 800a540:	43db      	mvns	r3, r3
 800a542:	0fdb      	lsrs	r3, r3, #31
 800a544:	b2db      	uxtb	r3, r3
}
 800a546:	4618      	mov	r0, r3
 800a548:	370c      	adds	r7, #12
 800a54a:	46bd      	mov	sp, r7
 800a54c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a550:	4770      	bx	lr
	...

0800a554 <knl_start_hw_timer>:
/*
 * Timer start processing
 *	Initialize the timer and start the periodical timer interrupt.
 */
Inline void knl_start_hw_timer( void )
{
 800a554:	b580      	push	{r7, lr}
 800a556:	b082      	sub	sp, #8
 800a558:	af00      	add	r7, sp, #0
	UINT	n, imask;

	DI(imask);
 800a55a:	f001 ffa2 	bl	800c4a2 <disint>
 800a55e:	6078      	str	r0, [r7, #4]

	/* Set System timer CLK source to Core, Systick exception enable */
	out_w(SYST_CSR, 0x00000006);
 800a560:	2106      	movs	r1, #6
 800a562:	4811      	ldr	r0, [pc, #68]	@ (800a5a8 <knl_start_hw_timer+0x54>)
 800a564:	f7ff ff76 	bl	800a454 <out_w>

	/* Set counter: TMCLK(MHz) */
	n = (UINT)(TIMER_PERIOD * TMCLK_KHz - 1);
 800a568:	4b10      	ldr	r3, [pc, #64]	@ (800a5ac <knl_start_hw_timer+0x58>)
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	4a10      	ldr	r2, [pc, #64]	@ (800a5b0 <knl_start_hw_timer+0x5c>)
 800a56e:	fba2 2303 	umull	r2, r3, r2, r3
 800a572:	099a      	lsrs	r2, r3, #6
 800a574:	4613      	mov	r3, r2
 800a576:	009b      	lsls	r3, r3, #2
 800a578:	4413      	add	r3, r2
 800a57a:	005b      	lsls	r3, r3, #1
 800a57c:	3b01      	subs	r3, #1
 800a57e:	603b      	str	r3, [r7, #0]
	out_w(SYST_RVR, n);
 800a580:	6839      	ldr	r1, [r7, #0]
 800a582:	480c      	ldr	r0, [pc, #48]	@ (800a5b4 <knl_start_hw_timer+0x60>)
 800a584:	f7ff ff66 	bl	800a454 <out_w>
	out_w(SYST_CVR, 0);
 800a588:	2100      	movs	r1, #0
 800a58a:	480b      	ldr	r0, [pc, #44]	@ (800a5b8 <knl_start_hw_timer+0x64>)
 800a58c:	f7ff ff62 	bl	800a454 <out_w>

	/* Start timer count */
	out_w(SYST_CSR, 0x00000007);
 800a590:	2107      	movs	r1, #7
 800a592:	4805      	ldr	r0, [pc, #20]	@ (800a5a8 <knl_start_hw_timer+0x54>)
 800a594:	f7ff ff5e 	bl	800a454 <out_w>

	EI(imask);
 800a598:	6878      	ldr	r0, [r7, #4]
 800a59a:	f001 ff66 	bl	800c46a <set_basepri>
}
 800a59e:	bf00      	nop
 800a5a0:	3708      	adds	r7, #8
 800a5a2:	46bd      	mov	sp, r7
 800a5a4:	bd80      	pop	{r7, pc}
 800a5a6:	bf00      	nop
 800a5a8:	e000e010 	.word	0xe000e010
 800a5ac:	240011a8 	.word	0x240011a8
 800a5b0:	10624dd3 	.word	0x10624dd3
 800a5b4:	e000e014 	.word	0xe000e014
 800a5b8:	e000e018 	.word	0xe000e018

0800a5bc <knl_clear_hw_timer_interrupt>:
 *	'end_of_hw_timer_interrupt()' is called at the end of the timer
 *	interrupt handler.
 *	Use either or both according to hardware.
 */
Inline void knl_clear_hw_timer_interrupt( void )
{
 800a5bc:	b580      	push	{r7, lr}
 800a5be:	af00      	add	r7, sp, #0
	(void)in_w(SYST_CSR);			/* Clear COUNTFLAG */
 800a5c0:	4804      	ldr	r0, [pc, #16]	@ (800a5d4 <knl_clear_hw_timer_interrupt+0x18>)
 800a5c2:	f7ff ff55 	bl	800a470 <in_w>
	out_w(SCB_ICSR, ICSR_PENDSTCLR);
 800a5c6:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 800a5ca:	4803      	ldr	r0, [pc, #12]	@ (800a5d8 <knl_clear_hw_timer_interrupt+0x1c>)
 800a5cc:	f7ff ff42 	bl	800a454 <out_w>
}
 800a5d0:	bf00      	nop
 800a5d2:	bd80      	pop	{r7, pc}
 800a5d4:	e000e010 	.word	0xe000e010
 800a5d8:	e000ed04 	.word	0xe000ed04

0800a5dc <knl_end_of_hw_timer_interrupt>:

Inline void knl_end_of_hw_timer_interrupt( void )
{
 800a5dc:	b480      	push	{r7}
 800a5de:	af00      	add	r7, sp, #0
	/* No processing */
}
 800a5e0:	bf00      	nop
 800a5e2:	46bd      	mov	sp, r7
 800a5e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5e8:	4770      	bx	lr
	...

0800a5ec <knl_terminate_hw_timer>:
 * Timer stop processing
 *	Stop the timer operation.
 *	Called when system stops.
 */
Inline void knl_terminate_hw_timer( void )
{
 800a5ec:	b580      	push	{r7, lr}
 800a5ee:	af00      	add	r7, sp, #0
	/* Timer interrupt disable */
	out_w(SYST_CSR, 0x00000000);
 800a5f0:	2100      	movs	r1, #0
 800a5f2:	4802      	ldr	r0, [pc, #8]	@ (800a5fc <knl_terminate_hw_timer+0x10>)
 800a5f4:	f7ff ff2e 	bl	800a454 <out_w>
}
 800a5f8:	bf00      	nop
 800a5fa:	bd80      	pop	{r7, pc}
 800a5fc:	e000e010 	.word	0xe000e010

0800a600 <knl_timer_startup>:

/*
 * Start system timer
 */
EXPORT ER knl_timer_startup( void )
{
 800a600:	b580      	push	{r7, lr}
 800a602:	af00      	add	r7, sp, #0
	knl_current_time = knl_real_time_ofs = uitoll(0);
 800a604:	490a      	ldr	r1, [pc, #40]	@ (800a630 <knl_timer_startup+0x30>)
 800a606:	f04f 0200 	mov.w	r2, #0
 800a60a:	f04f 0300 	mov.w	r3, #0
 800a60e:	e9c1 2300 	strd	r2, r3, [r1]
 800a612:	4b07      	ldr	r3, [pc, #28]	@ (800a630 <knl_timer_startup+0x30>)
 800a614:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a618:	4906      	ldr	r1, [pc, #24]	@ (800a634 <knl_timer_startup+0x34>)
 800a61a:	e9c1 2300 	strd	r2, r3, [r1]
	QueInit(&knl_timer_queue);
 800a61e:	4806      	ldr	r0, [pc, #24]	@ (800a638 <knl_timer_startup+0x38>)
 800a620:	f7ff ff32 	bl	800a488 <QueInit>

	/* Start timer interrupt */
	knl_start_hw_timer();
 800a624:	f7ff ff96 	bl	800a554 <knl_start_hw_timer>

	return E_OK;
 800a628:	2300      	movs	r3, #0
}
 800a62a:	4618      	mov	r0, r3
 800a62c:	bd80      	pop	{r7, pc}
 800a62e:	bf00      	nop
 800a630:	240035d0 	.word	0x240035d0
 800a634:	240035c8 	.word	0x240035c8
 800a638:	240035d8 	.word	0x240035d8

0800a63c <knl_timer_shutdown>:
#if USE_SHUTDOWN
/*
 * Stop system timer
 */
EXPORT void knl_timer_shutdown( void )
{
 800a63c:	b580      	push	{r7, lr}
 800a63e:	af00      	add	r7, sp, #0
	knl_terminate_hw_timer();
 800a640:	f7ff ffd4 	bl	800a5ec <knl_terminate_hw_timer>
}
 800a644:	bf00      	nop
 800a646:	bd80      	pop	{r7, pc}

0800a648 <knl_enqueue_tmeb>:

/*
 * Insert timer event to timer event queue
 */
LOCAL void knl_enqueue_tmeb( TMEB *event )
{
 800a648:	b580      	push	{r7, lr}
 800a64a:	b084      	sub	sp, #16
 800a64c:	af00      	add	r7, sp, #0
 800a64e:	6078      	str	r0, [r7, #4]
	QUEUE	*q;
	ABSTIM	ofs = lltoul(knl_current_time) - ABSTIM_DIFF_MIN;
 800a650:	4b12      	ldr	r3, [pc, #72]	@ (800a69c <knl_enqueue_tmeb+0x54>)
 800a652:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a656:	4b12      	ldr	r3, [pc, #72]	@ (800a6a0 <knl_enqueue_tmeb+0x58>)
 800a658:	4413      	add	r3, r2
 800a65a:	60bb      	str	r3, [r7, #8]

	for ( q = knl_timer_queue.next; q != &knl_timer_queue; q = q->next ) {
 800a65c:	4b11      	ldr	r3, [pc, #68]	@ (800a6a4 <knl_enqueue_tmeb+0x5c>)
 800a65e:	681b      	ldr	r3, [r3, #0]
 800a660:	60fb      	str	r3, [r7, #12]
 800a662:	e00c      	b.n	800a67e <knl_enqueue_tmeb+0x36>
		if ( (ABSTIM)(event->time - ofs) < (ABSTIM)((((TMEB*)q)->time) - ofs) ) {
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	689a      	ldr	r2, [r3, #8]
 800a668:	68bb      	ldr	r3, [r7, #8]
 800a66a:	1ad2      	subs	r2, r2, r3
 800a66c:	68fb      	ldr	r3, [r7, #12]
 800a66e:	6899      	ldr	r1, [r3, #8]
 800a670:	68bb      	ldr	r3, [r7, #8]
 800a672:	1acb      	subs	r3, r1, r3
 800a674:	429a      	cmp	r2, r3
 800a676:	d307      	bcc.n	800a688 <knl_enqueue_tmeb+0x40>
	for ( q = knl_timer_queue.next; q != &knl_timer_queue; q = q->next ) {
 800a678:	68fb      	ldr	r3, [r7, #12]
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	60fb      	str	r3, [r7, #12]
 800a67e:	68fb      	ldr	r3, [r7, #12]
 800a680:	4a08      	ldr	r2, [pc, #32]	@ (800a6a4 <knl_enqueue_tmeb+0x5c>)
 800a682:	4293      	cmp	r3, r2
 800a684:	d1ee      	bne.n	800a664 <knl_enqueue_tmeb+0x1c>
 800a686:	e000      	b.n	800a68a <knl_enqueue_tmeb+0x42>
			break;
 800a688:	bf00      	nop
		}
	}
	QueInsert(&event->queue, q);
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	68f9      	ldr	r1, [r7, #12]
 800a68e:	4618      	mov	r0, r3
 800a690:	f7ff ff1c 	bl	800a4cc <QueInsert>
}
 800a694:	bf00      	nop
 800a696:	3710      	adds	r7, #16
 800a698:	46bd      	mov	sp, r7
 800a69a:	bd80      	pop	{r7, pc}
 800a69c:	240035c8 	.word	0x240035c8
 800a6a0:	80000001 	.word	0x80000001
 800a6a4:	240035d8 	.word	0x240035d8

0800a6a8 <knl_timer_insert>:
 *	typedef	W		TMO;
 *	typedef UW		RELTIM;
 *	#define TMO_FEVR	(-1)
 */
EXPORT void knl_timer_insert( TMEB *event, TMO tmout, CBACK callback, void *arg )
{
 800a6a8:	b580      	push	{r7, lr}
 800a6aa:	b084      	sub	sp, #16
 800a6ac:	af00      	add	r7, sp, #0
 800a6ae:	60f8      	str	r0, [r7, #12]
 800a6b0:	60b9      	str	r1, [r7, #8]
 800a6b2:	607a      	str	r2, [r7, #4]
 800a6b4:	603b      	str	r3, [r7, #0]
	event->callback = callback;
 800a6b6:	68fb      	ldr	r3, [r7, #12]
 800a6b8:	687a      	ldr	r2, [r7, #4]
 800a6ba:	60da      	str	r2, [r3, #12]
	event->arg = arg;
 800a6bc:	68fb      	ldr	r3, [r7, #12]
 800a6be:	683a      	ldr	r2, [r7, #0]
 800a6c0:	611a      	str	r2, [r3, #16]

	if ( tmout == TMO_FEVR ) {
 800a6c2:	68bb      	ldr	r3, [r7, #8]
 800a6c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a6c8:	d104      	bne.n	800a6d4 <knl_timer_insert+0x2c>
		QueInit(&event->queue);
 800a6ca:	68fb      	ldr	r3, [r7, #12]
 800a6cc:	4618      	mov	r0, r3
 800a6ce:	f7ff fedb 	bl	800a488 <QueInit>
		/* To guarantee longer wait time specified by 'tmout',
		   add TIMER_PERIOD on wait time */
		event->time = lltoul(knl_current_time) + tmout + TIMER_PERIOD;
		knl_enqueue_tmeb(event);
	}
}
 800a6d2:	e00b      	b.n	800a6ec <knl_timer_insert+0x44>
		event->time = lltoul(knl_current_time) + tmout + TIMER_PERIOD;
 800a6d4:	4b07      	ldr	r3, [pc, #28]	@ (800a6f4 <knl_timer_insert+0x4c>)
 800a6d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6da:	68bb      	ldr	r3, [r7, #8]
 800a6dc:	4413      	add	r3, r2
 800a6de:	f103 020a 	add.w	r2, r3, #10
 800a6e2:	68fb      	ldr	r3, [r7, #12]
 800a6e4:	609a      	str	r2, [r3, #8]
		knl_enqueue_tmeb(event);
 800a6e6:	68f8      	ldr	r0, [r7, #12]
 800a6e8:	f7ff ffae 	bl	800a648 <knl_enqueue_tmeb>
}
 800a6ec:	bf00      	nop
 800a6ee:	3710      	adds	r7, #16
 800a6f0:	46bd      	mov	sp, r7
 800a6f2:	bd80      	pop	{r7, pc}
 800a6f4:	240035c8 	.word	0x240035c8

0800a6f8 <knl_timer_insert_reltim>:

EXPORT void knl_timer_insert_reltim( TMEB *event, RELTIM tmout, CBACK callback, void *arg )
{
 800a6f8:	b580      	push	{r7, lr}
 800a6fa:	b084      	sub	sp, #16
 800a6fc:	af00      	add	r7, sp, #0
 800a6fe:	60f8      	str	r0, [r7, #12]
 800a700:	60b9      	str	r1, [r7, #8]
 800a702:	607a      	str	r2, [r7, #4]
 800a704:	603b      	str	r3, [r7, #0]
	event->callback = callback;
 800a706:	68fb      	ldr	r3, [r7, #12]
 800a708:	687a      	ldr	r2, [r7, #4]
 800a70a:	60da      	str	r2, [r3, #12]
	event->arg = arg;
 800a70c:	68fb      	ldr	r3, [r7, #12]
 800a70e:	683a      	ldr	r2, [r7, #0]
 800a710:	611a      	str	r2, [r3, #16]

	/* To guarantee longer wait time specified by 'tmout',
	   add TIMER_PERIOD on wait time */
	event->time = lltoul(knl_current_time) + tmout + TIMER_PERIOD;
 800a712:	4b08      	ldr	r3, [pc, #32]	@ (800a734 <knl_timer_insert_reltim+0x3c>)
 800a714:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a718:	68bb      	ldr	r3, [r7, #8]
 800a71a:	4413      	add	r3, r2
 800a71c:	f103 020a 	add.w	r2, r3, #10
 800a720:	68fb      	ldr	r3, [r7, #12]
 800a722:	609a      	str	r2, [r3, #8]
	knl_enqueue_tmeb(event);
 800a724:	68f8      	ldr	r0, [r7, #12]
 800a726:	f7ff ff8f 	bl	800a648 <knl_enqueue_tmeb>
}
 800a72a:	bf00      	nop
 800a72c:	3710      	adds	r7, #16
 800a72e:	46bd      	mov	sp, r7
 800a730:	bd80      	pop	{r7, pc}
 800a732:	bf00      	nop
 800a734:	240035c8 	.word	0x240035c8

0800a738 <knl_timer_handler>:
 *	interval by hardware timer. Update the software clock and start the 
 *	timer event upon arriving at start time.
 */

EXPORT void knl_timer_handler( void )
{
 800a738:	b5b0      	push	{r4, r5, r7, lr}
 800a73a:	b084      	sub	sp, #16
 800a73c:	af00      	add	r7, sp, #0
	TMEB	*event;
	ABSTIM	cur;

	knl_clear_hw_timer_interrupt();		/* Clear timer interrupt */
 800a73e:	f7ff ff3d 	bl	800a5bc <knl_clear_hw_timer_interrupt>

	BEGIN_CRITICAL_SECTION;
 800a742:	f001 feae 	bl	800c4a2 <disint>
 800a746:	60f8      	str	r0, [r7, #12]
	knl_current_time = ll_add(knl_current_time, uitoll(TIMER_PERIOD));
 800a748:	4b24      	ldr	r3, [pc, #144]	@ (800a7dc <knl_timer_handler+0xa4>)
 800a74a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a74e:	f112 040a 	adds.w	r4, r2, #10
 800a752:	f143 0500 	adc.w	r5, r3, #0
 800a756:	4b21      	ldr	r3, [pc, #132]	@ (800a7dc <knl_timer_handler+0xa4>)
 800a758:	e9c3 4500 	strd	r4, r5, [r3]
	cur = lltoul(knl_current_time);
 800a75c:	4b1f      	ldr	r3, [pc, #124]	@ (800a7dc <knl_timer_handler+0xa4>)
 800a75e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a762:	4613      	mov	r3, r2
 800a764:	60bb      	str	r3, [r7, #8]
		}
	}
#endif

	/* Execute event that passed occurring time. */
	while ( !isQueEmpty(&knl_timer_queue) ) {
 800a766:	e019      	b.n	800a79c <knl_timer_handler+0x64>
		event = (TMEB*)knl_timer_queue.next;
 800a768:	4b1d      	ldr	r3, [pc, #116]	@ (800a7e0 <knl_timer_handler+0xa8>)
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	607b      	str	r3, [r7, #4]

		if ( !knl_abstim_reached(cur, event->time) ) {
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	689b      	ldr	r3, [r3, #8]
 800a772:	4619      	mov	r1, r3
 800a774:	68b8      	ldr	r0, [r7, #8]
 800a776:	f7ff fedb 	bl	800a530 <knl_abstim_reached>
 800a77a:	4603      	mov	r3, r0
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	d014      	beq.n	800a7aa <knl_timer_handler+0x72>
			break;
		}

		QueRemove(&event->queue);
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	4618      	mov	r0, r3
 800a784:	f7ff febb 	bl	800a4fe <QueRemove>
		if ( event->callback != NULL ) {
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	68db      	ldr	r3, [r3, #12]
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	d005      	beq.n	800a79c <knl_timer_handler+0x64>
			(*event->callback)(event->arg);
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	68db      	ldr	r3, [r3, #12]
 800a794:	687a      	ldr	r2, [r7, #4]
 800a796:	6912      	ldr	r2, [r2, #16]
 800a798:	4610      	mov	r0, r2
 800a79a:	4798      	blx	r3
	while ( !isQueEmpty(&knl_timer_queue) ) {
 800a79c:	4810      	ldr	r0, [pc, #64]	@ (800a7e0 <knl_timer_handler+0xa8>)
 800a79e:	f7ff fe83 	bl	800a4a8 <isQueEmpty>
 800a7a2:	4603      	mov	r3, r0
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	d0df      	beq.n	800a768 <knl_timer_handler+0x30>
 800a7a8:	e000      	b.n	800a7ac <knl_timer_handler+0x74>
			break;
 800a7aa:	bf00      	nop
		}
	}

	END_CRITICAL_SECTION;
 800a7ac:	68fb      	ldr	r3, [r7, #12]
 800a7ae:	2b00      	cmp	r3, #0
 800a7b0:	d10b      	bne.n	800a7ca <knl_timer_handler+0x92>
 800a7b2:	4b0c      	ldr	r3, [pc, #48]	@ (800a7e4 <knl_timer_handler+0xac>)
 800a7b4:	681a      	ldr	r2, [r3, #0]
 800a7b6:	4b0c      	ldr	r3, [pc, #48]	@ (800a7e8 <knl_timer_handler+0xb0>)
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	429a      	cmp	r2, r3
 800a7bc:	d005      	beq.n	800a7ca <knl_timer_handler+0x92>
 800a7be:	4b0b      	ldr	r3, [pc, #44]	@ (800a7ec <knl_timer_handler+0xb4>)
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	d101      	bne.n	800a7ca <knl_timer_handler+0x92>
 800a7c6:	f001 fd07 	bl	800c1d8 <knl_dispatch>
 800a7ca:	68f8      	ldr	r0, [r7, #12]
 800a7cc:	f001 fe4d 	bl	800c46a <set_basepri>

	knl_end_of_hw_timer_interrupt();		/* Clear timer interrupt */
 800a7d0:	f7ff ff04 	bl	800a5dc <knl_end_of_hw_timer_interrupt>
}
 800a7d4:	bf00      	nop
 800a7d6:	3710      	adds	r7, #16
 800a7d8:	46bd      	mov	sp, r7
 800a7da:	bdb0      	pop	{r4, r5, r7, pc}
 800a7dc:	240035c8 	.word	0x240035c8
 800a7e0:	240035d8 	.word	0x240035d8
 800a7e4:	240025d8 	.word	0x240025d8
 800a7e8:	240025dc 	.word	0x240025dc
 800a7ec:	240025d4 	.word	0x240025d4

0800a7f0 <knl_init_object>:

/*
 * Each kernel-object initialization
 */
EXPORT ER knl_init_object( void)
{	
 800a7f0:	b580      	push	{r7, lr}
 800a7f2:	b082      	sub	sp, #8
 800a7f4:	af00      	add	r7, sp, #0
	ER	ercd;

	ercd = knl_task_initialize();
 800a7f6:	f7ff faa7 	bl	8009d48 <knl_task_initialize>
 800a7fa:	6078      	str	r0, [r7, #4]
	if(ercd < E_OK) return ercd;
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	da01      	bge.n	800a806 <knl_init_object+0x16>
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	e048      	b.n	800a898 <knl_init_object+0xa8>

#if USE_SEMAPHORE
	ercd = knl_semaphore_initialize();
 800a806:	f7fe ffc3 	bl	8009790 <knl_semaphore_initialize>
 800a80a:	6078      	str	r0, [r7, #4]
	if(ercd < E_OK) return ercd;
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	2b00      	cmp	r3, #0
 800a810:	da01      	bge.n	800a816 <knl_init_object+0x26>
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	e040      	b.n	800a898 <knl_init_object+0xa8>
#endif
#if USE_EVENTFLAG
	ercd = knl_eventflag_initialize();
 800a816:	f7fe f92f 	bl	8008a78 <knl_eventflag_initialize>
 800a81a:	6078      	str	r0, [r7, #4]
	if(ercd < E_OK) return ercd;
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	2b00      	cmp	r3, #0
 800a820:	da01      	bge.n	800a826 <knl_init_object+0x36>
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	e038      	b.n	800a898 <knl_init_object+0xa8>
#endif
#if USE_MAILBOX
	ercd = knl_mailbox_initialize();
 800a826:	f7fe fb8f 	bl	8008f48 <knl_mailbox_initialize>
 800a82a:	6078      	str	r0, [r7, #4]
	if(ercd < E_OK) return ercd;
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	2b00      	cmp	r3, #0
 800a830:	da01      	bge.n	800a836 <knl_init_object+0x46>
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	e030      	b.n	800a898 <knl_init_object+0xa8>
#endif
#if USE_MESSAGEBUFFER
	ercd = knl_messagebuffer_initialize();
 800a836:	f7fe fefb 	bl	8009630 <knl_messagebuffer_initialize>
 800a83a:	6078      	str	r0, [r7, #4]
	if(ercd < E_OK) return ercd;
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	2b00      	cmp	r3, #0
 800a840:	da01      	bge.n	800a846 <knl_init_object+0x56>
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	e028      	b.n	800a898 <knl_init_object+0xa8>
#if USE_LEGACY_API && USE_RENDEZVOUS
	ercd = knl_rendezvous_initialize();
	if(ercd < E_OK) return ercd;
#endif
#if USE_MUTEX
	ercd = knl_mutex_initialize();
 800a846:	f7fe ff43 	bl	80096d0 <knl_mutex_initialize>
 800a84a:	6078      	str	r0, [r7, #4]
	if(ercd < E_OK) return ercd;
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	2b00      	cmp	r3, #0
 800a850:	da01      	bge.n	800a856 <knl_init_object+0x66>
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	e020      	b.n	800a898 <knl_init_object+0xa8>
#endif
#if USE_MEMORYPOOL
	ercd = knl_memorypool_initialize();
 800a856:	f7fe fe9b 	bl	8009590 <knl_memorypool_initialize>
 800a85a:	6078      	str	r0, [r7, #4]
	if(ercd < E_OK) return ercd;
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	2b00      	cmp	r3, #0
 800a860:	da01      	bge.n	800a866 <knl_init_object+0x76>
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	e018      	b.n	800a898 <knl_init_object+0xa8>
#endif
#if USE_FIX_MEMORYPOOL
	ercd = knl_fix_memorypool_initialize();
 800a866:	f7fe fe3f 	bl	80094e8 <knl_fix_memorypool_initialize>
 800a86a:	6078      	str	r0, [r7, #4]
	if(ercd < E_OK) return ercd;
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	2b00      	cmp	r3, #0
 800a870:	da01      	bge.n	800a876 <knl_init_object+0x86>
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	e010      	b.n	800a898 <knl_init_object+0xa8>
#endif
#if USE_CYCLICHANDLER
	ercd = knl_cyclichandler_initialize();
 800a876:	f7ff fda5 	bl	800a3c4 <knl_cyclichandler_initialize>
 800a87a:	6078      	str	r0, [r7, #4]
	if(ercd < E_OK) return ercd;
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	2b00      	cmp	r3, #0
 800a880:	da01      	bge.n	800a886 <knl_init_object+0x96>
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	e008      	b.n	800a898 <knl_init_object+0xa8>
#endif
#if USE_ALARMHANDLER
	ercd = knl_alarmhandler_initialize();
 800a886:	f7ff fdc1 	bl	800a40c <knl_alarmhandler_initialize>
 800a88a:	6078      	str	r0, [r7, #4]
	if(ercd < E_OK) return ercd;
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	2b00      	cmp	r3, #0
 800a890:	da01      	bge.n	800a896 <knl_init_object+0xa6>
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	e000      	b.n	800a898 <knl_init_object+0xa8>
#endif

	return E_OK;
 800a896:	2300      	movs	r3, #0
}
 800a898:	4618      	mov	r0, r3
 800a89a:	3708      	adds	r7, #8
 800a89c:	46bd      	mov	sp, r7
 800a89e:	bd80      	pop	{r7, pc}

0800a8a0 <isQueEmpty>:
{
 800a8a0:	b480      	push	{r7}
 800a8a2:	b083      	sub	sp, #12
 800a8a4:	af00      	add	r7, sp, #0
 800a8a6:	6078      	str	r0, [r7, #4]
	return ( que->next == que )? TRUE: FALSE;
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	687a      	ldr	r2, [r7, #4]
 800a8ae:	429a      	cmp	r2, r3
 800a8b0:	bf0c      	ite	eq
 800a8b2:	2301      	moveq	r3, #1
 800a8b4:	2300      	movne	r3, #0
 800a8b6:	b2db      	uxtb	r3, r3
}
 800a8b8:	4618      	mov	r0, r3
 800a8ba:	370c      	adds	r7, #12
 800a8bc:	46bd      	mov	sp, r7
 800a8be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8c2:	4770      	bx	lr

0800a8c4 <QueInsert>:
{
 800a8c4:	b480      	push	{r7}
 800a8c6:	b083      	sub	sp, #12
 800a8c8:	af00      	add	r7, sp, #0
 800a8ca:	6078      	str	r0, [r7, #4]
 800a8cc:	6039      	str	r1, [r7, #0]
	entry->prev = (struct queue*) que->prev;
 800a8ce:	683b      	ldr	r3, [r7, #0]
 800a8d0:	685a      	ldr	r2, [r3, #4]
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	605a      	str	r2, [r3, #4]
	entry->next = que;
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	683a      	ldr	r2, [r7, #0]
 800a8da:	601a      	str	r2, [r3, #0]
	que->prev->next = entry;
 800a8dc:	683b      	ldr	r3, [r7, #0]
 800a8de:	685b      	ldr	r3, [r3, #4]
 800a8e0:	687a      	ldr	r2, [r7, #4]
 800a8e2:	601a      	str	r2, [r3, #0]
	que->prev = entry;
 800a8e4:	683b      	ldr	r3, [r7, #0]
 800a8e6:	687a      	ldr	r2, [r7, #4]
 800a8e8:	605a      	str	r2, [r3, #4]
}
 800a8ea:	bf00      	nop
 800a8ec:	370c      	adds	r7, #12
 800a8ee:	46bd      	mov	sp, r7
 800a8f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8f4:	4770      	bx	lr

0800a8f6 <QueRemove>:
{
 800a8f6:	b480      	push	{r7}
 800a8f8:	b083      	sub	sp, #12
 800a8fa:	af00      	add	r7, sp, #0
 800a8fc:	6078      	str	r0, [r7, #4]
	if ( entry->next != entry ) {
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	687a      	ldr	r2, [r7, #4]
 800a904:	429a      	cmp	r2, r3
 800a906:	d009      	beq.n	800a91c <QueRemove+0x26>
		entry->prev->next = (struct queue*) entry->next;
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	685b      	ldr	r3, [r3, #4]
 800a90c:	687a      	ldr	r2, [r7, #4]
 800a90e:	6812      	ldr	r2, [r2, #0]
 800a910:	601a      	str	r2, [r3, #0]
		entry->next->prev = (struct queue*) entry->prev;
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	687a      	ldr	r2, [r7, #4]
 800a918:	6852      	ldr	r2, [r2, #4]
 800a91a:	605a      	str	r2, [r3, #4]
}
 800a91c:	bf00      	nop
 800a91e:	370c      	adds	r7, #12
 800a920:	46bd      	mov	sp, r7
 800a922:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a926:	4770      	bx	lr

0800a928 <knl_timer_delete>:

/*
 * Delete from time-event queue
 */
Inline void knl_timer_delete( TMEB *event )
{
 800a928:	b580      	push	{r7, lr}
 800a92a:	b082      	sub	sp, #8
 800a92c:	af00      	add	r7, sp, #0
 800a92e:	6078      	str	r0, [r7, #4]
	QueRemove(&event->queue);
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	4618      	mov	r0, r3
 800a934:	f7ff ffdf 	bl	800a8f6 <QueRemove>
}
 800a938:	bf00      	nop
 800a93a:	3708      	adds	r7, #8
 800a93c:	46bd      	mov	sp, r7
 800a93e:	bd80      	pop	{r7, pc}

0800a940 <knl_queue_insert_tpri>:

/*
 * Connect the task to the prioritized wait queue.
 */
Inline void knl_queue_insert_tpri( TCB *tcb, QUEUE *queue )
{
 800a940:	b580      	push	{r7, lr}
 800a942:	b088      	sub	sp, #32
 800a944:	af00      	add	r7, sp, #0
 800a946:	6078      	str	r0, [r7, #4]
 800a948:	6039      	str	r1, [r7, #0]
	QUEUE *q;
	QUEUE *start, *end;
	UB val;
	W offset;

	start = end = queue;
 800a94a:	683b      	ldr	r3, [r7, #0]
 800a94c:	61bb      	str	r3, [r7, #24]
 800a94e:	69bb      	ldr	r3, [r7, #24]
 800a950:	617b      	str	r3, [r7, #20]
	val = tcb->priority;
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 800a958:	74fb      	strb	r3, [r7, #19]
	offset = offsetof(TCB, priority);
 800a95a:	2326      	movs	r3, #38	@ 0x26
 800a95c:	60fb      	str	r3, [r7, #12]

	for ( q = start->next; q != end; q = q->next ) {
 800a95e:	697b      	ldr	r3, [r7, #20]
 800a960:	681b      	ldr	r3, [r3, #0]
 800a962:	61fb      	str	r3, [r7, #28]
 800a964:	e009      	b.n	800a97a <knl_queue_insert_tpri+0x3a>
		if ( *(UB*)((VB*)q + offset) > val ) {
 800a966:	68fb      	ldr	r3, [r7, #12]
 800a968:	69fa      	ldr	r2, [r7, #28]
 800a96a:	4413      	add	r3, r2
 800a96c:	781b      	ldrb	r3, [r3, #0]
 800a96e:	7cfa      	ldrb	r2, [r7, #19]
 800a970:	429a      	cmp	r2, r3
 800a972:	d307      	bcc.n	800a984 <knl_queue_insert_tpri+0x44>
	for ( q = start->next; q != end; q = q->next ) {
 800a974:	69fb      	ldr	r3, [r7, #28]
 800a976:	681b      	ldr	r3, [r3, #0]
 800a978:	61fb      	str	r3, [r7, #28]
 800a97a:	69fa      	ldr	r2, [r7, #28]
 800a97c:	69bb      	ldr	r3, [r7, #24]
 800a97e:	429a      	cmp	r2, r3
 800a980:	d1f1      	bne.n	800a966 <knl_queue_insert_tpri+0x26>
 800a982:	e000      	b.n	800a986 <knl_queue_insert_tpri+0x46>
			break;
 800a984:	bf00      	nop
		}
	}

	QueInsert(&tcb->tskque, q);
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	69f9      	ldr	r1, [r7, #28]
 800a98a:	4618      	mov	r0, r3
 800a98c:	f7ff ff9a 	bl	800a8c4 <QueInsert>
}
 800a990:	bf00      	nop
 800a992:	3720      	adds	r7, #32
 800a994:	46bd      	mov	sp, r7
 800a996:	bd80      	pop	{r7, pc}

0800a998 <knl_make_non_wait>:
 * Update the task state to release wait. When it becomes ready state,
 * connect to the ready queue.
 * Call when the task is in the wait state (including double wait).
 */
Inline void knl_make_non_wait( TCB *tcb )
{
 800a998:	b580      	push	{r7, lr}
 800a99a:	b082      	sub	sp, #8
 800a99c:	af00      	add	r7, sp, #0
 800a99e:	6078      	str	r0, [r7, #4]
	if ( tcb->state == TS_WAIT ) {
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
 800a9a6:	2b02      	cmp	r3, #2
 800a9a8:	d103      	bne.n	800a9b2 <knl_make_non_wait+0x1a>
		knl_make_ready(tcb);
 800a9aa:	6878      	ldr	r0, [r7, #4]
 800a9ac:	f7ff fa4a 	bl	8009e44 <knl_make_ready>
	} else {
		tcb->state = TS_SUSPEND;
	}
}
 800a9b0:	e003      	b.n	800a9ba <knl_make_non_wait+0x22>
		tcb->state = TS_SUSPEND;
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	2204      	movs	r2, #4
 800a9b6:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
}
 800a9ba:	bf00      	nop
 800a9bc:	3708      	adds	r7, #8
 800a9be:	46bd      	mov	sp, r7
 800a9c0:	bd80      	pop	{r7, pc}

0800a9c2 <knl_wait_release>:

/*
 * Release wait state of the task.
 */
Inline void knl_wait_release( TCB *tcb )
{
 800a9c2:	b580      	push	{r7, lr}
 800a9c4:	b082      	sub	sp, #8
 800a9c6:	af00      	add	r7, sp, #0
 800a9c8:	6078      	str	r0, [r7, #4]
	knl_timer_delete(&tcb->wtmeb);
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	334c      	adds	r3, #76	@ 0x4c
 800a9ce:	4618      	mov	r0, r3
 800a9d0:	f7ff ffaa 	bl	800a928 <knl_timer_delete>
	QueRemove(&tcb->tskque);
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	4618      	mov	r0, r3
 800a9d8:	f7ff ff8d 	bl	800a8f6 <QueRemove>
	knl_make_non_wait(tcb);
 800a9dc:	6878      	ldr	r0, [r7, #4]
 800a9de:	f7ff ffdb 	bl	800a998 <knl_make_non_wait>
}
 800a9e2:	bf00      	nop
 800a9e4:	3708      	adds	r7, #8
 800a9e6:	46bd      	mov	sp, r7
 800a9e8:	bd80      	pop	{r7, pc}

0800a9ea <knl_wait_release_ok>:

#include "kernel.h"
#include "wait.h"

EXPORT void knl_wait_release_ok( TCB *tcb )
{
 800a9ea:	b580      	push	{r7, lr}
 800a9ec:	b082      	sub	sp, #8
 800a9ee:	af00      	add	r7, sp, #0
 800a9f0:	6078      	str	r0, [r7, #4]
	knl_wait_release(tcb);
 800a9f2:	6878      	ldr	r0, [r7, #4]
 800a9f4:	f7ff ffe5 	bl	800a9c2 <knl_wait_release>
	*tcb->wercd = E_OK;
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a9fc:	2200      	movs	r2, #0
 800a9fe:	601a      	str	r2, [r3, #0]
}
 800aa00:	bf00      	nop
 800aa02:	3708      	adds	r7, #8
 800aa04:	46bd      	mov	sp, r7
 800aa06:	bd80      	pop	{r7, pc}

0800aa08 <knl_wait_release_tmout>:
	}
	*tcb->wercd = ercd;
}

EXPORT void knl_wait_release_tmout( TCB *tcb )
{
 800aa08:	b580      	push	{r7, lr}
 800aa0a:	b082      	sub	sp, #8
 800aa0c:	af00      	add	r7, sp, #0
 800aa0e:	6078      	str	r0, [r7, #4]
	QueRemove(&tcb->tskque);
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	4618      	mov	r0, r3
 800aa14:	f7ff ff6f 	bl	800a8f6 <QueRemove>
	knl_make_non_wait(tcb);
 800aa18:	6878      	ldr	r0, [r7, #4]
 800aa1a:	f7ff ffbd 	bl	800a998 <knl_make_non_wait>
	if ( tcb->wspec->rel_wai_hook != NULL ) {
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aa22:	689b      	ldr	r3, [r3, #8]
 800aa24:	2b00      	cmp	r3, #0
 800aa26:	d004      	beq.n	800aa32 <knl_wait_release_tmout+0x2a>
		(*tcb->wspec->rel_wai_hook)(tcb);
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aa2c:	689b      	ldr	r3, [r3, #8]
 800aa2e:	6878      	ldr	r0, [r7, #4]
 800aa30:	4798      	blx	r3
	}
}
 800aa32:	bf00      	nop
 800aa34:	3708      	adds	r7, #8
 800aa36:	46bd      	mov	sp, r7
 800aa38:	bd80      	pop	{r7, pc}
	...

0800aa3c <knl_make_wait>:
 *	typedef	W		TMO;
 *	typedef UW		RELTIM;
 *	#define TMO_FEVR	(-1)
 */
EXPORT void knl_make_wait( TMO tmout, ATR atr )
{
 800aa3c:	b580      	push	{r7, lr}
 800aa3e:	b082      	sub	sp, #8
 800aa40:	af00      	add	r7, sp, #0
 800aa42:	6078      	str	r0, [r7, #4]
 800aa44:	6039      	str	r1, [r7, #0]
	switch ( knl_ctxtsk->state ) {
 800aa46:	4b14      	ldr	r3, [pc, #80]	@ (800aa98 <knl_make_wait+0x5c>)
 800aa48:	681b      	ldr	r3, [r3, #0]
 800aa4a:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
 800aa4e:	2b01      	cmp	r3, #1
 800aa50:	d002      	beq.n	800aa58 <knl_make_wait+0x1c>
 800aa52:	2b04      	cmp	r3, #4
 800aa54:	d00b      	beq.n	800aa6e <knl_make_wait+0x32>
 800aa56:	e010      	b.n	800aa7a <knl_make_wait+0x3e>
	  case TS_READY:
		knl_make_non_ready(knl_ctxtsk);
 800aa58:	4b0f      	ldr	r3, [pc, #60]	@ (800aa98 <knl_make_wait+0x5c>)
 800aa5a:	681b      	ldr	r3, [r3, #0]
 800aa5c:	4618      	mov	r0, r3
 800aa5e:	f7ff fa0b 	bl	8009e78 <knl_make_non_ready>
		knl_ctxtsk->state = TS_WAIT;
 800aa62:	4b0d      	ldr	r3, [pc, #52]	@ (800aa98 <knl_make_wait+0x5c>)
 800aa64:	681b      	ldr	r3, [r3, #0]
 800aa66:	2202      	movs	r2, #2
 800aa68:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
		break;
 800aa6c:	e005      	b.n	800aa7a <knl_make_wait+0x3e>
	  case TS_SUSPEND:
		knl_ctxtsk->state = TS_WAITSUS;
 800aa6e:	4b0a      	ldr	r3, [pc, #40]	@ (800aa98 <knl_make_wait+0x5c>)
 800aa70:	681b      	ldr	r3, [r3, #0]
 800aa72:	2206      	movs	r2, #6
 800aa74:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
		break;
 800aa78:	bf00      	nop
	}
	knl_timer_insert(&knl_ctxtsk->wtmeb, tmout, (CBACK)knl_wait_release_tmout, knl_ctxtsk);
 800aa7a:	4b07      	ldr	r3, [pc, #28]	@ (800aa98 <knl_make_wait+0x5c>)
 800aa7c:	681b      	ldr	r3, [r3, #0]
 800aa7e:	f103 004c 	add.w	r0, r3, #76	@ 0x4c
 800aa82:	4b05      	ldr	r3, [pc, #20]	@ (800aa98 <knl_make_wait+0x5c>)
 800aa84:	681b      	ldr	r3, [r3, #0]
 800aa86:	4a05      	ldr	r2, [pc, #20]	@ (800aa9c <knl_make_wait+0x60>)
 800aa88:	6879      	ldr	r1, [r7, #4]
 800aa8a:	f7ff fe0d 	bl	800a6a8 <knl_timer_insert>
}
 800aa8e:	bf00      	nop
 800aa90:	3708      	adds	r7, #8
 800aa92:	46bd      	mov	sp, r7
 800aa94:	bd80      	pop	{r7, pc}
 800aa96:	bf00      	nop
 800aa98:	240025d8 	.word	0x240025d8
 800aa9c:	0800aa09 	.word	0x0800aa09

0800aaa0 <knl_make_wait_reltim>:

EXPORT void knl_make_wait_reltim( RELTIM tmout, ATR atr )
{
 800aaa0:	b580      	push	{r7, lr}
 800aaa2:	b082      	sub	sp, #8
 800aaa4:	af00      	add	r7, sp, #0
 800aaa6:	6078      	str	r0, [r7, #4]
 800aaa8:	6039      	str	r1, [r7, #0]
	switch ( knl_ctxtsk->state ) {
 800aaaa:	4b14      	ldr	r3, [pc, #80]	@ (800aafc <knl_make_wait_reltim+0x5c>)
 800aaac:	681b      	ldr	r3, [r3, #0]
 800aaae:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
 800aab2:	2b01      	cmp	r3, #1
 800aab4:	d002      	beq.n	800aabc <knl_make_wait_reltim+0x1c>
 800aab6:	2b04      	cmp	r3, #4
 800aab8:	d00b      	beq.n	800aad2 <knl_make_wait_reltim+0x32>
 800aaba:	e010      	b.n	800aade <knl_make_wait_reltim+0x3e>
	  case TS_READY:
		knl_make_non_ready(knl_ctxtsk);
 800aabc:	4b0f      	ldr	r3, [pc, #60]	@ (800aafc <knl_make_wait_reltim+0x5c>)
 800aabe:	681b      	ldr	r3, [r3, #0]
 800aac0:	4618      	mov	r0, r3
 800aac2:	f7ff f9d9 	bl	8009e78 <knl_make_non_ready>
		knl_ctxtsk->state = TS_WAIT;
 800aac6:	4b0d      	ldr	r3, [pc, #52]	@ (800aafc <knl_make_wait_reltim+0x5c>)
 800aac8:	681b      	ldr	r3, [r3, #0]
 800aaca:	2202      	movs	r2, #2
 800aacc:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
		break;
 800aad0:	e005      	b.n	800aade <knl_make_wait_reltim+0x3e>
	  case TS_SUSPEND:
		knl_ctxtsk->state = TS_WAITSUS;
 800aad2:	4b0a      	ldr	r3, [pc, #40]	@ (800aafc <knl_make_wait_reltim+0x5c>)
 800aad4:	681b      	ldr	r3, [r3, #0]
 800aad6:	2206      	movs	r2, #6
 800aad8:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
		break;
 800aadc:	bf00      	nop
	}
	knl_timer_insert_reltim(&knl_ctxtsk->wtmeb, tmout, (CBACK)knl_wait_release_tmout, knl_ctxtsk);
 800aade:	4b07      	ldr	r3, [pc, #28]	@ (800aafc <knl_make_wait_reltim+0x5c>)
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	f103 004c 	add.w	r0, r3, #76	@ 0x4c
 800aae6:	4b05      	ldr	r3, [pc, #20]	@ (800aafc <knl_make_wait_reltim+0x5c>)
 800aae8:	681b      	ldr	r3, [r3, #0]
 800aaea:	4a05      	ldr	r2, [pc, #20]	@ (800ab00 <knl_make_wait_reltim+0x60>)
 800aaec:	6879      	ldr	r1, [r7, #4]
 800aaee:	f7ff fe03 	bl	800a6f8 <knl_timer_insert_reltim>
}
 800aaf2:	bf00      	nop
 800aaf4:	3708      	adds	r7, #8
 800aaf6:	46bd      	mov	sp, r7
 800aaf8:	bd80      	pop	{r7, pc}
 800aafa:	bf00      	nop
 800aafc:	240025d8 	.word	0x240025d8
 800ab00:	0800aa09 	.word	0x0800aa09

0800ab04 <knl_wait_delete>:
/*
 * Release all tasks connected to the wait queue, and define it
 * as E_DLT error.
 */
EXPORT void knl_wait_delete( QUEUE *wait_queue )
{
 800ab04:	b580      	push	{r7, lr}
 800ab06:	b084      	sub	sp, #16
 800ab08:	af00      	add	r7, sp, #0
 800ab0a:	6078      	str	r0, [r7, #4]
	TCB	*tcb;

	while ( !isQueEmpty(wait_queue) ) {
 800ab0c:	e00a      	b.n	800ab24 <knl_wait_delete+0x20>
		tcb = (TCB*)wait_queue->next;
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	681b      	ldr	r3, [r3, #0]
 800ab12:	60fb      	str	r3, [r7, #12]
		knl_wait_release(tcb);
 800ab14:	68f8      	ldr	r0, [r7, #12]
 800ab16:	f7ff ff54 	bl	800a9c2 <knl_wait_release>
		*tcb->wercd = E_DLT;
 800ab1a:	68fb      	ldr	r3, [r7, #12]
 800ab1c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ab1e:	f06f 0232 	mvn.w	r2, #50	@ 0x32
 800ab22:	601a      	str	r2, [r3, #0]
	while ( !isQueEmpty(wait_queue) ) {
 800ab24:	6878      	ldr	r0, [r7, #4]
 800ab26:	f7ff febb 	bl	800a8a0 <isQueEmpty>
 800ab2a:	4603      	mov	r3, r0
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	d0ee      	beq.n	800ab0e <knl_wait_delete+0xa>
	}
}
 800ab30:	bf00      	nop
 800ab32:	bf00      	nop
 800ab34:	3710      	adds	r7, #16
 800ab36:	46bd      	mov	sp, r7
 800ab38:	bd80      	pop	{r7, pc}
	...

0800ab3c <knl_gcb_make_wait>:
/*
 * Change the active task state to wait state and connect to the timer wait 
 * queue and the object wait queue. Also set 'wid' in 'knl_ctxtsk'.
 */
EXPORT void knl_gcb_make_wait( GCB *gcb, TMO tmout )
{
 800ab3c:	b580      	push	{r7, lr}
 800ab3e:	b082      	sub	sp, #8
 800ab40:	af00      	add	r7, sp, #0
 800ab42:	6078      	str	r0, [r7, #4]
 800ab44:	6039      	str	r1, [r7, #0]
	*knl_ctxtsk->wercd = E_TMOUT;
 800ab46:	4b17      	ldr	r3, [pc, #92]	@ (800aba4 <knl_gcb_make_wait+0x68>)
 800ab48:	681b      	ldr	r3, [r3, #0]
 800ab4a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ab4c:	f06f 0231 	mvn.w	r2, #49	@ 0x31
 800ab50:	601a      	str	r2, [r3, #0]
	if ( tmout != TMO_POL ) {
 800ab52:	683b      	ldr	r3, [r7, #0]
 800ab54:	2b00      	cmp	r3, #0
 800ab56:	d020      	beq.n	800ab9a <knl_gcb_make_wait+0x5e>
		knl_ctxtsk->wid = gcb->objid;
 800ab58:	4b12      	ldr	r3, [pc, #72]	@ (800aba4 <knl_gcb_make_wait+0x68>)
 800ab5a:	681b      	ldr	r3, [r3, #0]
 800ab5c:	687a      	ldr	r2, [r7, #4]
 800ab5e:	6892      	ldr	r2, [r2, #8]
 800ab60:	631a      	str	r2, [r3, #48]	@ 0x30
		knl_make_wait(tmout, gcb->objatr);
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	691b      	ldr	r3, [r3, #16]
 800ab66:	4619      	mov	r1, r3
 800ab68:	6838      	ldr	r0, [r7, #0]
 800ab6a:	f7ff ff67 	bl	800aa3c <knl_make_wait>
		if ( (gcb->objatr & TA_TPRI) != 0 ) {
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	691b      	ldr	r3, [r3, #16]
 800ab72:	f003 0301 	and.w	r3, r3, #1
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	d007      	beq.n	800ab8a <knl_gcb_make_wait+0x4e>
			knl_queue_insert_tpri(knl_ctxtsk, &gcb->wait_queue);
 800ab7a:	4b0a      	ldr	r3, [pc, #40]	@ (800aba4 <knl_gcb_make_wait+0x68>)
 800ab7c:	681b      	ldr	r3, [r3, #0]
 800ab7e:	687a      	ldr	r2, [r7, #4]
 800ab80:	4611      	mov	r1, r2
 800ab82:	4618      	mov	r0, r3
 800ab84:	f7ff fedc 	bl	800a940 <knl_queue_insert_tpri>
		} else {
			QueInsert(&knl_ctxtsk->tskque, &gcb->wait_queue);
		}
	}
}
 800ab88:	e007      	b.n	800ab9a <knl_gcb_make_wait+0x5e>
			QueInsert(&knl_ctxtsk->tskque, &gcb->wait_queue);
 800ab8a:	4b06      	ldr	r3, [pc, #24]	@ (800aba4 <knl_gcb_make_wait+0x68>)
 800ab8c:	681b      	ldr	r3, [r3, #0]
 800ab8e:	461a      	mov	r2, r3
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	4619      	mov	r1, r3
 800ab94:	4610      	mov	r0, r2
 800ab96:	f7ff fe95 	bl	800a8c4 <QueInsert>
}
 800ab9a:	bf00      	nop
 800ab9c:	3708      	adds	r7, #8
 800ab9e:	46bd      	mov	sp, r7
 800aba0:	bd80      	pop	{r7, pc}
 800aba2:	bf00      	nop
 800aba4:	240025d8 	.word	0x240025d8

0800aba8 <knl_gcb_change_priority>:
 * When the task priority changes, adjust the task position at the wait queue.
 * It is called only if the object attribute TA_TPRI is specified.
 *
 */
EXPORT void knl_gcb_change_priority( GCB *gcb, TCB *tcb )
{
 800aba8:	b580      	push	{r7, lr}
 800abaa:	b082      	sub	sp, #8
 800abac:	af00      	add	r7, sp, #0
 800abae:	6078      	str	r0, [r7, #4]
 800abb0:	6039      	str	r1, [r7, #0]
	QueRemove(&tcb->tskque);
 800abb2:	683b      	ldr	r3, [r7, #0]
 800abb4:	4618      	mov	r0, r3
 800abb6:	f7ff fe9e 	bl	800a8f6 <QueRemove>
	knl_queue_insert_tpri(tcb, &gcb->wait_queue);
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	4619      	mov	r1, r3
 800abbe:	6838      	ldr	r0, [r7, #0]
 800abc0:	f7ff febe 	bl	800a940 <knl_queue_insert_tpri>
}
 800abc4:	bf00      	nop
 800abc6:	3708      	adds	r7, #8
 800abc8:	46bd      	mov	sp, r7
 800abca:	bd80      	pop	{r7, pc}

0800abcc <knl_gcb_top_of_wait_queue>:
 * Search the first task of wait queue include "tcb" with target.
 * (Not insert "tcb" into wait queue.)
 *
 */
EXPORT TCB* knl_gcb_top_of_wait_queue( GCB *gcb, TCB *tcb )
{
 800abcc:	b580      	push	{r7, lr}
 800abce:	b084      	sub	sp, #16
 800abd0:	af00      	add	r7, sp, #0
 800abd2:	6078      	str	r0, [r7, #4]
 800abd4:	6039      	str	r1, [r7, #0]
	TCB	*q;

	if ( isQueEmpty(&gcb->wait_queue) ) {
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	4618      	mov	r0, r3
 800abda:	f7ff fe61 	bl	800a8a0 <isQueEmpty>
 800abde:	4603      	mov	r3, r0
 800abe0:	2b00      	cmp	r3, #0
 800abe2:	d001      	beq.n	800abe8 <knl_gcb_top_of_wait_queue+0x1c>
		return tcb;
 800abe4:	683b      	ldr	r3, [r7, #0]
 800abe6:	e015      	b.n	800ac14 <knl_gcb_top_of_wait_queue+0x48>
	}

	q = (TCB*)gcb->wait_queue.next;
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	681b      	ldr	r3, [r3, #0]
 800abec:	60fb      	str	r3, [r7, #12]
	if ( (gcb->objatr & TA_TPRI) == 0 ) {
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	691b      	ldr	r3, [r3, #16]
 800abf2:	f003 0301 	and.w	r3, r3, #1
 800abf6:	2b00      	cmp	r3, #0
 800abf8:	d101      	bne.n	800abfe <knl_gcb_top_of_wait_queue+0x32>
		return q;
 800abfa:	68fb      	ldr	r3, [r7, #12]
 800abfc:	e00a      	b.n	800ac14 <knl_gcb_top_of_wait_queue+0x48>
	}

	return ( tcb->priority < q->priority )? tcb: q;
 800abfe:	683b      	ldr	r3, [r7, #0]
 800ac00:	f893 2026 	ldrb.w	r2, [r3, #38]	@ 0x26
 800ac04:	68fb      	ldr	r3, [r7, #12]
 800ac06:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 800ac0a:	429a      	cmp	r2, r3
 800ac0c:	d201      	bcs.n	800ac12 <knl_gcb_top_of_wait_queue+0x46>
 800ac0e:	683b      	ldr	r3, [r7, #0]
 800ac10:	e000      	b.n	800ac14 <knl_gcb_top_of_wait_queue+0x48>
 800ac12:	68fb      	ldr	r3, [r7, #12]
}
 800ac14:	4618      	mov	r0, r3
 800ac16:	3710      	adds	r7, #16
 800ac18:	46bd      	mov	sp, r7
 800ac1a:	bd80      	pop	{r7, pc}

0800ac1c <knl_memset>:
#include "kernel.h"

/*** binary operation ***/
/* memset : fill memory area */
void* knl_memset( void *s, int c, SZ n )
{
 800ac1c:	b4f0      	push	{r4, r5, r6, r7}
 800ac1e:	b084      	sub	sp, #16
 800ac20:	af00      	add	r7, sp, #0
 800ac22:	60f8      	str	r0, [r7, #12]
 800ac24:	60b9      	str	r1, [r7, #8]
 800ac26:	607a      	str	r2, [r7, #4]
	register unsigned char *cp, cval;
	register unsigned long *lp, lval;

	cp = (unsigned char *)s;
 800ac28:	68fc      	ldr	r4, [r7, #12]
	cval = (unsigned char)c;
 800ac2a:	68bb      	ldr	r3, [r7, #8]
 800ac2c:	b2dd      	uxtb	r5, r3
	
	if (n < 8) {
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	2b07      	cmp	r3, #7
 800ac32:	dc12      	bgt.n	800ac5a <knl_memset+0x3e>
		while (n-- > 0) {
 800ac34:	e003      	b.n	800ac3e <knl_memset+0x22>
			*cp++ = cval;
 800ac36:	4623      	mov	r3, r4
 800ac38:	1c5c      	adds	r4, r3, #1
 800ac3a:	462a      	mov	r2, r5
 800ac3c:	701a      	strb	r2, [r3, #0]
		while (n-- > 0) {
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	1e5a      	subs	r2, r3, #1
 800ac42:	607a      	str	r2, [r7, #4]
 800ac44:	2b00      	cmp	r3, #0
 800ac46:	dcf6      	bgt.n	800ac36 <knl_memset+0x1a>
		}
		return s;
 800ac48:	68fb      	ldr	r3, [r7, #12]
 800ac4a:	e02e      	b.n	800acaa <knl_memset+0x8e>
	}

	while ((long)cp % 4) {
		--n;
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	3b01      	subs	r3, #1
 800ac50:	607b      	str	r3, [r7, #4]
		*cp++ = cval;
 800ac52:	4623      	mov	r3, r4
 800ac54:	1c5c      	adds	r4, r3, #1
 800ac56:	462a      	mov	r2, r5
 800ac58:	701a      	strb	r2, [r3, #0]
	while ((long)cp % 4) {
 800ac5a:	4623      	mov	r3, r4
 800ac5c:	f003 0303 	and.w	r3, r3, #3
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	d1f3      	bne.n	800ac4c <knl_memset+0x30>
	}

	lp = (unsigned long *)cp;
 800ac64:	4626      	mov	r6, r4
	lval = (unsigned long)cval |
 800ac66:	462a      	mov	r2, r5
 800ac68:	4613      	mov	r3, r2
 800ac6a:	021b      	lsls	r3, r3, #8
 800ac6c:	441a      	add	r2, r3
		(unsigned long)cval << 8 |
		(unsigned long)cval << 16 |
 800ac6e:	462b      	mov	r3, r5
 800ac70:	041b      	lsls	r3, r3, #16
		(unsigned long)cval << 8 |
 800ac72:	431a      	orrs	r2, r3
		(unsigned long)cval << 24;
 800ac74:	462b      	mov	r3, r5
 800ac76:	061b      	lsls	r3, r3, #24
	lval = (unsigned long)cval |
 800ac78:	ea42 0403 	orr.w	r4, r2, r3

	while (n >= 4) {
 800ac7c:	e005      	b.n	800ac8a <knl_memset+0x6e>
		*lp++ = lval;
 800ac7e:	4633      	mov	r3, r6
 800ac80:	1d1e      	adds	r6, r3, #4
 800ac82:	601c      	str	r4, [r3, #0]
		n -= 4;
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	3b04      	subs	r3, #4
 800ac88:	607b      	str	r3, [r7, #4]
	while (n >= 4) {
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	2b03      	cmp	r3, #3
 800ac8e:	dcf6      	bgt.n	800ac7e <knl_memset+0x62>
	}

	cp = (unsigned char *)lp;
 800ac90:	4634      	mov	r4, r6
	while (n) {
 800ac92:	e006      	b.n	800aca2 <knl_memset+0x86>
		*cp++ = cval;
 800ac94:	4623      	mov	r3, r4
 800ac96:	1c5c      	adds	r4, r3, #1
 800ac98:	462a      	mov	r2, r5
 800ac9a:	701a      	strb	r2, [r3, #0]
		--n;
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	3b01      	subs	r3, #1
 800aca0:	607b      	str	r3, [r7, #4]
	while (n) {
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	d1f5      	bne.n	800ac94 <knl_memset+0x78>
	}

	return s;
 800aca8:	68fb      	ldr	r3, [r7, #12]
}
 800acaa:	4618      	mov	r0, r3
 800acac:	3710      	adds	r7, #16
 800acae:	46bd      	mov	sp, r7
 800acb0:	bcf0      	pop	{r4, r5, r6, r7}
 800acb2:	4770      	bx	lr

0800acb4 <task_1>:
LOCAL ID tskid_2;			// Task ID number
LOCAL T_CTSK ctsk_2 = {				// Task creation information
		.itskpri = 10, .stksz = 1024, .task = task_2, .tskatr = TA_HLNG
				| TA_RNG3, };

LOCAL void task_1(INT stacd, void *exinf) {
 800acb4:	b580      	push	{r7, lr}
 800acb6:	b082      	sub	sp, #8
 800acb8:	af00      	add	r7, sp, #0
 800acba:	6078      	str	r0, [r7, #4]
 800acbc:	6039      	str	r1, [r7, #0]

	while (1) {
		//tm_printf((UB*) "task 1\n");
		//tk_dly_tsk(500);

		if (HAL_UART_Receive(&huart4, buffer, 10, 30) == HAL_OK) {
 800acbe:	231e      	movs	r3, #30
 800acc0:	220a      	movs	r2, #10
 800acc2:	4906      	ldr	r1, [pc, #24]	@ (800acdc <task_1+0x28>)
 800acc4:	4806      	ldr	r0, [pc, #24]	@ (800ace0 <task_1+0x2c>)
 800acc6:	f7fb ffa3 	bl	8006c10 <HAL_UART_Receive>
 800acca:	4603      	mov	r3, r0
 800accc:	2b00      	cmp	r3, #0
 800acce:	d101      	bne.n	800acd4 <task_1+0x20>
			ControllerRead();
 800acd0:	f000 f9c4 	bl	800b05c <ControllerRead>
		}
		tk_dly_tsk(50);
 800acd4:	2032      	movs	r0, #50	@ 0x32
 800acd6:	f7ff faef 	bl	800a2b8 <tk_dly_tsk>
		if (HAL_UART_Receive(&huart4, buffer, 10, 30) == HAL_OK) {
 800acda:	e7f0      	b.n	800acbe <task_1+0xa>
 800acdc:	2400106c 	.word	0x2400106c
 800ace0:	24000f2c 	.word	0x24000f2c

0800ace4 <task_2>:
	}
}

LOCAL void task_2(INT stacd, void *exinf) {
 800ace4:	b580      	push	{r7, lr}
 800ace6:	b084      	sub	sp, #16
 800ace8:	af00      	add	r7, sp, #0
 800acea:	6078      	str	r0, [r7, #4]
 800acec:	6039      	str	r1, [r7, #0]

	uint16_t delayTime = 400;
 800acee:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 800acf2:	81fb      	strh	r3, [r7, #14]

	//500~2500 ⇔ 0~180
	left_1st_joint(1500, 1500, 1500);  //左根本
 800acf4:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 800acf8:	f240 51dc 	movw	r1, #1500	@ 0x5dc
 800acfc:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 800ad00:	f000 fcd8 	bl	800b6b4 <left_1st_joint>
	right_1st_joint(1500, 1500, 1500);  //右根本
 800ad04:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 800ad08:	f240 51dc 	movw	r1, #1500	@ 0x5dc
 800ad0c:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 800ad10:	f000 fc6c 	bl	800b5ec <right_1st_joint>
	left_2nd_joint(1500, 1500, 1500);  //左中
 800ad14:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 800ad18:	f240 51dc 	movw	r1, #1500	@ 0x5dc
 800ad1c:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 800ad20:	f000 fcea 	bl	800b6f8 <left_2nd_joint>
	right_2nd_joint(1500, 1500, 1500);  //右中
 800ad24:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 800ad28:	f240 51dc 	movw	r1, #1500	@ 0x5dc
 800ad2c:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 800ad30:	f000 fc7c 	bl	800b62c <right_2nd_joint>
	left_3rd_joint(1000, 1000, 1000);  //左先
 800ad34:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800ad38:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800ad3c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800ad40:	f000 fcfc 	bl	800b73c <left_3rd_joint>
	right_3rd_joint(1000, 1000, 1000);  //右先
 800ad44:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800ad48:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800ad4c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800ad50:	f000 fc8e 	bl	800b670 <right_3rd_joint>
	tk_dly_tsk(1000);
 800ad54:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800ad58:	f7ff faae 	bl	800a2b8 <tk_dly_tsk>

	while (1) {
		//左脚上げ
		left_2nd_joint(
				1500 + 4 * abs(LStick_Y_Value) + 2 * R2_Value + 2 * L2_Value,
 800ad5c:	4ba5      	ldr	r3, [pc, #660]	@ (800aff4 <task_2+0x310>)
 800ad5e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ad62:	2b00      	cmp	r3, #0
 800ad64:	bfb8      	it	lt
 800ad66:	425b      	neglt	r3, r3
 800ad68:	b29b      	uxth	r3, r3
 800ad6a:	f203 1377 	addw	r3, r3, #375	@ 0x177
 800ad6e:	005b      	lsls	r3, r3, #1
 800ad70:	4aa1      	ldr	r2, [pc, #644]	@ (800aff8 <task_2+0x314>)
 800ad72:	7812      	ldrb	r2, [r2, #0]
 800ad74:	4413      	add	r3, r2
 800ad76:	4aa1      	ldr	r2, [pc, #644]	@ (800affc <task_2+0x318>)
 800ad78:	7812      	ldrb	r2, [r2, #0]
 800ad7a:	4413      	add	r3, r2
		left_2nd_joint(
 800ad7c:	b29b      	uxth	r3, r3
 800ad7e:	005b      	lsls	r3, r3, #1
 800ad80:	b298      	uxth	r0, r3
				1500,
				1500 + 4 * abs(LStick_Y_Value) + 2 * R2_Value + 2 * L2_Value);
 800ad82:	4b9c      	ldr	r3, [pc, #624]	@ (800aff4 <task_2+0x310>)
 800ad84:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	bfb8      	it	lt
 800ad8c:	425b      	neglt	r3, r3
 800ad8e:	b29b      	uxth	r3, r3
 800ad90:	f203 1377 	addw	r3, r3, #375	@ 0x177
 800ad94:	005b      	lsls	r3, r3, #1
 800ad96:	4a98      	ldr	r2, [pc, #608]	@ (800aff8 <task_2+0x314>)
 800ad98:	7812      	ldrb	r2, [r2, #0]
 800ad9a:	4413      	add	r3, r2
 800ad9c:	4a97      	ldr	r2, [pc, #604]	@ (800affc <task_2+0x318>)
 800ad9e:	7812      	ldrb	r2, [r2, #0]
 800ada0:	4413      	add	r3, r2
		left_2nd_joint(
 800ada2:	b29b      	uxth	r3, r3
 800ada4:	005b      	lsls	r3, r3, #1
 800ada6:	b29b      	uxth	r3, r3
 800ada8:	461a      	mov	r2, r3
 800adaa:	f240 51dc 	movw	r1, #1500	@ 0x5dc
 800adae:	f000 fca3 	bl	800b6f8 <left_2nd_joint>
		right_2nd_joint(1500,
				1500 + 4 * abs(LStick_Y_Value) + 2 * R2_Value + 2 * L2_Value,
 800adb2:	4b90      	ldr	r3, [pc, #576]	@ (800aff4 <task_2+0x310>)
 800adb4:	f9b3 3000 	ldrsh.w	r3, [r3]
 800adb8:	2b00      	cmp	r3, #0
 800adba:	bfb8      	it	lt
 800adbc:	425b      	neglt	r3, r3
 800adbe:	b29b      	uxth	r3, r3
 800adc0:	f203 1377 	addw	r3, r3, #375	@ 0x177
 800adc4:	005b      	lsls	r3, r3, #1
 800adc6:	4a8c      	ldr	r2, [pc, #560]	@ (800aff8 <task_2+0x314>)
 800adc8:	7812      	ldrb	r2, [r2, #0]
 800adca:	4413      	add	r3, r2
 800adcc:	4a8b      	ldr	r2, [pc, #556]	@ (800affc <task_2+0x318>)
 800adce:	7812      	ldrb	r2, [r2, #0]
 800add0:	4413      	add	r3, r2
		right_2nd_joint(1500,
 800add2:	b29b      	uxth	r3, r3
 800add4:	005b      	lsls	r3, r3, #1
 800add6:	b29b      	uxth	r3, r3
 800add8:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 800addc:	4619      	mov	r1, r3
 800adde:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 800ade2:	f000 fc23 	bl	800b62c <right_2nd_joint>
				1500);
		tk_dly_tsk(delayTime);
 800ade6:	89fb      	ldrh	r3, [r7, #14]
 800ade8:	4618      	mov	r0, r3
 800adea:	f7ff fa65 	bl	800a2b8 <tk_dly_tsk>

		//左前出し、右後ろ下げ
		left_1st_joint(1500 + 4 * LStick_Y_Value + 2 * R2_Value - 2 * L2_Value,
 800adee:	4b81      	ldr	r3, [pc, #516]	@ (800aff4 <task_2+0x310>)
 800adf0:	f9b3 3000 	ldrsh.w	r3, [r3]
 800adf4:	f203 1377 	addw	r3, r3, #375	@ 0x177
 800adf8:	005b      	lsls	r3, r3, #1
 800adfa:	4a7f      	ldr	r2, [pc, #508]	@ (800aff8 <task_2+0x314>)
 800adfc:	7812      	ldrb	r2, [r2, #0]
 800adfe:	4413      	add	r3, r2
 800ae00:	4a7e      	ldr	r2, [pc, #504]	@ (800affc <task_2+0x318>)
 800ae02:	7812      	ldrb	r2, [r2, #0]
 800ae04:	1a9b      	subs	r3, r3, r2
 800ae06:	b29b      	uxth	r3, r3
 800ae08:	005b      	lsls	r3, r3, #1
 800ae0a:	b298      	uxth	r0, r3
				1500, 1500 + 4 * LStick_Y_Value + 2 * R2_Value - 2 * L2_Value);
 800ae0c:	4b79      	ldr	r3, [pc, #484]	@ (800aff4 <task_2+0x310>)
 800ae0e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ae12:	f203 1377 	addw	r3, r3, #375	@ 0x177
 800ae16:	005b      	lsls	r3, r3, #1
 800ae18:	4a77      	ldr	r2, [pc, #476]	@ (800aff8 <task_2+0x314>)
 800ae1a:	7812      	ldrb	r2, [r2, #0]
 800ae1c:	4413      	add	r3, r2
 800ae1e:	4a77      	ldr	r2, [pc, #476]	@ (800affc <task_2+0x318>)
 800ae20:	7812      	ldrb	r2, [r2, #0]
 800ae22:	1a9b      	subs	r3, r3, r2
		left_1st_joint(1500 + 4 * LStick_Y_Value + 2 * R2_Value - 2 * L2_Value,
 800ae24:	b29b      	uxth	r3, r3
 800ae26:	005b      	lsls	r3, r3, #1
 800ae28:	b29b      	uxth	r3, r3
 800ae2a:	461a      	mov	r2, r3
 800ae2c:	f240 51dc 	movw	r1, #1500	@ 0x5dc
 800ae30:	f000 fc40 	bl	800b6b4 <left_1st_joint>
		right_1st_joint(1500,
				1500 - 4 * LStick_Y_Value + 2 * R2_Value - 2 * L2_Value, 1500);
 800ae34:	4b6f      	ldr	r3, [pc, #444]	@ (800aff4 <task_2+0x310>)
 800ae36:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ae3a:	461a      	mov	r2, r3
 800ae3c:	f240 1377 	movw	r3, #375	@ 0x177
 800ae40:	1a9b      	subs	r3, r3, r2
 800ae42:	005b      	lsls	r3, r3, #1
 800ae44:	4a6c      	ldr	r2, [pc, #432]	@ (800aff8 <task_2+0x314>)
 800ae46:	7812      	ldrb	r2, [r2, #0]
 800ae48:	4413      	add	r3, r2
 800ae4a:	4a6c      	ldr	r2, [pc, #432]	@ (800affc <task_2+0x318>)
 800ae4c:	7812      	ldrb	r2, [r2, #0]
 800ae4e:	1a9b      	subs	r3, r3, r2
		right_1st_joint(1500,
 800ae50:	b29b      	uxth	r3, r3
 800ae52:	005b      	lsls	r3, r3, #1
 800ae54:	b29b      	uxth	r3, r3
 800ae56:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 800ae5a:	4619      	mov	r1, r3
 800ae5c:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 800ae60:	f000 fbc4 	bl	800b5ec <right_1st_joint>
		tk_dly_tsk(delayTime);
 800ae64:	89fb      	ldrh	r3, [r7, #14]
 800ae66:	4618      	mov	r0, r3
 800ae68:	f7ff fa26 	bl	800a2b8 <tk_dly_tsk>

		//左脚下げ
		left_2nd_joint(1500, 1500, 1500);
 800ae6c:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 800ae70:	f240 51dc 	movw	r1, #1500	@ 0x5dc
 800ae74:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 800ae78:	f000 fc3e 	bl	800b6f8 <left_2nd_joint>
		right_2nd_joint(1500, 1500, 1500);
 800ae7c:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 800ae80:	f240 51dc 	movw	r1, #1500	@ 0x5dc
 800ae84:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 800ae88:	f000 fbd0 	bl	800b62c <right_2nd_joint>
		tk_dly_tsk(delayTime);
 800ae8c:	89fb      	ldrh	r3, [r7, #14]
 800ae8e:	4618      	mov	r0, r3
 800ae90:	f7ff fa12 	bl	800a2b8 <tk_dly_tsk>

		//右脚上げ
		left_2nd_joint(1500,
				1500 + 4 * abs(LStick_Y_Value) + 2 * R2_Value + 2 * L2_Value,
 800ae94:	4b57      	ldr	r3, [pc, #348]	@ (800aff4 <task_2+0x310>)
 800ae96:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	bfb8      	it	lt
 800ae9e:	425b      	neglt	r3, r3
 800aea0:	b29b      	uxth	r3, r3
 800aea2:	f203 1377 	addw	r3, r3, #375	@ 0x177
 800aea6:	005b      	lsls	r3, r3, #1
 800aea8:	4a53      	ldr	r2, [pc, #332]	@ (800aff8 <task_2+0x314>)
 800aeaa:	7812      	ldrb	r2, [r2, #0]
 800aeac:	4413      	add	r3, r2
 800aeae:	4a53      	ldr	r2, [pc, #332]	@ (800affc <task_2+0x318>)
 800aeb0:	7812      	ldrb	r2, [r2, #0]
 800aeb2:	4413      	add	r3, r2
		left_2nd_joint(1500,
 800aeb4:	b29b      	uxth	r3, r3
 800aeb6:	005b      	lsls	r3, r3, #1
 800aeb8:	b29b      	uxth	r3, r3
 800aeba:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 800aebe:	4619      	mov	r1, r3
 800aec0:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 800aec4:	f000 fc18 	bl	800b6f8 <left_2nd_joint>
				1500);
		right_2nd_joint(
				1500 + 4 * abs(LStick_Y_Value) + 2 * R2_Value + 2 * L2_Value,
 800aec8:	4b4a      	ldr	r3, [pc, #296]	@ (800aff4 <task_2+0x310>)
 800aeca:	f9b3 3000 	ldrsh.w	r3, [r3]
 800aece:	2b00      	cmp	r3, #0
 800aed0:	bfb8      	it	lt
 800aed2:	425b      	neglt	r3, r3
 800aed4:	b29b      	uxth	r3, r3
 800aed6:	f203 1377 	addw	r3, r3, #375	@ 0x177
 800aeda:	005b      	lsls	r3, r3, #1
 800aedc:	4a46      	ldr	r2, [pc, #280]	@ (800aff8 <task_2+0x314>)
 800aede:	7812      	ldrb	r2, [r2, #0]
 800aee0:	4413      	add	r3, r2
 800aee2:	4a46      	ldr	r2, [pc, #280]	@ (800affc <task_2+0x318>)
 800aee4:	7812      	ldrb	r2, [r2, #0]
 800aee6:	4413      	add	r3, r2
		right_2nd_joint(
 800aee8:	b29b      	uxth	r3, r3
 800aeea:	005b      	lsls	r3, r3, #1
 800aeec:	b298      	uxth	r0, r3
				1500,
				1500 + 4 * abs(LStick_Y_Value) + 2 * R2_Value + 2 * L2_Value);
 800aeee:	4b41      	ldr	r3, [pc, #260]	@ (800aff4 <task_2+0x310>)
 800aef0:	f9b3 3000 	ldrsh.w	r3, [r3]
 800aef4:	2b00      	cmp	r3, #0
 800aef6:	bfb8      	it	lt
 800aef8:	425b      	neglt	r3, r3
 800aefa:	b29b      	uxth	r3, r3
 800aefc:	f203 1377 	addw	r3, r3, #375	@ 0x177
 800af00:	005b      	lsls	r3, r3, #1
 800af02:	4a3d      	ldr	r2, [pc, #244]	@ (800aff8 <task_2+0x314>)
 800af04:	7812      	ldrb	r2, [r2, #0]
 800af06:	4413      	add	r3, r2
 800af08:	4a3c      	ldr	r2, [pc, #240]	@ (800affc <task_2+0x318>)
 800af0a:	7812      	ldrb	r2, [r2, #0]
 800af0c:	4413      	add	r3, r2
		right_2nd_joint(
 800af0e:	b29b      	uxth	r3, r3
 800af10:	005b      	lsls	r3, r3, #1
 800af12:	b29b      	uxth	r3, r3
 800af14:	461a      	mov	r2, r3
 800af16:	f240 51dc 	movw	r1, #1500	@ 0x5dc
 800af1a:	f000 fb87 	bl	800b62c <right_2nd_joint>
		tk_dly_tsk(delayTime);
 800af1e:	89fb      	ldrh	r3, [r7, #14]
 800af20:	4618      	mov	r0, r3
 800af22:	f7ff f9c9 	bl	800a2b8 <tk_dly_tsk>

		//右前出し、左後ろ下げ
		left_1st_joint(1500,
				1500 + 4 * LStick_Y_Value + 2 * R2_Value - 2 * L2_Value, 1500);
 800af26:	4b33      	ldr	r3, [pc, #204]	@ (800aff4 <task_2+0x310>)
 800af28:	f9b3 3000 	ldrsh.w	r3, [r3]
 800af2c:	f203 1377 	addw	r3, r3, #375	@ 0x177
 800af30:	005b      	lsls	r3, r3, #1
 800af32:	4a31      	ldr	r2, [pc, #196]	@ (800aff8 <task_2+0x314>)
 800af34:	7812      	ldrb	r2, [r2, #0]
 800af36:	4413      	add	r3, r2
 800af38:	4a30      	ldr	r2, [pc, #192]	@ (800affc <task_2+0x318>)
 800af3a:	7812      	ldrb	r2, [r2, #0]
 800af3c:	1a9b      	subs	r3, r3, r2
		left_1st_joint(1500,
 800af3e:	b29b      	uxth	r3, r3
 800af40:	005b      	lsls	r3, r3, #1
 800af42:	b29b      	uxth	r3, r3
 800af44:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 800af48:	4619      	mov	r1, r3
 800af4a:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 800af4e:	f000 fbb1 	bl	800b6b4 <left_1st_joint>
		right_1st_joint(1500 - 4 * LStick_Y_Value + 2 * R2_Value - 2 * L2_Value,
 800af52:	4b28      	ldr	r3, [pc, #160]	@ (800aff4 <task_2+0x310>)
 800af54:	f9b3 3000 	ldrsh.w	r3, [r3]
 800af58:	461a      	mov	r2, r3
 800af5a:	f240 1377 	movw	r3, #375	@ 0x177
 800af5e:	1a9b      	subs	r3, r3, r2
 800af60:	005b      	lsls	r3, r3, #1
 800af62:	4a25      	ldr	r2, [pc, #148]	@ (800aff8 <task_2+0x314>)
 800af64:	7812      	ldrb	r2, [r2, #0]
 800af66:	4413      	add	r3, r2
 800af68:	4a24      	ldr	r2, [pc, #144]	@ (800affc <task_2+0x318>)
 800af6a:	7812      	ldrb	r2, [r2, #0]
 800af6c:	1a9b      	subs	r3, r3, r2
 800af6e:	b29b      	uxth	r3, r3
 800af70:	005b      	lsls	r3, r3, #1
 800af72:	b298      	uxth	r0, r3
				1500, 1500 - 4 * LStick_Y_Value + 2 * R2_Value - 2 * L2_Value);
 800af74:	4b1f      	ldr	r3, [pc, #124]	@ (800aff4 <task_2+0x310>)
 800af76:	f9b3 3000 	ldrsh.w	r3, [r3]
 800af7a:	461a      	mov	r2, r3
 800af7c:	f240 1377 	movw	r3, #375	@ 0x177
 800af80:	1a9b      	subs	r3, r3, r2
 800af82:	005b      	lsls	r3, r3, #1
 800af84:	4a1c      	ldr	r2, [pc, #112]	@ (800aff8 <task_2+0x314>)
 800af86:	7812      	ldrb	r2, [r2, #0]
 800af88:	4413      	add	r3, r2
 800af8a:	4a1c      	ldr	r2, [pc, #112]	@ (800affc <task_2+0x318>)
 800af8c:	7812      	ldrb	r2, [r2, #0]
 800af8e:	1a9b      	subs	r3, r3, r2
		right_1st_joint(1500 - 4 * LStick_Y_Value + 2 * R2_Value - 2 * L2_Value,
 800af90:	b29b      	uxth	r3, r3
 800af92:	005b      	lsls	r3, r3, #1
 800af94:	b29b      	uxth	r3, r3
 800af96:	461a      	mov	r2, r3
 800af98:	f240 51dc 	movw	r1, #1500	@ 0x5dc
 800af9c:	f000 fb26 	bl	800b5ec <right_1st_joint>
		tk_dly_tsk(delayTime);
 800afa0:	89fb      	ldrh	r3, [r7, #14]
 800afa2:	4618      	mov	r0, r3
 800afa4:	f7ff f988 	bl	800a2b8 <tk_dly_tsk>

		//右脚下げ
		left_2nd_joint(1500, 1500, 1500);
 800afa8:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 800afac:	f240 51dc 	movw	r1, #1500	@ 0x5dc
 800afb0:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 800afb4:	f000 fba0 	bl	800b6f8 <left_2nd_joint>
		right_2nd_joint(1500, 1500, 1500);
 800afb8:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 800afbc:	f240 51dc 	movw	r1, #1500	@ 0x5dc
 800afc0:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 800afc4:	f000 fb32 	bl	800b62c <right_2nd_joint>

		left_3rd_joint(1000, 1000, 1000);
 800afc8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800afcc:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800afd0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800afd4:	f000 fbb2 	bl	800b73c <left_3rd_joint>
		right_3rd_joint(1000, 1000, 1000);
 800afd8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800afdc:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800afe0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800afe4:	f000 fb44 	bl	800b670 <right_3rd_joint>
		tk_dly_tsk(delayTime);
 800afe8:	89fb      	ldrh	r3, [r7, #14]
 800afea:	4618      	mov	r0, r3
 800afec:	f7ff f964 	bl	800a2b8 <tk_dly_tsk>
	while (1) {
 800aff0:	bf00      	nop
 800aff2:	e6b3      	b.n	800ad5c <task_2+0x78>
 800aff4:	24001092 	.word	0x24001092
 800aff8:	2400108e 	.word	0x2400108e
 800affc:	2400108d 	.word	0x2400108d

0800b000 <usermain>:
	}
}

/* usermain関数 */
EXPORT INT usermain(void) {
 800b000:	b580      	push	{r7, lr}
 800b002:	af00      	add	r7, sp, #0
	tm_putstring((UB*) "Start User-main program.\n");
 800b004:	4810      	ldr	r0, [pc, #64]	@ (800b048 <usermain+0x48>)
 800b006:	f000 fd07 	bl	800ba18 <tm_putstring>

	/* Create & Start Tasks */
	tskid_1 = tk_cre_tsk(&ctsk_1);
 800b00a:	4810      	ldr	r0, [pc, #64]	@ (800b04c <usermain+0x4c>)
 800b00c:	f7fe ff94 	bl	8009f38 <tk_cre_tsk>
 800b010:	4603      	mov	r3, r0
 800b012:	4a0f      	ldr	r2, [pc, #60]	@ (800b050 <usermain+0x50>)
 800b014:	6013      	str	r3, [r2, #0]
	tk_sta_tsk(tskid_1, 0);
 800b016:	4b0e      	ldr	r3, [pc, #56]	@ (800b050 <usermain+0x50>)
 800b018:	681b      	ldr	r3, [r3, #0]
 800b01a:	2100      	movs	r1, #0
 800b01c:	4618      	mov	r0, r3
 800b01e:	f7ff f839 	bl	800a094 <tk_sta_tsk>

	tskid_2 = tk_cre_tsk(&ctsk_2);
 800b022:	480c      	ldr	r0, [pc, #48]	@ (800b054 <usermain+0x54>)
 800b024:	f7fe ff88 	bl	8009f38 <tk_cre_tsk>
 800b028:	4603      	mov	r3, r0
 800b02a:	4a0b      	ldr	r2, [pc, #44]	@ (800b058 <usermain+0x58>)
 800b02c:	6013      	str	r3, [r2, #0]
	tk_sta_tsk(tskid_2, 0);
 800b02e:	4b0a      	ldr	r3, [pc, #40]	@ (800b058 <usermain+0x58>)
 800b030:	681b      	ldr	r3, [r3, #0]
 800b032:	2100      	movs	r1, #0
 800b034:	4618      	mov	r0, r3
 800b036:	f7ff f82d 	bl	800a094 <tk_sta_tsk>

	tk_slp_tsk(TMO_FEVR);
 800b03a:	f04f 30ff 	mov.w	r0, #4294967295
 800b03e:	f7ff f8cf 	bl	800a1e0 <tk_slp_tsk>

	return 0;
 800b042:	2300      	movs	r3, #0
}
 800b044:	4618      	mov	r0, r3
 800b046:	bd80      	pop	{r7, pc}
 800b048:	0800d014 	.word	0x0800d014
 800b04c:	24000010 	.word	0x24000010
 800b050:	2400109c 	.word	0x2400109c
 800b054:	24000028 	.word	0x24000028
 800b058:	240010a0 	.word	0x240010a0

0800b05c <ControllerRead>:

void ControllerRead() {
 800b05c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b05e:	b0cd      	sub	sp, #308	@ 0x134
 800b060:	af06      	add	r7, sp, #24
	DPad_Right = buffer[0] & 1;
 800b062:	4ba4      	ldr	r3, [pc, #656]	@ (800b2f4 <ControllerRead+0x298>)
 800b064:	781b      	ldrb	r3, [r3, #0]
 800b066:	f003 0301 	and.w	r3, r3, #1
 800b06a:	b2da      	uxtb	r2, r3
 800b06c:	4ba2      	ldr	r3, [pc, #648]	@ (800b2f8 <ControllerRead+0x29c>)
 800b06e:	701a      	strb	r2, [r3, #0]
	DPad_Down = (buffer[0] >> 1) & 1;
 800b070:	4ba0      	ldr	r3, [pc, #640]	@ (800b2f4 <ControllerRead+0x298>)
 800b072:	781b      	ldrb	r3, [r3, #0]
 800b074:	085b      	lsrs	r3, r3, #1
 800b076:	b2db      	uxtb	r3, r3
 800b078:	f003 0301 	and.w	r3, r3, #1
 800b07c:	b2da      	uxtb	r2, r3
 800b07e:	4b9f      	ldr	r3, [pc, #636]	@ (800b2fc <ControllerRead+0x2a0>)
 800b080:	701a      	strb	r2, [r3, #0]
	DPad_Up = (buffer[0] >> 2) & 1;
 800b082:	4b9c      	ldr	r3, [pc, #624]	@ (800b2f4 <ControllerRead+0x298>)
 800b084:	781b      	ldrb	r3, [r3, #0]
 800b086:	089b      	lsrs	r3, r3, #2
 800b088:	b2db      	uxtb	r3, r3
 800b08a:	f003 0301 	and.w	r3, r3, #1
 800b08e:	b2da      	uxtb	r2, r3
 800b090:	4b9b      	ldr	r3, [pc, #620]	@ (800b300 <ControllerRead+0x2a4>)
 800b092:	701a      	strb	r2, [r3, #0]
	DPad_Left = (buffer[0] >> 3) & 1;
 800b094:	4b97      	ldr	r3, [pc, #604]	@ (800b2f4 <ControllerRead+0x298>)
 800b096:	781b      	ldrb	r3, [r3, #0]
 800b098:	08db      	lsrs	r3, r3, #3
 800b09a:	b2db      	uxtb	r3, r3
 800b09c:	f003 0301 	and.w	r3, r3, #1
 800b0a0:	b2da      	uxtb	r2, r3
 800b0a2:	4b98      	ldr	r3, [pc, #608]	@ (800b304 <ControllerRead+0x2a8>)
 800b0a4:	701a      	strb	r2, [r3, #0]
	DPad_UpRight = (buffer[0] >> 4) & 1;
 800b0a6:	4b93      	ldr	r3, [pc, #588]	@ (800b2f4 <ControllerRead+0x298>)
 800b0a8:	781b      	ldrb	r3, [r3, #0]
 800b0aa:	091b      	lsrs	r3, r3, #4
 800b0ac:	b2db      	uxtb	r3, r3
 800b0ae:	f003 0301 	and.w	r3, r3, #1
 800b0b2:	b2da      	uxtb	r2, r3
 800b0b4:	4b94      	ldr	r3, [pc, #592]	@ (800b308 <ControllerRead+0x2ac>)
 800b0b6:	701a      	strb	r2, [r3, #0]
	DPad_DownRight = (buffer[0] >> 5) & 1;
 800b0b8:	4b8e      	ldr	r3, [pc, #568]	@ (800b2f4 <ControllerRead+0x298>)
 800b0ba:	781b      	ldrb	r3, [r3, #0]
 800b0bc:	095b      	lsrs	r3, r3, #5
 800b0be:	b2db      	uxtb	r3, r3
 800b0c0:	f003 0301 	and.w	r3, r3, #1
 800b0c4:	b2da      	uxtb	r2, r3
 800b0c6:	4b91      	ldr	r3, [pc, #580]	@ (800b30c <ControllerRead+0x2b0>)
 800b0c8:	701a      	strb	r2, [r3, #0]
	DPad_UpLeft = (buffer[0] >> 6) & 1;
 800b0ca:	4b8a      	ldr	r3, [pc, #552]	@ (800b2f4 <ControllerRead+0x298>)
 800b0cc:	781b      	ldrb	r3, [r3, #0]
 800b0ce:	099b      	lsrs	r3, r3, #6
 800b0d0:	b2db      	uxtb	r3, r3
 800b0d2:	f003 0301 	and.w	r3, r3, #1
 800b0d6:	b2da      	uxtb	r2, r3
 800b0d8:	4b8d      	ldr	r3, [pc, #564]	@ (800b310 <ControllerRead+0x2b4>)
 800b0da:	701a      	strb	r2, [r3, #0]
	DPad_DownLeft = (buffer[0] >> 7) & 1;
 800b0dc:	4b85      	ldr	r3, [pc, #532]	@ (800b2f4 <ControllerRead+0x298>)
 800b0de:	781b      	ldrb	r3, [r3, #0]
 800b0e0:	09db      	lsrs	r3, r3, #7
 800b0e2:	b2da      	uxtb	r2, r3
 800b0e4:	4b8b      	ldr	r3, [pc, #556]	@ (800b314 <ControllerRead+0x2b8>)
 800b0e6:	701a      	strb	r2, [r3, #0]
	uint8_t d_pad[50];
	sprintf(d_pad, "p-pad: %d, %d, %d, %d, %d, %d, %d, %d\r\n", DPad_Right,
 800b0e8:	4b83      	ldr	r3, [pc, #524]	@ (800b2f8 <ControllerRead+0x29c>)
 800b0ea:	781b      	ldrb	r3, [r3, #0]
 800b0ec:	469c      	mov	ip, r3
 800b0ee:	4b83      	ldr	r3, [pc, #524]	@ (800b2fc <ControllerRead+0x2a0>)
 800b0f0:	781b      	ldrb	r3, [r3, #0]
 800b0f2:	469e      	mov	lr, r3
 800b0f4:	4b82      	ldr	r3, [pc, #520]	@ (800b300 <ControllerRead+0x2a4>)
 800b0f6:	781b      	ldrb	r3, [r3, #0]
 800b0f8:	461a      	mov	r2, r3
 800b0fa:	4b82      	ldr	r3, [pc, #520]	@ (800b304 <ControllerRead+0x2a8>)
 800b0fc:	781b      	ldrb	r3, [r3, #0]
 800b0fe:	4619      	mov	r1, r3
 800b100:	4b81      	ldr	r3, [pc, #516]	@ (800b308 <ControllerRead+0x2ac>)
 800b102:	781b      	ldrb	r3, [r3, #0]
 800b104:	461c      	mov	r4, r3
 800b106:	4b81      	ldr	r3, [pc, #516]	@ (800b30c <ControllerRead+0x2b0>)
 800b108:	781b      	ldrb	r3, [r3, #0]
 800b10a:	461d      	mov	r5, r3
 800b10c:	4b80      	ldr	r3, [pc, #512]	@ (800b310 <ControllerRead+0x2b4>)
 800b10e:	781b      	ldrb	r3, [r3, #0]
 800b110:	461e      	mov	r6, r3
 800b112:	4b80      	ldr	r3, [pc, #512]	@ (800b314 <ControllerRead+0x2b8>)
 800b114:	781b      	ldrb	r3, [r3, #0]
 800b116:	f107 00e4 	add.w	r0, r7, #228	@ 0xe4
 800b11a:	9305      	str	r3, [sp, #20]
 800b11c:	9604      	str	r6, [sp, #16]
 800b11e:	9503      	str	r5, [sp, #12]
 800b120:	9402      	str	r4, [sp, #8]
 800b122:	9101      	str	r1, [sp, #4]
 800b124:	9200      	str	r2, [sp, #0]
 800b126:	4673      	mov	r3, lr
 800b128:	4662      	mov	r2, ip
 800b12a:	497b      	ldr	r1, [pc, #492]	@ (800b318 <ControllerRead+0x2bc>)
 800b12c:	f001 fa2a 	bl	800c584 <siprintf>
			DPad_Down, DPad_Up, DPad_Left, DPad_UpRight, DPad_DownRight,
			DPad_UpLeft, DPad_DownLeft);
	HAL_UART_Transmit(&huart3, d_pad, strlen(d_pad), 0xFFFF);
 800b130:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 800b134:	4618      	mov	r0, r3
 800b136:	f7f5 f947 	bl	80003c8 <strlen>
 800b13a:	4603      	mov	r3, r0
 800b13c:	b29a      	uxth	r2, r3
 800b13e:	f107 01e4 	add.w	r1, r7, #228	@ 0xe4
 800b142:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800b146:	4875      	ldr	r0, [pc, #468]	@ (800b31c <ControllerRead+0x2c0>)
 800b148:	f7fb fcd4 	bl	8006af4 <HAL_UART_Transmit>

	Square_Button = buffer[1] & 1;
 800b14c:	4b69      	ldr	r3, [pc, #420]	@ (800b2f4 <ControllerRead+0x298>)
 800b14e:	785b      	ldrb	r3, [r3, #1]
 800b150:	f003 0301 	and.w	r3, r3, #1
 800b154:	b2da      	uxtb	r2, r3
 800b156:	4b72      	ldr	r3, [pc, #456]	@ (800b320 <ControllerRead+0x2c4>)
 800b158:	701a      	strb	r2, [r3, #0]
	Cross_Button = (buffer[1] >> 1) & 1;
 800b15a:	4b66      	ldr	r3, [pc, #408]	@ (800b2f4 <ControllerRead+0x298>)
 800b15c:	785b      	ldrb	r3, [r3, #1]
 800b15e:	085b      	lsrs	r3, r3, #1
 800b160:	b2db      	uxtb	r3, r3
 800b162:	f003 0301 	and.w	r3, r3, #1
 800b166:	b2da      	uxtb	r2, r3
 800b168:	4b6e      	ldr	r3, [pc, #440]	@ (800b324 <ControllerRead+0x2c8>)
 800b16a:	701a      	strb	r2, [r3, #0]
	Circle_Button = (buffer[1] >> 2) & 1;
 800b16c:	4b61      	ldr	r3, [pc, #388]	@ (800b2f4 <ControllerRead+0x298>)
 800b16e:	785b      	ldrb	r3, [r3, #1]
 800b170:	089b      	lsrs	r3, r3, #2
 800b172:	b2db      	uxtb	r3, r3
 800b174:	f003 0301 	and.w	r3, r3, #1
 800b178:	b2da      	uxtb	r2, r3
 800b17a:	4b6b      	ldr	r3, [pc, #428]	@ (800b328 <ControllerRead+0x2cc>)
 800b17c:	701a      	strb	r2, [r3, #0]
	Triangle_Button = (buffer[1] >> 3) & 1;
 800b17e:	4b5d      	ldr	r3, [pc, #372]	@ (800b2f4 <ControllerRead+0x298>)
 800b180:	785b      	ldrb	r3, [r3, #1]
 800b182:	08db      	lsrs	r3, r3, #3
 800b184:	b2db      	uxtb	r3, r3
 800b186:	f003 0301 	and.w	r3, r3, #1
 800b18a:	b2da      	uxtb	r2, r3
 800b18c:	4b67      	ldr	r3, [pc, #412]	@ (800b32c <ControllerRead+0x2d0>)
 800b18e:	701a      	strb	r2, [r3, #0]
	L1_Button = (buffer[1] >> 4) & 1;
 800b190:	4b58      	ldr	r3, [pc, #352]	@ (800b2f4 <ControllerRead+0x298>)
 800b192:	785b      	ldrb	r3, [r3, #1]
 800b194:	091b      	lsrs	r3, r3, #4
 800b196:	b2db      	uxtb	r3, r3
 800b198:	f003 0301 	and.w	r3, r3, #1
 800b19c:	b2da      	uxtb	r2, r3
 800b19e:	4b64      	ldr	r3, [pc, #400]	@ (800b330 <ControllerRead+0x2d4>)
 800b1a0:	701a      	strb	r2, [r3, #0]
	R1_Button = (buffer[1] >> 5) & 1;
 800b1a2:	4b54      	ldr	r3, [pc, #336]	@ (800b2f4 <ControllerRead+0x298>)
 800b1a4:	785b      	ldrb	r3, [r3, #1]
 800b1a6:	095b      	lsrs	r3, r3, #5
 800b1a8:	b2db      	uxtb	r3, r3
 800b1aa:	f003 0301 	and.w	r3, r3, #1
 800b1ae:	b2da      	uxtb	r2, r3
 800b1b0:	4b60      	ldr	r3, [pc, #384]	@ (800b334 <ControllerRead+0x2d8>)
 800b1b2:	701a      	strb	r2, [r3, #0]
	L3_Button = (buffer[1] >> 6) & 1;
 800b1b4:	4b4f      	ldr	r3, [pc, #316]	@ (800b2f4 <ControllerRead+0x298>)
 800b1b6:	785b      	ldrb	r3, [r3, #1]
 800b1b8:	099b      	lsrs	r3, r3, #6
 800b1ba:	b2db      	uxtb	r3, r3
 800b1bc:	f003 0301 	and.w	r3, r3, #1
 800b1c0:	b2da      	uxtb	r2, r3
 800b1c2:	4b5d      	ldr	r3, [pc, #372]	@ (800b338 <ControllerRead+0x2dc>)
 800b1c4:	701a      	strb	r2, [r3, #0]
	R3_Button = (buffer[1] >> 7) & 1;
 800b1c6:	4b4b      	ldr	r3, [pc, #300]	@ (800b2f4 <ControllerRead+0x298>)
 800b1c8:	785b      	ldrb	r3, [r3, #1]
 800b1ca:	09db      	lsrs	r3, r3, #7
 800b1cc:	b2da      	uxtb	r2, r3
 800b1ce:	4b5b      	ldr	r3, [pc, #364]	@ (800b33c <ControllerRead+0x2e0>)
 800b1d0:	701a      	strb	r2, [r3, #0]
	uint8_t button[50];
	sprintf(button, "button: %d, %d, %d, %d, %d, %d, %d, %d\r\n", Square_Button,
 800b1d2:	4b53      	ldr	r3, [pc, #332]	@ (800b320 <ControllerRead+0x2c4>)
 800b1d4:	781b      	ldrb	r3, [r3, #0]
 800b1d6:	469c      	mov	ip, r3
 800b1d8:	4b52      	ldr	r3, [pc, #328]	@ (800b324 <ControllerRead+0x2c8>)
 800b1da:	781b      	ldrb	r3, [r3, #0]
 800b1dc:	469e      	mov	lr, r3
 800b1de:	4b52      	ldr	r3, [pc, #328]	@ (800b328 <ControllerRead+0x2cc>)
 800b1e0:	781b      	ldrb	r3, [r3, #0]
 800b1e2:	461a      	mov	r2, r3
 800b1e4:	4b51      	ldr	r3, [pc, #324]	@ (800b32c <ControllerRead+0x2d0>)
 800b1e6:	781b      	ldrb	r3, [r3, #0]
 800b1e8:	4619      	mov	r1, r3
 800b1ea:	4b51      	ldr	r3, [pc, #324]	@ (800b330 <ControllerRead+0x2d4>)
 800b1ec:	781b      	ldrb	r3, [r3, #0]
 800b1ee:	461c      	mov	r4, r3
 800b1f0:	4b50      	ldr	r3, [pc, #320]	@ (800b334 <ControllerRead+0x2d8>)
 800b1f2:	781b      	ldrb	r3, [r3, #0]
 800b1f4:	461d      	mov	r5, r3
 800b1f6:	4b50      	ldr	r3, [pc, #320]	@ (800b338 <ControllerRead+0x2dc>)
 800b1f8:	781b      	ldrb	r3, [r3, #0]
 800b1fa:	461e      	mov	r6, r3
 800b1fc:	4b4f      	ldr	r3, [pc, #316]	@ (800b33c <ControllerRead+0x2e0>)
 800b1fe:	781b      	ldrb	r3, [r3, #0]
 800b200:	f107 00b0 	add.w	r0, r7, #176	@ 0xb0
 800b204:	9305      	str	r3, [sp, #20]
 800b206:	9604      	str	r6, [sp, #16]
 800b208:	9503      	str	r5, [sp, #12]
 800b20a:	9402      	str	r4, [sp, #8]
 800b20c:	9101      	str	r1, [sp, #4]
 800b20e:	9200      	str	r2, [sp, #0]
 800b210:	4673      	mov	r3, lr
 800b212:	4662      	mov	r2, ip
 800b214:	494a      	ldr	r1, [pc, #296]	@ (800b340 <ControllerRead+0x2e4>)
 800b216:	f001 f9b5 	bl	800c584 <siprintf>
			Cross_Button, Circle_Button, Triangle_Button, L1_Button, R1_Button,
			L3_Button, R3_Button);
	HAL_UART_Transmit(&huart3, button, strlen(button), 0xFFFF);
 800b21a:	f107 03b0 	add.w	r3, r7, #176	@ 0xb0
 800b21e:	4618      	mov	r0, r3
 800b220:	f7f5 f8d2 	bl	80003c8 <strlen>
 800b224:	4603      	mov	r3, r0
 800b226:	b29a      	uxth	r2, r3
 800b228:	f107 01b0 	add.w	r1, r7, #176	@ 0xb0
 800b22c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800b230:	483a      	ldr	r0, [pc, #232]	@ (800b31c <ControllerRead+0x2c0>)
 800b232:	f7fb fc5f 	bl	8006af4 <HAL_UART_Transmit>

	Share_Button = buffer[2] & 1;
 800b236:	4b2f      	ldr	r3, [pc, #188]	@ (800b2f4 <ControllerRead+0x298>)
 800b238:	789b      	ldrb	r3, [r3, #2]
 800b23a:	f003 0301 	and.w	r3, r3, #1
 800b23e:	b2da      	uxtb	r2, r3
 800b240:	4b40      	ldr	r3, [pc, #256]	@ (800b344 <ControllerRead+0x2e8>)
 800b242:	701a      	strb	r2, [r3, #0]
	Options_Button = (buffer[2] >> 1) & 1;
 800b244:	4b2b      	ldr	r3, [pc, #172]	@ (800b2f4 <ControllerRead+0x298>)
 800b246:	789b      	ldrb	r3, [r3, #2]
 800b248:	085b      	lsrs	r3, r3, #1
 800b24a:	b2db      	uxtb	r3, r3
 800b24c:	f003 0301 	and.w	r3, r3, #1
 800b250:	b2da      	uxtb	r2, r3
 800b252:	4b3d      	ldr	r3, [pc, #244]	@ (800b348 <ControllerRead+0x2ec>)
 800b254:	701a      	strb	r2, [r3, #0]
	PS_Button = (buffer[2] >> 2) & 1;
 800b256:	4b27      	ldr	r3, [pc, #156]	@ (800b2f4 <ControllerRead+0x298>)
 800b258:	789b      	ldrb	r3, [r3, #2]
 800b25a:	089b      	lsrs	r3, r3, #2
 800b25c:	b2db      	uxtb	r3, r3
 800b25e:	f003 0301 	and.w	r3, r3, #1
 800b262:	b2da      	uxtb	r2, r3
 800b264:	4b39      	ldr	r3, [pc, #228]	@ (800b34c <ControllerRead+0x2f0>)
 800b266:	701a      	strb	r2, [r3, #0]
	TouchPad_Button = (buffer[2] >> 3) & 1;
 800b268:	4b22      	ldr	r3, [pc, #136]	@ (800b2f4 <ControllerRead+0x298>)
 800b26a:	789b      	ldrb	r3, [r3, #2]
 800b26c:	08db      	lsrs	r3, r3, #3
 800b26e:	b2db      	uxtb	r3, r3
 800b270:	f003 0301 	and.w	r3, r3, #1
 800b274:	b2da      	uxtb	r2, r3
 800b276:	4b36      	ldr	r3, [pc, #216]	@ (800b350 <ControllerRead+0x2f4>)
 800b278:	701a      	strb	r2, [r3, #0]
	ControllerCharging = (buffer[2] >> 4) & 1;
 800b27a:	4b1e      	ldr	r3, [pc, #120]	@ (800b2f4 <ControllerRead+0x298>)
 800b27c:	789b      	ldrb	r3, [r3, #2]
 800b27e:	091b      	lsrs	r3, r3, #4
 800b280:	b2db      	uxtb	r3, r3
 800b282:	f003 0301 	and.w	r3, r3, #1
 800b286:	b2da      	uxtb	r2, r3
 800b288:	4b32      	ldr	r3, [pc, #200]	@ (800b354 <ControllerRead+0x2f8>)
 800b28a:	701a      	strb	r2, [r3, #0]
	Headphones_atrached = (buffer[2] >> 5) & 1;
 800b28c:	4b19      	ldr	r3, [pc, #100]	@ (800b2f4 <ControllerRead+0x298>)
 800b28e:	789b      	ldrb	r3, [r3, #2]
 800b290:	095b      	lsrs	r3, r3, #5
 800b292:	b2db      	uxtb	r3, r3
 800b294:	f003 0301 	and.w	r3, r3, #1
 800b298:	b2da      	uxtb	r2, r3
 800b29a:	4b2f      	ldr	r3, [pc, #188]	@ (800b358 <ControllerRead+0x2fc>)
 800b29c:	701a      	strb	r2, [r3, #0]
	Mic_attached = (buffer[2] >> 6) & 1;
 800b29e:	4b15      	ldr	r3, [pc, #84]	@ (800b2f4 <ControllerRead+0x298>)
 800b2a0:	789b      	ldrb	r3, [r3, #2]
 800b2a2:	099b      	lsrs	r3, r3, #6
 800b2a4:	b2db      	uxtb	r3, r3
 800b2a6:	f003 0301 	and.w	r3, r3, #1
 800b2aa:	b2da      	uxtb	r2, r3
 800b2ac:	4b2b      	ldr	r3, [pc, #172]	@ (800b35c <ControllerRead+0x300>)
 800b2ae:	701a      	strb	r2, [r3, #0]
	uint8_t option[50];
	sprintf(option, "option: %d, %d, %d, %d, %d, %d, %d\r\n", Share_Button,
 800b2b0:	4b24      	ldr	r3, [pc, #144]	@ (800b344 <ControllerRead+0x2e8>)
 800b2b2:	781b      	ldrb	r3, [r3, #0]
 800b2b4:	461e      	mov	r6, r3
 800b2b6:	4b24      	ldr	r3, [pc, #144]	@ (800b348 <ControllerRead+0x2ec>)
 800b2b8:	781b      	ldrb	r3, [r3, #0]
 800b2ba:	469c      	mov	ip, r3
 800b2bc:	4b23      	ldr	r3, [pc, #140]	@ (800b34c <ControllerRead+0x2f0>)
 800b2be:	781b      	ldrb	r3, [r3, #0]
 800b2c0:	461a      	mov	r2, r3
 800b2c2:	4b23      	ldr	r3, [pc, #140]	@ (800b350 <ControllerRead+0x2f4>)
 800b2c4:	781b      	ldrb	r3, [r3, #0]
 800b2c6:	4619      	mov	r1, r3
 800b2c8:	4b22      	ldr	r3, [pc, #136]	@ (800b354 <ControllerRead+0x2f8>)
 800b2ca:	781b      	ldrb	r3, [r3, #0]
 800b2cc:	461c      	mov	r4, r3
 800b2ce:	4b22      	ldr	r3, [pc, #136]	@ (800b358 <ControllerRead+0x2fc>)
 800b2d0:	781b      	ldrb	r3, [r3, #0]
 800b2d2:	461d      	mov	r5, r3
 800b2d4:	4b21      	ldr	r3, [pc, #132]	@ (800b35c <ControllerRead+0x300>)
 800b2d6:	781b      	ldrb	r3, [r3, #0]
 800b2d8:	f107 007c 	add.w	r0, r7, #124	@ 0x7c
 800b2dc:	9304      	str	r3, [sp, #16]
 800b2de:	9503      	str	r5, [sp, #12]
 800b2e0:	9402      	str	r4, [sp, #8]
 800b2e2:	9101      	str	r1, [sp, #4]
 800b2e4:	9200      	str	r2, [sp, #0]
 800b2e6:	4663      	mov	r3, ip
 800b2e8:	4632      	mov	r2, r6
 800b2ea:	491d      	ldr	r1, [pc, #116]	@ (800b360 <ControllerRead+0x304>)
 800b2ec:	f001 f94a 	bl	800c584 <siprintf>
 800b2f0:	e038      	b.n	800b364 <ControllerRead+0x308>
 800b2f2:	bf00      	nop
 800b2f4:	2400106c 	.word	0x2400106c
 800b2f8:	24001076 	.word	0x24001076
 800b2fc:	24001077 	.word	0x24001077
 800b300:	24001078 	.word	0x24001078
 800b304:	24001079 	.word	0x24001079
 800b308:	2400107a 	.word	0x2400107a
 800b30c:	2400107b 	.word	0x2400107b
 800b310:	2400107c 	.word	0x2400107c
 800b314:	2400107d 	.word	0x2400107d
 800b318:	0800d030 	.word	0x0800d030
 800b31c:	24000fc0 	.word	0x24000fc0
 800b320:	2400107e 	.word	0x2400107e
 800b324:	2400107f 	.word	0x2400107f
 800b328:	24001080 	.word	0x24001080
 800b32c:	24001081 	.word	0x24001081
 800b330:	24001082 	.word	0x24001082
 800b334:	24001083 	.word	0x24001083
 800b338:	24001084 	.word	0x24001084
 800b33c:	24001085 	.word	0x24001085
 800b340:	0800d058 	.word	0x0800d058
 800b344:	24001086 	.word	0x24001086
 800b348:	24001087 	.word	0x24001087
 800b34c:	24001088 	.word	0x24001088
 800b350:	24001089 	.word	0x24001089
 800b354:	2400108a 	.word	0x2400108a
 800b358:	2400108b 	.word	0x2400108b
 800b35c:	2400108c 	.word	0x2400108c
 800b360:	0800d084 	.word	0x0800d084
			Options_Button, PS_Button, TouchPad_Button, ControllerCharging,
			Headphones_atrached, Mic_attached);
	HAL_UART_Transmit(&huart3, option, strlen(option), 0xFFFF);
 800b364:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 800b368:	4618      	mov	r0, r3
 800b36a:	f7f5 f82d 	bl	80003c8 <strlen>
 800b36e:	4603      	mov	r3, r0
 800b370:	b29a      	uxth	r2, r3
 800b372:	f107 017c 	add.w	r1, r7, #124	@ 0x7c
 800b376:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800b37a:	488b      	ldr	r0, [pc, #556]	@ (800b5a8 <ControllerRead+0x54c>)
 800b37c:	f7fb fbba 	bl	8006af4 <HAL_UART_Transmit>

	L2_Value = buffer[3];
 800b380:	4b8a      	ldr	r3, [pc, #552]	@ (800b5ac <ControllerRead+0x550>)
 800b382:	78da      	ldrb	r2, [r3, #3]
 800b384:	4b8a      	ldr	r3, [pc, #552]	@ (800b5b0 <ControllerRead+0x554>)
 800b386:	701a      	strb	r2, [r3, #0]
	uint8_t L2[10];
	sprintf(L2, "L2: %d\r\n", L2_Value, strlen(L2), 0xFFFF);
 800b388:	4b89      	ldr	r3, [pc, #548]	@ (800b5b0 <ControllerRead+0x554>)
 800b38a:	781b      	ldrb	r3, [r3, #0]
 800b38c:	461c      	mov	r4, r3
 800b38e:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 800b392:	4618      	mov	r0, r3
 800b394:	f7f5 f818 	bl	80003c8 <strlen>
 800b398:	4603      	mov	r3, r0
 800b39a:	f107 0070 	add.w	r0, r7, #112	@ 0x70
 800b39e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800b3a2:	9200      	str	r2, [sp, #0]
 800b3a4:	4622      	mov	r2, r4
 800b3a6:	4983      	ldr	r1, [pc, #524]	@ (800b5b4 <ControllerRead+0x558>)
 800b3a8:	f001 f8ec 	bl	800c584 <siprintf>
	HAL_UART_Transmit(&huart3, L2, strlen(L2), 0xFFFF);
 800b3ac:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 800b3b0:	4618      	mov	r0, r3
 800b3b2:	f7f5 f809 	bl	80003c8 <strlen>
 800b3b6:	4603      	mov	r3, r0
 800b3b8:	b29a      	uxth	r2, r3
 800b3ba:	f107 0170 	add.w	r1, r7, #112	@ 0x70
 800b3be:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800b3c2:	4879      	ldr	r0, [pc, #484]	@ (800b5a8 <ControllerRead+0x54c>)
 800b3c4:	f7fb fb96 	bl	8006af4 <HAL_UART_Transmit>

	R2_Value = buffer[4];
 800b3c8:	4b78      	ldr	r3, [pc, #480]	@ (800b5ac <ControllerRead+0x550>)
 800b3ca:	791a      	ldrb	r2, [r3, #4]
 800b3cc:	4b7a      	ldr	r3, [pc, #488]	@ (800b5b8 <ControllerRead+0x55c>)
 800b3ce:	701a      	strb	r2, [r3, #0]
	uint8_t R2[10];
	sprintf(R2, "R2: %d\r\n", R2_Value, strlen(R2), 0xFFFF);
 800b3d0:	4b79      	ldr	r3, [pc, #484]	@ (800b5b8 <ControllerRead+0x55c>)
 800b3d2:	781b      	ldrb	r3, [r3, #0]
 800b3d4:	461c      	mov	r4, r3
 800b3d6:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800b3da:	4618      	mov	r0, r3
 800b3dc:	f7f4 fff4 	bl	80003c8 <strlen>
 800b3e0:	4603      	mov	r3, r0
 800b3e2:	f107 0064 	add.w	r0, r7, #100	@ 0x64
 800b3e6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800b3ea:	9200      	str	r2, [sp, #0]
 800b3ec:	4622      	mov	r2, r4
 800b3ee:	4973      	ldr	r1, [pc, #460]	@ (800b5bc <ControllerRead+0x560>)
 800b3f0:	f001 f8c8 	bl	800c584 <siprintf>
	HAL_UART_Transmit(&huart3, R2, strlen(R2), 0xFFFF);
 800b3f4:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800b3f8:	4618      	mov	r0, r3
 800b3fa:	f7f4 ffe5 	bl	80003c8 <strlen>
 800b3fe:	4603      	mov	r3, r0
 800b400:	b29a      	uxth	r2, r3
 800b402:	f107 0164 	add.w	r1, r7, #100	@ 0x64
 800b406:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800b40a:	4867      	ldr	r0, [pc, #412]	@ (800b5a8 <ControllerRead+0x54c>)
 800b40c:	f7fb fb72 	bl	8006af4 <HAL_UART_Transmit>

	LStick_X_Value = buffer[5] - 128;
 800b410:	4b66      	ldr	r3, [pc, #408]	@ (800b5ac <ControllerRead+0x550>)
 800b412:	795b      	ldrb	r3, [r3, #5]
 800b414:	3b80      	subs	r3, #128	@ 0x80
 800b416:	b29b      	uxth	r3, r3
 800b418:	b21a      	sxth	r2, r3
 800b41a:	4b69      	ldr	r3, [pc, #420]	@ (800b5c0 <ControllerRead+0x564>)
 800b41c:	801a      	strh	r2, [r3, #0]
	uint8_t L_X[20];
	sprintf(L_X, "LStick_X: %d\r\n", LStick_X_Value, strlen(L_X), 0xFFFF);
 800b41e:	4b68      	ldr	r3, [pc, #416]	@ (800b5c0 <ControllerRead+0x564>)
 800b420:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b424:	461c      	mov	r4, r3
 800b426:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800b42a:	4618      	mov	r0, r3
 800b42c:	f7f4 ffcc 	bl	80003c8 <strlen>
 800b430:	4603      	mov	r3, r0
 800b432:	f107 0050 	add.w	r0, r7, #80	@ 0x50
 800b436:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800b43a:	9200      	str	r2, [sp, #0]
 800b43c:	4622      	mov	r2, r4
 800b43e:	4961      	ldr	r1, [pc, #388]	@ (800b5c4 <ControllerRead+0x568>)
 800b440:	f001 f8a0 	bl	800c584 <siprintf>
	HAL_UART_Transmit(&huart3, L_X, strlen(L_X), 0xFFFF);
 800b444:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800b448:	4618      	mov	r0, r3
 800b44a:	f7f4 ffbd 	bl	80003c8 <strlen>
 800b44e:	4603      	mov	r3, r0
 800b450:	b29a      	uxth	r2, r3
 800b452:	f107 0150 	add.w	r1, r7, #80	@ 0x50
 800b456:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800b45a:	4853      	ldr	r0, [pc, #332]	@ (800b5a8 <ControllerRead+0x54c>)
 800b45c:	f7fb fb4a 	bl	8006af4 <HAL_UART_Transmit>

	LStick_Y_Value = buffer[6] - 128;
 800b460:	4b52      	ldr	r3, [pc, #328]	@ (800b5ac <ControllerRead+0x550>)
 800b462:	799b      	ldrb	r3, [r3, #6]
 800b464:	3b80      	subs	r3, #128	@ 0x80
 800b466:	b29b      	uxth	r3, r3
 800b468:	b21a      	sxth	r2, r3
 800b46a:	4b57      	ldr	r3, [pc, #348]	@ (800b5c8 <ControllerRead+0x56c>)
 800b46c:	801a      	strh	r2, [r3, #0]
	uint8_t L_Y[20];
	sprintf(L_Y, "LStick_Y: %d\r\n", LStick_Y_Value, strlen(L_Y), 0xFFFF);
 800b46e:	4b56      	ldr	r3, [pc, #344]	@ (800b5c8 <ControllerRead+0x56c>)
 800b470:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b474:	461c      	mov	r4, r3
 800b476:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800b47a:	4618      	mov	r0, r3
 800b47c:	f7f4 ffa4 	bl	80003c8 <strlen>
 800b480:	4603      	mov	r3, r0
 800b482:	f107 003c 	add.w	r0, r7, #60	@ 0x3c
 800b486:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800b48a:	9200      	str	r2, [sp, #0]
 800b48c:	4622      	mov	r2, r4
 800b48e:	494f      	ldr	r1, [pc, #316]	@ (800b5cc <ControllerRead+0x570>)
 800b490:	f001 f878 	bl	800c584 <siprintf>
	HAL_UART_Transmit(&huart3, L_Y, strlen(L_Y), 0xFFFF);
 800b494:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800b498:	4618      	mov	r0, r3
 800b49a:	f7f4 ff95 	bl	80003c8 <strlen>
 800b49e:	4603      	mov	r3, r0
 800b4a0:	b29a      	uxth	r2, r3
 800b4a2:	f107 013c 	add.w	r1, r7, #60	@ 0x3c
 800b4a6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800b4aa:	483f      	ldr	r0, [pc, #252]	@ (800b5a8 <ControllerRead+0x54c>)
 800b4ac:	f7fb fb22 	bl	8006af4 <HAL_UART_Transmit>

	RStick_X_Value = buffer[7] - 128;
 800b4b0:	4b3e      	ldr	r3, [pc, #248]	@ (800b5ac <ControllerRead+0x550>)
 800b4b2:	79db      	ldrb	r3, [r3, #7]
 800b4b4:	3b80      	subs	r3, #128	@ 0x80
 800b4b6:	b29b      	uxth	r3, r3
 800b4b8:	b21a      	sxth	r2, r3
 800b4ba:	4b45      	ldr	r3, [pc, #276]	@ (800b5d0 <ControllerRead+0x574>)
 800b4bc:	801a      	strh	r2, [r3, #0]
	uint8_t R_X[20];
	sprintf(R_X, "RStick_X: %d\r\n", RStick_X_Value, strlen(R_X), 0xFFFF);
 800b4be:	4b44      	ldr	r3, [pc, #272]	@ (800b5d0 <ControllerRead+0x574>)
 800b4c0:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b4c4:	461c      	mov	r4, r3
 800b4c6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800b4ca:	4618      	mov	r0, r3
 800b4cc:	f7f4 ff7c 	bl	80003c8 <strlen>
 800b4d0:	4603      	mov	r3, r0
 800b4d2:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 800b4d6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800b4da:	9200      	str	r2, [sp, #0]
 800b4dc:	4622      	mov	r2, r4
 800b4de:	493d      	ldr	r1, [pc, #244]	@ (800b5d4 <ControllerRead+0x578>)
 800b4e0:	f001 f850 	bl	800c584 <siprintf>
	HAL_UART_Transmit(&huart3, R_X, strlen(R_X), 0xFFFF);
 800b4e4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800b4e8:	4618      	mov	r0, r3
 800b4ea:	f7f4 ff6d 	bl	80003c8 <strlen>
 800b4ee:	4603      	mov	r3, r0
 800b4f0:	b29a      	uxth	r2, r3
 800b4f2:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 800b4f6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800b4fa:	482b      	ldr	r0, [pc, #172]	@ (800b5a8 <ControllerRead+0x54c>)
 800b4fc:	f7fb fafa 	bl	8006af4 <HAL_UART_Transmit>

	RStick_Y_Value = buffer[8] - 128;
 800b500:	4b2a      	ldr	r3, [pc, #168]	@ (800b5ac <ControllerRead+0x550>)
 800b502:	7a1b      	ldrb	r3, [r3, #8]
 800b504:	3b80      	subs	r3, #128	@ 0x80
 800b506:	b29b      	uxth	r3, r3
 800b508:	b21a      	sxth	r2, r3
 800b50a:	4b33      	ldr	r3, [pc, #204]	@ (800b5d8 <ControllerRead+0x57c>)
 800b50c:	801a      	strh	r2, [r3, #0]
	uint8_t R_Y[20];
	sprintf(R_Y, "RStick_Y: %d\r\n", RStick_Y_Value, strlen(R_Y), 0xFFFF);
 800b50e:	4b32      	ldr	r3, [pc, #200]	@ (800b5d8 <ControllerRead+0x57c>)
 800b510:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b514:	461c      	mov	r4, r3
 800b516:	f107 0314 	add.w	r3, r7, #20
 800b51a:	4618      	mov	r0, r3
 800b51c:	f7f4 ff54 	bl	80003c8 <strlen>
 800b520:	4603      	mov	r3, r0
 800b522:	f107 0014 	add.w	r0, r7, #20
 800b526:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800b52a:	9200      	str	r2, [sp, #0]
 800b52c:	4622      	mov	r2, r4
 800b52e:	492b      	ldr	r1, [pc, #172]	@ (800b5dc <ControllerRead+0x580>)
 800b530:	f001 f828 	bl	800c584 <siprintf>
	HAL_UART_Transmit(&huart3, R_Y, strlen(R_Y), 0xFFFF);
 800b534:	f107 0314 	add.w	r3, r7, #20
 800b538:	4618      	mov	r0, r3
 800b53a:	f7f4 ff45 	bl	80003c8 <strlen>
 800b53e:	4603      	mov	r3, r0
 800b540:	b29a      	uxth	r2, r3
 800b542:	f107 0114 	add.w	r1, r7, #20
 800b546:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800b54a:	4817      	ldr	r0, [pc, #92]	@ (800b5a8 <ControllerRead+0x54c>)
 800b54c:	f7fb fad2 	bl	8006af4 <HAL_UART_Transmit>

	BatteryLevel = buffer[9];
 800b550:	4b16      	ldr	r3, [pc, #88]	@ (800b5ac <ControllerRead+0x550>)
 800b552:	7a5a      	ldrb	r2, [r3, #9]
 800b554:	4b22      	ldr	r3, [pc, #136]	@ (800b5e0 <ControllerRead+0x584>)
 800b556:	701a      	strb	r2, [r3, #0]
	uint8_t Batt[20];
	sprintf(Batt, "BatteryLevel: %d\r\n", BatteryLevel, strlen(Batt), 0xFFFF);
 800b558:	4b21      	ldr	r3, [pc, #132]	@ (800b5e0 <ControllerRead+0x584>)
 800b55a:	781b      	ldrb	r3, [r3, #0]
 800b55c:	461c      	mov	r4, r3
 800b55e:	463b      	mov	r3, r7
 800b560:	4618      	mov	r0, r3
 800b562:	f7f4 ff31 	bl	80003c8 <strlen>
 800b566:	4603      	mov	r3, r0
 800b568:	4638      	mov	r0, r7
 800b56a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800b56e:	9200      	str	r2, [sp, #0]
 800b570:	4622      	mov	r2, r4
 800b572:	491c      	ldr	r1, [pc, #112]	@ (800b5e4 <ControllerRead+0x588>)
 800b574:	f001 f806 	bl	800c584 <siprintf>
	HAL_UART_Transmit(&huart3, Batt, strlen(Batt), 0xFFFF);
 800b578:	463b      	mov	r3, r7
 800b57a:	4618      	mov	r0, r3
 800b57c:	f7f4 ff24 	bl	80003c8 <strlen>
 800b580:	4603      	mov	r3, r0
 800b582:	b29a      	uxth	r2, r3
 800b584:	4639      	mov	r1, r7
 800b586:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800b58a:	4807      	ldr	r0, [pc, #28]	@ (800b5a8 <ControllerRead+0x54c>)
 800b58c:	f7fb fab2 	bl	8006af4 <HAL_UART_Transmit>

	HAL_UART_Transmit(&huart3, "\r\n", 4, 10);
 800b590:	230a      	movs	r3, #10
 800b592:	2204      	movs	r2, #4
 800b594:	4914      	ldr	r1, [pc, #80]	@ (800b5e8 <ControllerRead+0x58c>)
 800b596:	4804      	ldr	r0, [pc, #16]	@ (800b5a8 <ControllerRead+0x54c>)
 800b598:	f7fb faac 	bl	8006af4 <HAL_UART_Transmit>
}
 800b59c:	bf00      	nop
 800b59e:	f507 778e 	add.w	r7, r7, #284	@ 0x11c
 800b5a2:	46bd      	mov	sp, r7
 800b5a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b5a6:	bf00      	nop
 800b5a8:	24000fc0 	.word	0x24000fc0
 800b5ac:	2400106c 	.word	0x2400106c
 800b5b0:	2400108d 	.word	0x2400108d
 800b5b4:	0800d0ac 	.word	0x0800d0ac
 800b5b8:	2400108e 	.word	0x2400108e
 800b5bc:	0800d0b8 	.word	0x0800d0b8
 800b5c0:	24001090 	.word	0x24001090
 800b5c4:	0800d0c4 	.word	0x0800d0c4
 800b5c8:	24001092 	.word	0x24001092
 800b5cc:	0800d0d4 	.word	0x0800d0d4
 800b5d0:	24001094 	.word	0x24001094
 800b5d4:	0800d0e4 	.word	0x0800d0e4
 800b5d8:	24001096 	.word	0x24001096
 800b5dc:	0800d0f4 	.word	0x0800d0f4
 800b5e0:	24001098 	.word	0x24001098
 800b5e4:	0800d104 	.word	0x0800d104
 800b5e8:	0800d118 	.word	0x0800d118

0800b5ec <right_1st_joint>:

void right_1st_joint(uint16_t front, uint16_t middle, uint16_t rear) {
 800b5ec:	b480      	push	{r7}
 800b5ee:	b083      	sub	sp, #12
 800b5f0:	af00      	add	r7, sp, #0
 800b5f2:	4603      	mov	r3, r0
 800b5f4:	80fb      	strh	r3, [r7, #6]
 800b5f6:	460b      	mov	r3, r1
 800b5f8:	80bb      	strh	r3, [r7, #4]
 800b5fa:	4613      	mov	r3, r2
 800b5fc:	807b      	strh	r3, [r7, #2]
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, front);
 800b5fe:	4b09      	ldr	r3, [pc, #36]	@ (800b624 <right_1st_joint+0x38>)
 800b600:	681b      	ldr	r3, [r3, #0]
 800b602:	88fa      	ldrh	r2, [r7, #6]
 800b604:	635a      	str	r2, [r3, #52]	@ 0x34
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, middle);
 800b606:	4b07      	ldr	r3, [pc, #28]	@ (800b624 <right_1st_joint+0x38>)
 800b608:	681b      	ldr	r3, [r3, #0]
 800b60a:	88ba      	ldrh	r2, [r7, #4]
 800b60c:	641a      	str	r2, [r3, #64]	@ 0x40
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, rear);
 800b60e:	4b06      	ldr	r3, [pc, #24]	@ (800b628 <right_1st_joint+0x3c>)
 800b610:	681b      	ldr	r3, [r3, #0]
 800b612:	887a      	ldrh	r2, [r7, #2]
 800b614:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800b616:	bf00      	nop
 800b618:	370c      	adds	r7, #12
 800b61a:	46bd      	mov	sp, r7
 800b61c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b620:	4770      	bx	lr
 800b622:	bf00      	nop
 800b624:	24000d64 	.word	0x24000d64
 800b628:	24000db0 	.word	0x24000db0

0800b62c <right_2nd_joint>:

void right_2nd_joint(uint16_t front, uint16_t middle, uint16_t rear) {
 800b62c:	b480      	push	{r7}
 800b62e:	b083      	sub	sp, #12
 800b630:	af00      	add	r7, sp, #0
 800b632:	4603      	mov	r3, r0
 800b634:	80fb      	strh	r3, [r7, #6]
 800b636:	460b      	mov	r3, r1
 800b638:	80bb      	strh	r3, [r7, #4]
 800b63a:	4613      	mov	r3, r2
 800b63c:	807b      	strh	r3, [r7, #2]
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, front);
 800b63e:	4b09      	ldr	r3, [pc, #36]	@ (800b664 <right_2nd_joint+0x38>)
 800b640:	681b      	ldr	r3, [r3, #0]
 800b642:	88fa      	ldrh	r2, [r7, #6]
 800b644:	639a      	str	r2, [r3, #56]	@ 0x38
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, middle);
 800b646:	4b08      	ldr	r3, [pc, #32]	@ (800b668 <right_2nd_joint+0x3c>)
 800b648:	681b      	ldr	r3, [r3, #0]
 800b64a:	88ba      	ldrh	r2, [r7, #4]
 800b64c:	635a      	str	r2, [r3, #52]	@ 0x34
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, rear);
 800b64e:	4b07      	ldr	r3, [pc, #28]	@ (800b66c <right_2nd_joint+0x40>)
 800b650:	681b      	ldr	r3, [r3, #0]
 800b652:	887a      	ldrh	r2, [r7, #2]
 800b654:	635a      	str	r2, [r3, #52]	@ 0x34
}
 800b656:	bf00      	nop
 800b658:	370c      	adds	r7, #12
 800b65a:	46bd      	mov	sp, r7
 800b65c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b660:	4770      	bx	lr
 800b662:	bf00      	nop
 800b664:	24000d64 	.word	0x24000d64
 800b668:	24000db0 	.word	0x24000db0
 800b66c:	24000dfc 	.word	0x24000dfc

0800b670 <right_3rd_joint>:

void right_3rd_joint(uint16_t front, uint16_t middle, uint16_t rear) {
 800b670:	b480      	push	{r7}
 800b672:	b083      	sub	sp, #12
 800b674:	af00      	add	r7, sp, #0
 800b676:	4603      	mov	r3, r0
 800b678:	80fb      	strh	r3, [r7, #6]
 800b67a:	460b      	mov	r3, r1
 800b67c:	80bb      	strh	r3, [r7, #4]
 800b67e:	4613      	mov	r3, r2
 800b680:	807b      	strh	r3, [r7, #2]
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, front);
 800b682:	4b09      	ldr	r3, [pc, #36]	@ (800b6a8 <right_3rd_joint+0x38>)
 800b684:	681b      	ldr	r3, [r3, #0]
 800b686:	88fa      	ldrh	r2, [r7, #6]
 800b688:	63da      	str	r2, [r3, #60]	@ 0x3c
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, middle);
 800b68a:	4b08      	ldr	r3, [pc, #32]	@ (800b6ac <right_3rd_joint+0x3c>)
 800b68c:	681b      	ldr	r3, [r3, #0]
 800b68e:	88ba      	ldrh	r2, [r7, #4]
 800b690:	63da      	str	r2, [r3, #60]	@ 0x3c
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, rear);
 800b692:	4b07      	ldr	r3, [pc, #28]	@ (800b6b0 <right_3rd_joint+0x40>)
 800b694:	681b      	ldr	r3, [r3, #0]
 800b696:	887a      	ldrh	r2, [r7, #2]
 800b698:	639a      	str	r2, [r3, #56]	@ 0x38
}
 800b69a:	bf00      	nop
 800b69c:	370c      	adds	r7, #12
 800b69e:	46bd      	mov	sp, r7
 800b6a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6a4:	4770      	bx	lr
 800b6a6:	bf00      	nop
 800b6a8:	24000d64 	.word	0x24000d64
 800b6ac:	24000db0 	.word	0x24000db0
 800b6b0:	24000dfc 	.word	0x24000dfc

0800b6b4 <left_1st_joint>:

void left_1st_joint(uint16_t front, uint16_t middle, uint16_t rear) {
 800b6b4:	b480      	push	{r7}
 800b6b6:	b083      	sub	sp, #12
 800b6b8:	af00      	add	r7, sp, #0
 800b6ba:	4603      	mov	r3, r0
 800b6bc:	80fb      	strh	r3, [r7, #6]
 800b6be:	460b      	mov	r3, r1
 800b6c0:	80bb      	strh	r3, [r7, #4]
 800b6c2:	4613      	mov	r3, r2
 800b6c4:	807b      	strh	r3, [r7, #2]
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, front);
 800b6c6:	4b09      	ldr	r3, [pc, #36]	@ (800b6ec <left_1st_joint+0x38>)
 800b6c8:	681b      	ldr	r3, [r3, #0]
 800b6ca:	88fa      	ldrh	r2, [r7, #6]
 800b6cc:	63da      	str	r2, [r3, #60]	@ 0x3c
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, middle);
 800b6ce:	4b08      	ldr	r3, [pc, #32]	@ (800b6f0 <left_1st_joint+0x3c>)
 800b6d0:	681b      	ldr	r3, [r3, #0]
 800b6d2:	88ba      	ldrh	r2, [r7, #4]
 800b6d4:	639a      	str	r2, [r3, #56]	@ 0x38
	__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, rear);
 800b6d6:	4b07      	ldr	r3, [pc, #28]	@ (800b6f4 <left_1st_joint+0x40>)
 800b6d8:	681b      	ldr	r3, [r3, #0]
 800b6da:	887a      	ldrh	r2, [r7, #2]
 800b6dc:	635a      	str	r2, [r3, #52]	@ 0x34
}
 800b6de:	bf00      	nop
 800b6e0:	370c      	adds	r7, #12
 800b6e2:	46bd      	mov	sp, r7
 800b6e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6e8:	4770      	bx	lr
 800b6ea:	bf00      	nop
 800b6ec:	24000dfc 	.word	0x24000dfc
 800b6f0:	24000e48 	.word	0x24000e48
 800b6f4:	24000e94 	.word	0x24000e94

0800b6f8 <left_2nd_joint>:

void left_2nd_joint(uint16_t front, uint16_t middle, uint16_t rear) {
 800b6f8:	b480      	push	{r7}
 800b6fa:	b083      	sub	sp, #12
 800b6fc:	af00      	add	r7, sp, #0
 800b6fe:	4603      	mov	r3, r0
 800b700:	80fb      	strh	r3, [r7, #6]
 800b702:	460b      	mov	r3, r1
 800b704:	80bb      	strh	r3, [r7, #4]
 800b706:	4613      	mov	r3, r2
 800b708:	807b      	strh	r3, [r7, #2]
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, front);
 800b70a:	4b09      	ldr	r3, [pc, #36]	@ (800b730 <left_2nd_joint+0x38>)
 800b70c:	681b      	ldr	r3, [r3, #0]
 800b70e:	88fa      	ldrh	r2, [r7, #6]
 800b710:	641a      	str	r2, [r3, #64]	@ 0x40
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, middle);
 800b712:	4b08      	ldr	r3, [pc, #32]	@ (800b734 <left_2nd_joint+0x3c>)
 800b714:	681b      	ldr	r3, [r3, #0]
 800b716:	88ba      	ldrh	r2, [r7, #4]
 800b718:	63da      	str	r2, [r3, #60]	@ 0x3c
	__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_4, rear);
 800b71a:	4b07      	ldr	r3, [pc, #28]	@ (800b738 <left_2nd_joint+0x40>)
 800b71c:	681b      	ldr	r3, [r3, #0]
 800b71e:	887a      	ldrh	r2, [r7, #2]
 800b720:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800b722:	bf00      	nop
 800b724:	370c      	adds	r7, #12
 800b726:	46bd      	mov	sp, r7
 800b728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b72c:	4770      	bx	lr
 800b72e:	bf00      	nop
 800b730:	24000dfc 	.word	0x24000dfc
 800b734:	24000e48 	.word	0x24000e48
 800b738:	24000e94 	.word	0x24000e94

0800b73c <left_3rd_joint>:

void left_3rd_joint(uint16_t front, uint16_t middle, uint16_t rear) {
 800b73c:	b480      	push	{r7}
 800b73e:	b083      	sub	sp, #12
 800b740:	af00      	add	r7, sp, #0
 800b742:	4603      	mov	r3, r0
 800b744:	80fb      	strh	r3, [r7, #6]
 800b746:	460b      	mov	r3, r1
 800b748:	80bb      	strh	r3, [r7, #4]
 800b74a:	4613      	mov	r3, r2
 800b74c:	807b      	strh	r3, [r7, #2]
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, front);
 800b74e:	4b09      	ldr	r3, [pc, #36]	@ (800b774 <left_3rd_joint+0x38>)
 800b750:	681b      	ldr	r3, [r3, #0]
 800b752:	88fa      	ldrh	r2, [r7, #6]
 800b754:	635a      	str	r2, [r3, #52]	@ 0x34
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, middle);
 800b756:	4b07      	ldr	r3, [pc, #28]	@ (800b774 <left_3rd_joint+0x38>)
 800b758:	681b      	ldr	r3, [r3, #0]
 800b75a:	88ba      	ldrh	r2, [r7, #4]
 800b75c:	641a      	str	r2, [r3, #64]	@ 0x40
	__HAL_TIM_SET_COMPARE(&htim12, TIM_CHANNEL_2, rear);
 800b75e:	4b06      	ldr	r3, [pc, #24]	@ (800b778 <left_3rd_joint+0x3c>)
 800b760:	681b      	ldr	r3, [r3, #0]
 800b762:	887a      	ldrh	r2, [r7, #2]
 800b764:	639a      	str	r2, [r3, #56]	@ 0x38
}
 800b766:	bf00      	nop
 800b768:	370c      	adds	r7, #12
 800b76a:	46bd      	mov	sp, r7
 800b76c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b770:	4770      	bx	lr
 800b772:	bf00      	nop
 800b774:	24000e48 	.word	0x24000e48
 800b778:	24000ee0 	.word	0x24000ee0

0800b77c <INC>:
 *
 *	The above must be operated exclusively.
 */

Inline void INC( INT *val )
{
 800b77c:	b580      	push	{r7, lr}
 800b77e:	b084      	sub	sp, #16
 800b780:	af00      	add	r7, sp, #0
 800b782:	6078      	str	r0, [r7, #4]
	UINT	imask;

	DI(imask);
 800b784:	f000 fe8d 	bl	800c4a2 <disint>
 800b788:	60f8      	str	r0, [r7, #12]
	(*val)++;
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	681b      	ldr	r3, [r3, #0]
 800b78e:	1c5a      	adds	r2, r3, #1
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	601a      	str	r2, [r3, #0]
	EI(imask);
 800b794:	68f8      	ldr	r0, [r7, #12]
 800b796:	f000 fe68 	bl	800c46a <set_basepri>
}
 800b79a:	bf00      	nop
 800b79c:	3710      	adds	r7, #16
 800b79e:	46bd      	mov	sp, r7
 800b7a0:	bd80      	pop	{r7, pc}

0800b7a2 <DEC>:

Inline void DEC( INT *val )
{
 800b7a2:	b580      	push	{r7, lr}
 800b7a4:	b084      	sub	sp, #16
 800b7a6:	af00      	add	r7, sp, #0
 800b7a8:	6078      	str	r0, [r7, #4]
	UINT	imask;

	DI(imask);
 800b7aa:	f000 fe7a 	bl	800c4a2 <disint>
 800b7ae:	60f8      	str	r0, [r7, #12]
	(*val)--;
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	681b      	ldr	r3, [r3, #0]
 800b7b4:	1e5a      	subs	r2, r3, #1
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	601a      	str	r2, [r3, #0]
	EI(imask);
 800b7ba:	68f8      	ldr	r0, [r7, #12]
 800b7bc:	f000 fe55 	bl	800c46a <set_basepri>
}
 800b7c0:	bf00      	nop
 800b7c2:	3710      	adds	r7, #16
 800b7c4:	46bd      	mov	sp, r7
 800b7c6:	bd80      	pop	{r7, pc}

0800b7c8 <BTS>:

Inline BOOL BTS( UINT *val, INT no )
{
 800b7c8:	b580      	push	{r7, lr}
 800b7ca:	b086      	sub	sp, #24
 800b7cc:	af00      	add	r7, sp, #0
 800b7ce:	6078      	str	r0, [r7, #4]
 800b7d0:	6039      	str	r1, [r7, #0]
	UINT	imask;
	UINT	b;
	UINT	bm = (UINT)(1 << no);
 800b7d2:	2201      	movs	r2, #1
 800b7d4:	683b      	ldr	r3, [r7, #0]
 800b7d6:	fa02 f303 	lsl.w	r3, r2, r3
 800b7da:	617b      	str	r3, [r7, #20]

	DI(imask);
 800b7dc:	f000 fe61 	bl	800c4a2 <disint>
 800b7e0:	6138      	str	r0, [r7, #16]
	b = *val & bm;
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	681b      	ldr	r3, [r3, #0]
 800b7e6:	697a      	ldr	r2, [r7, #20]
 800b7e8:	4013      	ands	r3, r2
 800b7ea:	60fb      	str	r3, [r7, #12]
	*val |= bm;
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	681a      	ldr	r2, [r3, #0]
 800b7f0:	697b      	ldr	r3, [r7, #20]
 800b7f2:	431a      	orrs	r2, r3
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	601a      	str	r2, [r3, #0]
	EI(imask);
 800b7f8:	6938      	ldr	r0, [r7, #16]
 800b7fa:	f000 fe36 	bl	800c46a <set_basepri>
	return (BOOL)b;
 800b7fe:	68fb      	ldr	r3, [r7, #12]
}
 800b800:	4618      	mov	r0, r3
 800b802:	3718      	adds	r7, #24
 800b804:	46bd      	mov	sp, r7
 800b806:	bd80      	pop	{r7, pc}

0800b808 <BR>:

Inline void BR( UINT *val, INT no )
{
 800b808:	b580      	push	{r7, lr}
 800b80a:	b084      	sub	sp, #16
 800b80c:	af00      	add	r7, sp, #0
 800b80e:	6078      	str	r0, [r7, #4]
 800b810:	6039      	str	r1, [r7, #0]
	UINT	imask;

	DI(imask);
 800b812:	f000 fe46 	bl	800c4a2 <disint>
 800b816:	60f8      	str	r0, [r7, #12]
	*val &= ~(UINT)(1 << no);
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	681a      	ldr	r2, [r3, #0]
 800b81c:	2101      	movs	r1, #1
 800b81e:	683b      	ldr	r3, [r7, #0]
 800b820:	fa01 f303 	lsl.w	r3, r1, r3
 800b824:	43db      	mvns	r3, r3
 800b826:	401a      	ands	r2, r3
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	601a      	str	r2, [r3, #0]
	EI(imask);
 800b82c:	68f8      	ldr	r0, [r7, #12]
 800b82e:	f000 fe1c 	bl	800c46a <set_basepri>
}
 800b832:	bf00      	nop
 800b834:	3710      	adds	r7, #16
 800b836:	46bd      	mov	sp, r7
 800b838:	bd80      	pop	{r7, pc}

0800b83a <MLockTmo>:
/*
 * Lock with wait time designation 
 *	no	lock number 0 - 31 
 */
EXPORT ER MLockTmo( FastMLock *lock, INT no, TMO tmo )
{
 800b83a:	b580      	push	{r7, lr}
 800b83c:	b08a      	sub	sp, #40	@ 0x28
 800b83e:	af02      	add	r7, sp, #8
 800b840:	60f8      	str	r0, [r7, #12]
 800b842:	60b9      	str	r1, [r7, #8]
 800b844:	607a      	str	r2, [r7, #4]
	UINT	ptn = (UINT)(1 << no);
 800b846:	2201      	movs	r2, #1
 800b848:	68bb      	ldr	r3, [r7, #8]
 800b84a:	fa02 f303 	lsl.w	r3, r2, r3
 800b84e:	61bb      	str	r3, [r7, #24]
	UINT	flg;
	ER	ercd;

	INC(&lock->wai);
 800b850:	68fb      	ldr	r3, [r7, #12]
 800b852:	3304      	adds	r3, #4
 800b854:	4618      	mov	r0, r3
 800b856:	f7ff ff91 	bl	800b77c <INC>
	for ( ;; ) {
		if ( !BTS(&lock->flg, no) ) {
 800b85a:	68fb      	ldr	r3, [r7, #12]
 800b85c:	68b9      	ldr	r1, [r7, #8]
 800b85e:	4618      	mov	r0, r3
 800b860:	f7ff ffb2 	bl	800b7c8 <BTS>
 800b864:	4603      	mov	r3, r0
 800b866:	2b00      	cmp	r3, #0
 800b868:	d102      	bne.n	800b870 <MLockTmo+0x36>
			ercd = E_OK;
 800b86a:	2300      	movs	r3, #0
 800b86c:	61fb      	str	r3, [r7, #28]
			break;
 800b86e:	e010      	b.n	800b892 <MLockTmo+0x58>
		}

		ercd = tk_wai_flg(lock->id, ptn, TWF_ORW|TWF_BITCLR, &flg, tmo);
 800b870:	68fb      	ldr	r3, [r7, #12]
 800b872:	6898      	ldr	r0, [r3, #8]
 800b874:	f107 0214 	add.w	r2, r7, #20
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	9300      	str	r3, [sp, #0]
 800b87c:	4613      	mov	r3, r2
 800b87e:	2221      	movs	r2, #33	@ 0x21
 800b880:	69b9      	ldr	r1, [r7, #24]
 800b882:	f7fd fa71 	bl	8008d68 <tk_wai_flg>
 800b886:	61f8      	str	r0, [r7, #28]
		if ( ercd < E_OK ) {
 800b888:	69fb      	ldr	r3, [r7, #28]
 800b88a:	2b00      	cmp	r3, #0
 800b88c:	db00      	blt.n	800b890 <MLockTmo+0x56>
		if ( !BTS(&lock->flg, no) ) {
 800b88e:	e7e4      	b.n	800b85a <MLockTmo+0x20>
			break;
 800b890:	bf00      	nop
		}
	}
	DEC(&lock->wai);
 800b892:	68fb      	ldr	r3, [r7, #12]
 800b894:	3304      	adds	r3, #4
 800b896:	4618      	mov	r0, r3
 800b898:	f7ff ff83 	bl	800b7a2 <DEC>

	return ercd;
 800b89c:	69fb      	ldr	r3, [r7, #28]
}
 800b89e:	4618      	mov	r0, r3
 800b8a0:	3720      	adds	r7, #32
 800b8a2:	46bd      	mov	sp, r7
 800b8a4:	bd80      	pop	{r7, pc}

0800b8a6 <MLock>:
/*
 * Lock 
 *	no	Lock number 0 - 31 
 */
EXPORT ER MLock( FastMLock *lock, INT no )
{
 800b8a6:	b580      	push	{r7, lr}
 800b8a8:	b082      	sub	sp, #8
 800b8aa:	af00      	add	r7, sp, #0
 800b8ac:	6078      	str	r0, [r7, #4]
 800b8ae:	6039      	str	r1, [r7, #0]
	return MLockTmo(lock, no, TMO_FEVR);
 800b8b0:	f04f 32ff 	mov.w	r2, #4294967295
 800b8b4:	6839      	ldr	r1, [r7, #0]
 800b8b6:	6878      	ldr	r0, [r7, #4]
 800b8b8:	f7ff ffbf 	bl	800b83a <MLockTmo>
 800b8bc:	4603      	mov	r3, r0
}
 800b8be:	4618      	mov	r0, r3
 800b8c0:	3708      	adds	r7, #8
 800b8c2:	46bd      	mov	sp, r7
 800b8c4:	bd80      	pop	{r7, pc}

0800b8c6 <MUnlock>:
/*
 * Lock release 
 *	no	Lock number 0 - 31 
 */
EXPORT ER MUnlock( FastMLock *lock, INT no )
{
 800b8c6:	b580      	push	{r7, lr}
 800b8c8:	b084      	sub	sp, #16
 800b8ca:	af00      	add	r7, sp, #0
 800b8cc:	6078      	str	r0, [r7, #4]
 800b8ce:	6039      	str	r1, [r7, #0]
	UINT	ptn = (UINT)(1 << no);
 800b8d0:	2201      	movs	r2, #1
 800b8d2:	683b      	ldr	r3, [r7, #0]
 800b8d4:	fa02 f303 	lsl.w	r3, r2, r3
 800b8d8:	60fb      	str	r3, [r7, #12]
	ER	ercd;

	BR(&lock->flg, no);
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	6839      	ldr	r1, [r7, #0]
 800b8de:	4618      	mov	r0, r3
 800b8e0:	f7ff ff92 	bl	800b808 <BR>
	ercd = ( lock->wai == 0 )? E_OK: tk_set_flg(lock->id, ptn);
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	685b      	ldr	r3, [r3, #4]
 800b8e8:	2b00      	cmp	r3, #0
 800b8ea:	d007      	beq.n	800b8fc <MUnlock+0x36>
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	689b      	ldr	r3, [r3, #8]
 800b8f0:	68f9      	ldr	r1, [r7, #12]
 800b8f2:	4618      	mov	r0, r3
 800b8f4:	f7fd f996 	bl	8008c24 <tk_set_flg>
 800b8f8:	4603      	mov	r3, r0
 800b8fa:	e000      	b.n	800b8fe <MUnlock+0x38>
 800b8fc:	2300      	movs	r3, #0
 800b8fe:	60bb      	str	r3, [r7, #8]

	return ercd;
 800b900:	68bb      	ldr	r3, [r7, #8]
}
 800b902:	4618      	mov	r0, r3
 800b904:	3710      	adds	r7, #16
 800b906:	46bd      	mov	sp, r7
 800b908:	bd80      	pop	{r7, pc}
	...

0800b90c <CreateMLock>:

/*
 * Create multi-lock 
 */
EXPORT ER CreateMLock( FastMLock *lock, CONST UB *name )
{
 800b90c:	b580      	push	{r7, lr}
 800b90e:	b08a      	sub	sp, #40	@ 0x28
 800b910:	af00      	add	r7, sp, #0
 800b912:	6078      	str	r0, [r7, #4]
 800b914:	6039      	str	r1, [r7, #0]
	T_CFLG	cflg;
	ER	ercd;

	cflg.flgatr  = TA_TPRI | TA_WMUL;
 800b916:	2309      	movs	r3, #9
 800b918:	613b      	str	r3, [r7, #16]
	cflg.iflgptn = 0;
 800b91a:	2300      	movs	r3, #0
 800b91c:	617b      	str	r3, [r7, #20]
	SetOBJNAME(cflg.exinf, "MLOC");
 800b91e:	f107 030c 	add.w	r3, r7, #12
 800b922:	627b      	str	r3, [r7, #36]	@ 0x24
 800b924:	4b17      	ldr	r3, [pc, #92]	@ (800b984 <CreateMLock+0x78>)
 800b926:	623b      	str	r3, [r7, #32]
 800b928:	2300      	movs	r3, #0
 800b92a:	61fb      	str	r3, [r7, #28]
 800b92c:	e00a      	b.n	800b944 <CreateMLock+0x38>
 800b92e:	6a3a      	ldr	r2, [r7, #32]
 800b930:	1c53      	adds	r3, r2, #1
 800b932:	623b      	str	r3, [r7, #32]
 800b934:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b936:	1c59      	adds	r1, r3, #1
 800b938:	6279      	str	r1, [r7, #36]	@ 0x24
 800b93a:	7812      	ldrb	r2, [r2, #0]
 800b93c:	701a      	strb	r2, [r3, #0]
 800b93e:	69fb      	ldr	r3, [r7, #28]
 800b940:	3301      	adds	r3, #1
 800b942:	61fb      	str	r3, [r7, #28]
 800b944:	69fb      	ldr	r3, [r7, #28]
 800b946:	2b03      	cmp	r3, #3
 800b948:	ddf1      	ble.n	800b92e <CreateMLock+0x22>

	lock->id = ercd = tk_cre_flg(&cflg);
 800b94a:	f107 030c 	add.w	r3, r7, #12
 800b94e:	4618      	mov	r0, r3
 800b950:	f7fd f8b8 	bl	8008ac4 <tk_cre_flg>
 800b954:	61b8      	str	r0, [r7, #24]
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	69ba      	ldr	r2, [r7, #24]
 800b95a:	609a      	str	r2, [r3, #8]
	if ( ercd < E_OK ) {
 800b95c:	69bb      	ldr	r3, [r7, #24]
 800b95e:	2b00      	cmp	r3, #0
 800b960:	da01      	bge.n	800b966 <CreateMLock+0x5a>
		return ercd;
 800b962:	69bb      	ldr	r3, [r7, #24]
 800b964:	e009      	b.n	800b97a <CreateMLock+0x6e>
	}

	lock->wai = 0;
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	2200      	movs	r2, #0
 800b96a:	605a      	str	r2, [r3, #4]
	lock->flg = 0;
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	2200      	movs	r2, #0
 800b970:	601a      	str	r2, [r3, #0]
	lock->name = name;
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	683a      	ldr	r2, [r7, #0]
 800b976:	60da      	str	r2, [r3, #12]

	return E_OK;
 800b978:	2300      	movs	r3, #0
}
 800b97a:	4618      	mov	r0, r3
 800b97c:	3728      	adds	r7, #40	@ 0x28
 800b97e:	46bd      	mov	sp, r7
 800b980:	bd80      	pop	{r7, pc}
 800b982:	bf00      	nop
 800b984:	0800d11c 	.word	0x0800d11c

0800b988 <DeleteMLock>:

/*
 * Delete multi-lock 
 */
EXPORT ER DeleteMLock( FastMLock *lock )
{
 800b988:	b580      	push	{r7, lr}
 800b98a:	b084      	sub	sp, #16
 800b98c:	af00      	add	r7, sp, #0
 800b98e:	6078      	str	r0, [r7, #4]
	ER	ercd;

	if ( lock->id <= 0 ) {
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	689b      	ldr	r3, [r3, #8]
 800b994:	2b00      	cmp	r3, #0
 800b996:	dc02      	bgt.n	800b99e <DeleteMLock+0x16>
		return E_PAR;
 800b998:	f06f 0310 	mvn.w	r3, #16
 800b99c:	e00e      	b.n	800b9bc <DeleteMLock+0x34>
	}

	ercd = tk_del_flg(lock->id);
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	689b      	ldr	r3, [r3, #8]
 800b9a2:	4618      	mov	r0, r3
 800b9a4:	f7fd f8ee 	bl	8008b84 <tk_del_flg>
 800b9a8:	60f8      	str	r0, [r7, #12]
	if ( ercd < E_OK ) {
 800b9aa:	68fb      	ldr	r3, [r7, #12]
 800b9ac:	2b00      	cmp	r3, #0
 800b9ae:	da01      	bge.n	800b9b4 <DeleteMLock+0x2c>
		return ercd;
 800b9b0:	68fb      	ldr	r3, [r7, #12]
 800b9b2:	e003      	b.n	800b9bc <DeleteMLock+0x34>
	}

	lock->id = 0;
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	2200      	movs	r2, #0
 800b9b8:	609a      	str	r2, [r3, #8]

	return E_OK;
 800b9ba:	2300      	movs	r3, #0
}
 800b9bc:	4618      	mov	r0, r3
 800b9be:	3710      	adds	r7, #16
 800b9c0:	46bd      	mov	sp, r7
 800b9c2:	bd80      	pop	{r7, pc}

0800b9c4 <libtm_init>:
/*
 * libtm_init() - libtm Initialize
 * supported only on wait != 0 (polling not supported)
 */
EXPORT void libtm_init(void)
{
 800b9c4:	b580      	push	{r7, lr}
 800b9c6:	af00      	add	r7, sp, #0
	tm_com_init();
 800b9c8:	f000 fdb2 	bl	800c530 <tm_com_init>
}
 800b9cc:	bf00      	nop
 800b9ce:	bd80      	pop	{r7, pc}

0800b9d0 <tm_putchar>:
/*
 * tm_putchar()
 * Ctrl-C is not supported
 */
EXPORT INT tm_putchar( INT c )
{
 800b9d0:	b580      	push	{r7, lr}
 800b9d2:	b084      	sub	sp, #16
 800b9d4:	af00      	add	r7, sp, #0
 800b9d6:	6078      	str	r0, [r7, #4]
	static const char CR = CHR_CR;
	UB buf = (UB)c;
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	b2db      	uxtb	r3, r3
 800b9dc:	72fb      	strb	r3, [r7, #11]
	INT imask;

	DI(imask);
 800b9de:	f000 fd60 	bl	800c4a2 <disint>
 800b9e2:	4603      	mov	r3, r0
 800b9e4:	60fb      	str	r3, [r7, #12]
	if (buf == CHR_LF) {
 800b9e6:	7afb      	ldrb	r3, [r7, #11]
 800b9e8:	2b0a      	cmp	r3, #10
 800b9ea:	d103      	bne.n	800b9f4 <tm_putchar+0x24>
		tm_snd_dat((const UB*)&CR, 1);
 800b9ec:	2101      	movs	r1, #1
 800b9ee:	4809      	ldr	r0, [pc, #36]	@ (800ba14 <tm_putchar+0x44>)
 800b9f0:	f000 fd70 	bl	800c4d4 <tm_snd_dat>
	}
	tm_snd_dat(&buf, 1);
 800b9f4:	f107 030b 	add.w	r3, r7, #11
 800b9f8:	2101      	movs	r1, #1
 800b9fa:	4618      	mov	r0, r3
 800b9fc:	f000 fd6a 	bl	800c4d4 <tm_snd_dat>
	EI(imask);
 800ba00:	68fb      	ldr	r3, [r7, #12]
 800ba02:	4618      	mov	r0, r3
 800ba04:	f000 fd31 	bl	800c46a <set_basepri>

	return 0;
 800ba08:	2300      	movs	r3, #0
}
 800ba0a:	4618      	mov	r0, r3
 800ba0c:	3710      	adds	r7, #16
 800ba0e:	46bd      	mov	sp, r7
 800ba10:	bd80      	pop	{r7, pc}
 800ba12:	bf00      	nop
 800ba14:	0800d220 	.word	0x0800d220

0800ba18 <tm_putstring>:
/*
 * tm_putstring() - Put String
 * Ctrl-C is not supported
 */
EXPORT INT tm_putstring( const UB *buff )
{
 800ba18:	b580      	push	{r7, lr}
 800ba1a:	b084      	sub	sp, #16
 800ba1c:	af00      	add	r7, sp, #0
 800ba1e:	6078      	str	r0, [r7, #4]
	const UB* p = buff;
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	60fb      	str	r3, [r7, #12]
	INT imask;

	DI(imask);
 800ba24:	f000 fd3d 	bl	800c4a2 <disint>
 800ba28:	4603      	mov	r3, r0
 800ba2a:	60bb      	str	r3, [r7, #8]
	while ( *p != (UB)'\0' ) {
 800ba2c:	e006      	b.n	800ba3c <tm_putstring+0x24>
		tm_putchar(*p++);
 800ba2e:	68fb      	ldr	r3, [r7, #12]
 800ba30:	1c5a      	adds	r2, r3, #1
 800ba32:	60fa      	str	r2, [r7, #12]
 800ba34:	781b      	ldrb	r3, [r3, #0]
 800ba36:	4618      	mov	r0, r3
 800ba38:	f7ff ffca 	bl	800b9d0 <tm_putchar>
	while ( *p != (UB)'\0' ) {
 800ba3c:	68fb      	ldr	r3, [r7, #12]
 800ba3e:	781b      	ldrb	r3, [r3, #0]
 800ba40:	2b00      	cmp	r3, #0
 800ba42:	d1f4      	bne.n	800ba2e <tm_putstring+0x16>
	}
	EI(imask);
 800ba44:	68bb      	ldr	r3, [r7, #8]
 800ba46:	4618      	mov	r0, r3
 800ba48:	f000 fd0f 	bl	800c46a <set_basepri>

	return 0;
 800ba4c:	2300      	movs	r3, #0
}
 800ba4e:	4618      	mov	r0, r3
 800ba50:	3710      	adds	r7, #16
 800ba52:	46bd      	mov	sp, r7
 800ba54:	bd80      	pop	{r7, pc}
	...

0800ba58 <outint>:

/*
 *	Output integer value
 */
LOCAL	UB	*outint( UB *ep, UW val, UB base )
{
 800ba58:	b480      	push	{r7}
 800ba5a:	b087      	sub	sp, #28
 800ba5c:	af00      	add	r7, sp, #0
 800ba5e:	60f8      	str	r0, [r7, #12]
 800ba60:	60b9      	str	r1, [r7, #8]
 800ba62:	4613      	mov	r3, r2
 800ba64:	71fb      	strb	r3, [r7, #7]
LOCAL const UB  digits[32] = "0123456789abcdef0123456789ABCDEF";
	UB	caps;

	caps = (base & 0x40) >> 2;		/* 'a' or 'A' */
 800ba66:	79fb      	ldrb	r3, [r7, #7]
 800ba68:	109b      	asrs	r3, r3, #2
 800ba6a:	b2db      	uxtb	r3, r3
 800ba6c:	f003 0310 	and.w	r3, r3, #16
 800ba70:	75fb      	strb	r3, [r7, #23]
	for (base &= 0x3F; val >= base; val /= base) {
 800ba72:	79fb      	ldrb	r3, [r7, #7]
 800ba74:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800ba78:	71fb      	strb	r3, [r7, #7]
 800ba7a:	e014      	b.n	800baa6 <outint+0x4e>
		*--ep = digits[(val % base) + caps];
 800ba7c:	79fa      	ldrb	r2, [r7, #7]
 800ba7e:	68bb      	ldr	r3, [r7, #8]
 800ba80:	fbb3 f1f2 	udiv	r1, r3, r2
 800ba84:	fb01 f202 	mul.w	r2, r1, r2
 800ba88:	1a9a      	subs	r2, r3, r2
 800ba8a:	7dfb      	ldrb	r3, [r7, #23]
 800ba8c:	4413      	add	r3, r2
 800ba8e:	68fa      	ldr	r2, [r7, #12]
 800ba90:	3a01      	subs	r2, #1
 800ba92:	60fa      	str	r2, [r7, #12]
 800ba94:	4a0e      	ldr	r2, [pc, #56]	@ (800bad0 <outint+0x78>)
 800ba96:	5cd2      	ldrb	r2, [r2, r3]
 800ba98:	68fb      	ldr	r3, [r7, #12]
 800ba9a:	701a      	strb	r2, [r3, #0]
	for (base &= 0x3F; val >= base; val /= base) {
 800ba9c:	79fb      	ldrb	r3, [r7, #7]
 800ba9e:	68ba      	ldr	r2, [r7, #8]
 800baa0:	fbb2 f3f3 	udiv	r3, r2, r3
 800baa4:	60bb      	str	r3, [r7, #8]
 800baa6:	79fb      	ldrb	r3, [r7, #7]
 800baa8:	68ba      	ldr	r2, [r7, #8]
 800baaa:	429a      	cmp	r2, r3
 800baac:	d2e6      	bcs.n	800ba7c <outint+0x24>
	}
	*--ep = digits[val + caps];
 800baae:	7dfa      	ldrb	r2, [r7, #23]
 800bab0:	68bb      	ldr	r3, [r7, #8]
 800bab2:	4413      	add	r3, r2
 800bab4:	68fa      	ldr	r2, [r7, #12]
 800bab6:	3a01      	subs	r2, #1
 800bab8:	60fa      	str	r2, [r7, #12]
 800baba:	4a05      	ldr	r2, [pc, #20]	@ (800bad0 <outint+0x78>)
 800babc:	5cd2      	ldrb	r2, [r2, r3]
 800babe:	68fb      	ldr	r3, [r7, #12]
 800bac0:	701a      	strb	r2, [r3, #0]
	return ep;				/* buffer top pointer */
 800bac2:	68fb      	ldr	r3, [r7, #12]
}
 800bac4:	4618      	mov	r0, r3
 800bac6:	371c      	adds	r7, #28
 800bac8:	46bd      	mov	sp, r7
 800baca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bace:	4770      	bx	lr
 800bad0:	0800d224 	.word	0x0800d224

0800bad4 <tm_vsprintf>:

/*
 *	Output with format (limited version)
 */
LOCAL	void	tm_vsprintf( OutFn ostr, OutPar *par, const UB *fmt, va_list ap )
{
 800bad4:	b580      	push	{r7, lr}
 800bad6:	b090      	sub	sp, #64	@ 0x40
 800bad8:	af00      	add	r7, sp, #0
 800bada:	60f8      	str	r0, [r7, #12]
 800badc:	60b9      	str	r1, [r7, #8]
 800bade:	607a      	str	r2, [r7, #4]
 800bae0:	603b      	str	r3, [r7, #0]
#define	F_PLUS		0x02
#define	F_SPACE		0x04
#define	F_PREFIX	0x08
#define	F_ZERO		0x10

	for (fms = NULL; (c = *fmt++) != '\0'; ) {
 800bae2:	2300      	movs	r3, #0
 800bae4:	633b      	str	r3, [r7, #48]	@ 0x30
 800bae6:	e2f1      	b.n	800c0cc <tm_vsprintf+0x5f8>

		if (c != '%') {	/* Fixed string */
 800bae8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800baec:	2b25      	cmp	r3, #37	@ 0x25
 800baee:	d007      	beq.n	800bb00 <tm_vsprintf+0x2c>
			if (fms == NULL) fms = (UB*)fmt - 1;
 800baf0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800baf2:	2b00      	cmp	r3, #0
 800baf4:	f040 82e9 	bne.w	800c0ca <tm_vsprintf+0x5f6>
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	3b01      	subs	r3, #1
 800bafc:	633b      	str	r3, [r7, #48]	@ 0x30
			continue;
 800bafe:	e2e4      	b.n	800c0ca <tm_vsprintf+0x5f6>
		}

		/* Output fix string */
		if (fms != NULL) {
 800bb00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb02:	2b00      	cmp	r3, #0
 800bb04:	d009      	beq.n	800bb1a <tm_vsprintf+0x46>
			(*ostr)(fms, fmt - fms - 1, par);
 800bb06:	687a      	ldr	r2, [r7, #4]
 800bb08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb0a:	1ad3      	subs	r3, r2, r3
 800bb0c:	1e59      	subs	r1, r3, #1
 800bb0e:	68fb      	ldr	r3, [r7, #12]
 800bb10:	68ba      	ldr	r2, [r7, #8]
 800bb12:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800bb14:	4798      	blx	r3
			fms = NULL;
 800bb16:	2300      	movs	r3, #0
 800bb18:	633b      	str	r3, [r7, #48]	@ 0x30
		}

		/* Get flags */
		for (flg = 0; ; ) {
 800bb1a:	2300      	movs	r3, #0
 800bb1c:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
			switch (c = *fmt++) {
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	1c5a      	adds	r2, r3, #1
 800bb24:	607a      	str	r2, [r7, #4]
 800bb26:	781b      	ldrb	r3, [r3, #0]
 800bb28:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800bb2c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800bb30:	3b20      	subs	r3, #32
 800bb32:	2b10      	cmp	r3, #16
 800bb34:	d848      	bhi.n	800bbc8 <tm_vsprintf+0xf4>
 800bb36:	a201      	add	r2, pc, #4	@ (adr r2, 800bb3c <tm_vsprintf+0x68>)
 800bb38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb3c:	0800bb9d 	.word	0x0800bb9d
 800bb40:	0800bbc9 	.word	0x0800bbc9
 800bb44:	0800bbc9 	.word	0x0800bbc9
 800bb48:	0800bbab 	.word	0x0800bbab
 800bb4c:	0800bbc9 	.word	0x0800bbc9
 800bb50:	0800bbc9 	.word	0x0800bbc9
 800bb54:	0800bbc9 	.word	0x0800bbc9
 800bb58:	0800bbc9 	.word	0x0800bbc9
 800bb5c:	0800bbc9 	.word	0x0800bbc9
 800bb60:	0800bbc9 	.word	0x0800bbc9
 800bb64:	0800bbc9 	.word	0x0800bbc9
 800bb68:	0800bb8f 	.word	0x0800bb8f
 800bb6c:	0800bbc9 	.word	0x0800bbc9
 800bb70:	0800bb81 	.word	0x0800bb81
 800bb74:	0800bbc9 	.word	0x0800bbc9
 800bb78:	0800bbc9 	.word	0x0800bbc9
 800bb7c:	0800bbb9 	.word	0x0800bbb9
			case '-': flg |= F_LEFT;	continue;
 800bb80:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800bb84:	f043 0301 	orr.w	r3, r3, #1
 800bb88:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 800bb8c:	e01b      	b.n	800bbc6 <tm_vsprintf+0xf2>
			case '+': flg |= F_PLUS;	continue;
 800bb8e:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800bb92:	f043 0302 	orr.w	r3, r3, #2
 800bb96:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 800bb9a:	e014      	b.n	800bbc6 <tm_vsprintf+0xf2>
			case ' ': flg |= F_SPACE;	continue;
 800bb9c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800bba0:	f043 0304 	orr.w	r3, r3, #4
 800bba4:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 800bba8:	e00d      	b.n	800bbc6 <tm_vsprintf+0xf2>
			case '#': flg |= F_PREFIX;	continue;
 800bbaa:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800bbae:	f043 0308 	orr.w	r3, r3, #8
 800bbb2:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 800bbb6:	e006      	b.n	800bbc6 <tm_vsprintf+0xf2>
			case '0': flg |= F_ZERO;	continue;
 800bbb8:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800bbbc:	f043 0310 	orr.w	r3, r3, #16
 800bbc0:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 800bbc4:	bf00      	nop
			switch (c = *fmt++) {
 800bbc6:	e7ab      	b.n	800bb20 <tm_vsprintf+0x4c>
			}
			break;
 800bbc8:	bf00      	nop
		}

		/* Get field width */
		if (c == '*') {
 800bbca:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800bbce:	2b2a      	cmp	r3, #42	@ 0x2a
 800bbd0:	d119      	bne.n	800bc06 <tm_vsprintf+0x132>
			wid = va_arg(ap, INT);
 800bbd2:	683b      	ldr	r3, [r7, #0]
 800bbd4:	1d1a      	adds	r2, r3, #4
 800bbd6:	603a      	str	r2, [r7, #0]
 800bbd8:	681b      	ldr	r3, [r3, #0]
 800bbda:	877b      	strh	r3, [r7, #58]	@ 0x3a
			if (wid < 0) {
 800bbdc:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	@ 0x3a
 800bbe0:	2b00      	cmp	r3, #0
 800bbe2:	da09      	bge.n	800bbf8 <tm_vsprintf+0x124>
				wid = -wid;
 800bbe4:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800bbe6:	425b      	negs	r3, r3
 800bbe8:	b29b      	uxth	r3, r3
 800bbea:	877b      	strh	r3, [r7, #58]	@ 0x3a
				flg |= F_LEFT;
 800bbec:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800bbf0:	f043 0301 	orr.w	r3, r3, #1
 800bbf4:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
			}
			c = *fmt++;
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	1c5a      	adds	r2, r3, #1
 800bbfc:	607a      	str	r2, [r7, #4]
 800bbfe:	781b      	ldrb	r3, [r3, #0]
 800bc00:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800bc04:	e01e      	b.n	800bc44 <tm_vsprintf+0x170>
		} else {
			for (wid = 0; c >= '0' && c <= '9'; c = *fmt++)
 800bc06:	2300      	movs	r3, #0
 800bc08:	877b      	strh	r3, [r7, #58]	@ 0x3a
 800bc0a:	e013      	b.n	800bc34 <tm_vsprintf+0x160>
				wid = wid * 10 + c - '0';
 800bc0c:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800bc0e:	461a      	mov	r2, r3
 800bc10:	0092      	lsls	r2, r2, #2
 800bc12:	4413      	add	r3, r2
 800bc14:	005b      	lsls	r3, r3, #1
 800bc16:	b29a      	uxth	r2, r3
 800bc18:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800bc1c:	b29b      	uxth	r3, r3
 800bc1e:	4413      	add	r3, r2
 800bc20:	b29b      	uxth	r3, r3
 800bc22:	3b30      	subs	r3, #48	@ 0x30
 800bc24:	b29b      	uxth	r3, r3
 800bc26:	877b      	strh	r3, [r7, #58]	@ 0x3a
			for (wid = 0; c >= '0' && c <= '9'; c = *fmt++)
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	1c5a      	adds	r2, r3, #1
 800bc2c:	607a      	str	r2, [r7, #4]
 800bc2e:	781b      	ldrb	r3, [r3, #0]
 800bc30:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800bc34:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800bc38:	2b2f      	cmp	r3, #47	@ 0x2f
 800bc3a:	d903      	bls.n	800bc44 <tm_vsprintf+0x170>
 800bc3c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800bc40:	2b39      	cmp	r3, #57	@ 0x39
 800bc42:	d9e3      	bls.n	800bc0c <tm_vsprintf+0x138>
		}

		/* Get precision */
		prec = -1;
 800bc44:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800bc48:	873b      	strh	r3, [r7, #56]	@ 0x38
		if (c == '.') {
 800bc4a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800bc4e:	2b2e      	cmp	r3, #46	@ 0x2e
 800bc50:	d140      	bne.n	800bcd4 <tm_vsprintf+0x200>
			c = *fmt++;
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	1c5a      	adds	r2, r3, #1
 800bc56:	607a      	str	r2, [r7, #4]
 800bc58:	781b      	ldrb	r3, [r3, #0]
 800bc5a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (c == '*') {
 800bc5e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800bc62:	2b2a      	cmp	r3, #42	@ 0x2a
 800bc64:	d111      	bne.n	800bc8a <tm_vsprintf+0x1b6>
				prec = va_arg(ap, INT);
 800bc66:	683b      	ldr	r3, [r7, #0]
 800bc68:	1d1a      	adds	r2, r3, #4
 800bc6a:	603a      	str	r2, [r7, #0]
 800bc6c:	681b      	ldr	r3, [r3, #0]
 800bc6e:	873b      	strh	r3, [r7, #56]	@ 0x38
				if (prec < 0) prec = 0;
 800bc70:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	@ 0x38
 800bc74:	2b00      	cmp	r3, #0
 800bc76:	da01      	bge.n	800bc7c <tm_vsprintf+0x1a8>
 800bc78:	2300      	movs	r3, #0
 800bc7a:	873b      	strh	r3, [r7, #56]	@ 0x38
				c = *fmt++;
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	1c5a      	adds	r2, r3, #1
 800bc80:	607a      	str	r2, [r7, #4]
 800bc82:	781b      	ldrb	r3, [r3, #0]
 800bc84:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800bc88:	e01e      	b.n	800bcc8 <tm_vsprintf+0x1f4>
			} else {
				for (prec = 0;c >= '0' && c <= '9';c = *fmt++)
 800bc8a:	2300      	movs	r3, #0
 800bc8c:	873b      	strh	r3, [r7, #56]	@ 0x38
 800bc8e:	e013      	b.n	800bcb8 <tm_vsprintf+0x1e4>
					prec = prec * 10 + c - '0';
 800bc90:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800bc92:	461a      	mov	r2, r3
 800bc94:	0092      	lsls	r2, r2, #2
 800bc96:	4413      	add	r3, r2
 800bc98:	005b      	lsls	r3, r3, #1
 800bc9a:	b29a      	uxth	r2, r3
 800bc9c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800bca0:	b29b      	uxth	r3, r3
 800bca2:	4413      	add	r3, r2
 800bca4:	b29b      	uxth	r3, r3
 800bca6:	3b30      	subs	r3, #48	@ 0x30
 800bca8:	b29b      	uxth	r3, r3
 800bcaa:	873b      	strh	r3, [r7, #56]	@ 0x38
				for (prec = 0;c >= '0' && c <= '9';c = *fmt++)
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	1c5a      	adds	r2, r3, #1
 800bcb0:	607a      	str	r2, [r7, #4]
 800bcb2:	781b      	ldrb	r3, [r3, #0]
 800bcb4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800bcb8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800bcbc:	2b2f      	cmp	r3, #47	@ 0x2f
 800bcbe:	d903      	bls.n	800bcc8 <tm_vsprintf+0x1f4>
 800bcc0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800bcc4:	2b39      	cmp	r3, #57	@ 0x39
 800bcc6:	d9e3      	bls.n	800bc90 <tm_vsprintf+0x1bc>
			}
			flg &= ~F_ZERO;		/* No ZERO padding */
 800bcc8:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800bccc:	f023 0310 	bic.w	r3, r3, #16
 800bcd0:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
		}

		/* Get qualifier */
		qual = 0;
 800bcd4:	2300      	movs	r3, #0
 800bcd6:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
		if (c == 'h' || c == 'l') {
 800bcda:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800bcde:	2b68      	cmp	r3, #104	@ 0x68
 800bce0:	d003      	beq.n	800bcea <tm_vsprintf+0x216>
 800bce2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800bce6:	2b6c      	cmp	r3, #108	@ 0x6c
 800bce8:	d109      	bne.n	800bcfe <tm_vsprintf+0x22a>
			qual = c;
 800bcea:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800bcee:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
			c = *fmt++;
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	1c5a      	adds	r2, r3, #1
 800bcf6:	607a      	str	r2, [r7, #4]
 800bcf8:	781b      	ldrb	r3, [r3, #0]
 800bcfa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		}

		/* Format items */
		base = 10;
 800bcfe:	230a      	movs	r3, #10
 800bd00:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
		sign = 0;
 800bd04:	2300      	movs	r3, #0
 800bd06:	74fb      	strb	r3, [r7, #19]
		cbe = &cbuf[MAX_DIGITS];	/* buffer end pointer */
 800bd08:	f107 0314 	add.w	r3, r7, #20
 800bd0c:	330e      	adds	r3, #14
 800bd0e:	62bb      	str	r3, [r7, #40]	@ 0x28

		switch (c) {
 800bd10:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800bd14:	2b78      	cmp	r3, #120	@ 0x78
 800bd16:	f300 814d 	bgt.w	800bfb4 <tm_vsprintf+0x4e0>
 800bd1a:	2b64      	cmp	r3, #100	@ 0x64
 800bd1c:	da0b      	bge.n	800bd36 <tm_vsprintf+0x262>
 800bd1e:	2b63      	cmp	r3, #99	@ 0x63
 800bd20:	f000 8135 	beq.w	800bf8e <tm_vsprintf+0x4ba>
 800bd24:	2b63      	cmp	r3, #99	@ 0x63
 800bd26:	f300 8145 	bgt.w	800bfb4 <tm_vsprintf+0x4e0>
 800bd2a:	2b00      	cmp	r3, #0
 800bd2c:	f000 813e 	beq.w	800bfac <tm_vsprintf+0x4d8>
 800bd30:	2b58      	cmp	r3, #88	@ 0x58
 800bd32:	d022      	beq.n	800bd7a <tm_vsprintf+0x2a6>
 800bd34:	e13e      	b.n	800bfb4 <tm_vsprintf+0x4e0>
 800bd36:	3b64      	subs	r3, #100	@ 0x64
 800bd38:	2201      	movs	r2, #1
 800bd3a:	fa02 f303 	lsl.w	r3, r2, r3
 800bd3e:	4a9f      	ldr	r2, [pc, #636]	@ (800bfbc <tm_vsprintf+0x4e8>)
 800bd40:	401a      	ands	r2, r3
 800bd42:	2a00      	cmp	r2, #0
 800bd44:	bf14      	ite	ne
 800bd46:	2201      	movne	r2, #1
 800bd48:	2200      	moveq	r2, #0
 800bd4a:	b2d2      	uxtb	r2, r2
 800bd4c:	2a00      	cmp	r2, #0
 800bd4e:	d114      	bne.n	800bd7a <tm_vsprintf+0x2a6>
 800bd50:	f403 4200 	and.w	r2, r3, #32768	@ 0x8000
 800bd54:	2a00      	cmp	r2, #0
 800bd56:	bf14      	ite	ne
 800bd58:	2201      	movne	r2, #1
 800bd5a:	2200      	moveq	r2, #0
 800bd5c:	b2d2      	uxtb	r2, r2
 800bd5e:	2a00      	cmp	r2, #0
 800bd60:	f040 80f1 	bne.w	800bf46 <tm_vsprintf+0x472>
 800bd64:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800bd68:	2b00      	cmp	r3, #0
 800bd6a:	bf14      	ite	ne
 800bd6c:	2301      	movne	r3, #1
 800bd6e:	2300      	moveq	r3, #0
 800bd70:	b2db      	uxtb	r3, r3
 800bd72:	2b00      	cmp	r3, #0
 800bd74:	f040 80cf 	bne.w	800bf16 <tm_vsprintf+0x442>
 800bd78:	e11c      	b.n	800bfb4 <tm_vsprintf+0x4e0>
		case 'd':
		case 'u':
		case 'X':
		case 'x':
		case 'o':
			if (qual == 'l') {
 800bd7a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800bd7e:	2b6c      	cmp	r3, #108	@ 0x6c
 800bd80:	d105      	bne.n	800bd8e <tm_vsprintf+0x2ba>
				v = va_arg(ap, UW);
 800bd82:	683b      	ldr	r3, [r7, #0]
 800bd84:	1d1a      	adds	r2, r3, #4
 800bd86:	603a      	str	r2, [r7, #0]
 800bd88:	681b      	ldr	r3, [r3, #0]
 800bd8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800bd8c:	e016      	b.n	800bdbc <tm_vsprintf+0x2e8>
			} else {
				v = va_arg(ap, UINT);
 800bd8e:	683b      	ldr	r3, [r7, #0]
 800bd90:	1d1a      	adds	r2, r3, #4
 800bd92:	603a      	str	r2, [r7, #0]
 800bd94:	681b      	ldr	r3, [r3, #0]
 800bd96:	63fb      	str	r3, [r7, #60]	@ 0x3c
				if (qual == 'h') {
 800bd98:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800bd9c:	2b68      	cmp	r3, #104	@ 0x68
 800bd9e:	d10d      	bne.n	800bdbc <tm_vsprintf+0x2e8>
					v = (c == 'i' || c == 'd') ?
						(H)v :(UH)v;
 800bda0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800bda4:	2b69      	cmp	r3, #105	@ 0x69
 800bda6:	d003      	beq.n	800bdb0 <tm_vsprintf+0x2dc>
					v = (c == 'i' || c == 'd') ?
 800bda8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800bdac:	2b64      	cmp	r3, #100	@ 0x64
 800bdae:	d102      	bne.n	800bdb6 <tm_vsprintf+0x2e2>
						(H)v :(UH)v;
 800bdb0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bdb2:	b21b      	sxth	r3, r3
 800bdb4:	e001      	b.n	800bdba <tm_vsprintf+0x2e6>
 800bdb6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bdb8:	b29b      	uxth	r3, r3
					v = (c == 'i' || c == 'd') ?
 800bdba:	63fb      	str	r3, [r7, #60]	@ 0x3c
				}
			}
			switch (c) {
 800bdbc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800bdc0:	3b58      	subs	r3, #88	@ 0x58
 800bdc2:	2b20      	cmp	r3, #32
 800bdc4:	f200 8094 	bhi.w	800bef0 <tm_vsprintf+0x41c>
 800bdc8:	a201      	add	r2, pc, #4	@ (adr r2, 800bdd0 <tm_vsprintf+0x2fc>)
 800bdca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bdce:	bf00      	nop
 800bdd0:	0800be97 	.word	0x0800be97
 800bdd4:	0800bef1 	.word	0x0800bef1
 800bdd8:	0800bef1 	.word	0x0800bef1
 800bddc:	0800bef1 	.word	0x0800bef1
 800bde0:	0800bef1 	.word	0x0800bef1
 800bde4:	0800bef1 	.word	0x0800bef1
 800bde8:	0800bef1 	.word	0x0800bef1
 800bdec:	0800bef1 	.word	0x0800bef1
 800bdf0:	0800bef1 	.word	0x0800bef1
 800bdf4:	0800bef1 	.word	0x0800bef1
 800bdf8:	0800bef1 	.word	0x0800bef1
 800bdfc:	0800bef1 	.word	0x0800bef1
 800be00:	0800be55 	.word	0x0800be55
 800be04:	0800bef1 	.word	0x0800bef1
 800be08:	0800bef1 	.word	0x0800bef1
 800be0c:	0800bef1 	.word	0x0800bef1
 800be10:	0800bef1 	.word	0x0800bef1
 800be14:	0800be55 	.word	0x0800be55
 800be18:	0800bef1 	.word	0x0800bef1
 800be1c:	0800bef1 	.word	0x0800bef1
 800be20:	0800bef1 	.word	0x0800bef1
 800be24:	0800bef1 	.word	0x0800bef1
 800be28:	0800bef1 	.word	0x0800bef1
 800be2c:	0800beab 	.word	0x0800beab
 800be30:	0800bef1 	.word	0x0800bef1
 800be34:	0800bef1 	.word	0x0800bef1
 800be38:	0800bef1 	.word	0x0800bef1
 800be3c:	0800bef1 	.word	0x0800bef1
 800be40:	0800bef1 	.word	0x0800bef1
 800be44:	0800bef1 	.word	0x0800bef1
 800be48:	0800bef1 	.word	0x0800bef1
 800be4c:	0800bef1 	.word	0x0800bef1
 800be50:	0800bea1 	.word	0x0800bea1
			case 'i':
			case 'd':
				if ((W)v < 0) {
 800be54:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800be56:	2b00      	cmp	r3, #0
 800be58:	da05      	bge.n	800be66 <tm_vsprintf+0x392>
					v = - (W)v;
 800be5a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800be5c:	425b      	negs	r3, r3
 800be5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
					sign = '-';
 800be60:	232d      	movs	r3, #45	@ 0x2d
 800be62:	74fb      	strb	r3, [r7, #19]
 800be64:	e010      	b.n	800be88 <tm_vsprintf+0x3b4>
				} else if ((flg & F_PLUS) != 0) {
 800be66:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800be6a:	f003 0302 	and.w	r3, r3, #2
 800be6e:	2b00      	cmp	r3, #0
 800be70:	d002      	beq.n	800be78 <tm_vsprintf+0x3a4>
					sign = '+';
 800be72:	232b      	movs	r3, #43	@ 0x2b
 800be74:	74fb      	strb	r3, [r7, #19]
 800be76:	e007      	b.n	800be88 <tm_vsprintf+0x3b4>
				} else if ((flg & F_SPACE) != 0) {
 800be78:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800be7c:	f003 0304 	and.w	r3, r3, #4
 800be80:	2b00      	cmp	r3, #0
 800be82:	d032      	beq.n	800beea <tm_vsprintf+0x416>
					sign = ' ';
 800be84:	2320      	movs	r3, #32
 800be86:	74fb      	strb	r3, [r7, #19]
				} else {
					break;
				}
				wid--;		/* for sign */
 800be88:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	@ 0x3a
 800be8c:	b29b      	uxth	r3, r3
 800be8e:	3b01      	subs	r3, #1
 800be90:	b29b      	uxth	r3, r3
 800be92:	877b      	strh	r3, [r7, #58]	@ 0x3a
			case 'u':
				break;
 800be94:	e02c      	b.n	800bef0 <tm_vsprintf+0x41c>
			case 'X':
				base += 0x40;	/* base = 16 + 0x40 */
 800be96:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800be9a:	3340      	adds	r3, #64	@ 0x40
 800be9c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
			case 'x':
				base += 8;	/* base = 16 */
 800bea0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800bea4:	3308      	adds	r3, #8
 800bea6:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
			case 'o':
				base -= 2;	/* base = 8 */
 800beaa:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800beae:	3b02      	subs	r3, #2
 800beb0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
				if ((flg & F_PREFIX) != 0 && v != 0) {
 800beb4:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800beb8:	f003 0308 	and.w	r3, r3, #8
 800bebc:	2b00      	cmp	r3, #0
 800bebe:	d016      	beq.n	800beee <tm_vsprintf+0x41a>
 800bec0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bec2:	2b00      	cmp	r3, #0
 800bec4:	d013      	beq.n	800beee <tm_vsprintf+0x41a>
					wid -= (base == 8) ? 1 : 2;
 800bec6:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800bec8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800becc:	2b08      	cmp	r3, #8
 800bece:	d101      	bne.n	800bed4 <tm_vsprintf+0x400>
 800bed0:	2301      	movs	r3, #1
 800bed2:	e000      	b.n	800bed6 <tm_vsprintf+0x402>
 800bed4:	2302      	movs	r3, #2
 800bed6:	1ad3      	subs	r3, r2, r3
 800bed8:	b29b      	uxth	r3, r3
 800beda:	877b      	strh	r3, [r7, #58]	@ 0x3a
					base |= 0x80;
 800bedc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800bee0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800bee4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
				}
				break;
 800bee8:	e001      	b.n	800beee <tm_vsprintf+0x41a>
					break;
 800beea:	bf00      	nop
 800beec:	e000      	b.n	800bef0 <tm_vsprintf+0x41c>
				break;
 800beee:	bf00      	nop
			}
			/* Note: None outputs when v == 0 && prec == 0 */
			cbs = (v == 0 && prec == 0) ?
						cbe : outint(cbe, v, base);
 800bef0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bef2:	2b00      	cmp	r3, #0
 800bef4:	d103      	bne.n	800befe <tm_vsprintf+0x42a>
			cbs = (v == 0 && prec == 0) ?
 800bef6:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	@ 0x38
 800befa:	2b00      	cmp	r3, #0
 800befc:	d008      	beq.n	800bf10 <tm_vsprintf+0x43c>
						cbe : outint(cbe, v, base);
 800befe:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800bf02:	461a      	mov	r2, r3
 800bf04:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800bf06:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800bf08:	f7ff fda6 	bl	800ba58 <outint>
 800bf0c:	4603      	mov	r3, r0
 800bf0e:	e000      	b.n	800bf12 <tm_vsprintf+0x43e>
 800bf10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
			cbs = (v == 0 && prec == 0) ?
 800bf12:	62fb      	str	r3, [r7, #44]	@ 0x2c
			break;
 800bf14:	e055      	b.n	800bfc2 <tm_vsprintf+0x4ee>
		case 'p':
			v = (UW)va_arg(ap, void *);
 800bf16:	683b      	ldr	r3, [r7, #0]
 800bf18:	1d1a      	adds	r2, r3, #4
 800bf1a:	603a      	str	r2, [r7, #0]
 800bf1c:	681b      	ldr	r3, [r3, #0]
 800bf1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
			if (v != 0) {
 800bf20:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bf22:	2b00      	cmp	r3, #0
 800bf24:	d006      	beq.n	800bf34 <tm_vsprintf+0x460>
				base = 16 | 0x80;
 800bf26:	2390      	movs	r3, #144	@ 0x90
 800bf28:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
				wid -= 2;
 800bf2c:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800bf2e:	3b02      	subs	r3, #2
 800bf30:	b29b      	uxth	r3, r3
 800bf32:	877b      	strh	r3, [r7, #58]	@ 0x3a
			}
			cbs = outint(cbe, v, base);
 800bf34:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800bf38:	461a      	mov	r2, r3
 800bf3a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800bf3c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800bf3e:	f7ff fd8b 	bl	800ba58 <outint>
 800bf42:	62f8      	str	r0, [r7, #44]	@ 0x2c
			break;
 800bf44:	e03d      	b.n	800bfc2 <tm_vsprintf+0x4ee>
		case 's':
			cbe = cbs = va_arg(ap, UB *);
 800bf46:	683b      	ldr	r3, [r7, #0]
 800bf48:	1d1a      	adds	r2, r3, #4
 800bf4a:	603a      	str	r2, [r7, #0]
 800bf4c:	681b      	ldr	r3, [r3, #0]
 800bf4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800bf50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bf52:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (prec < 0) {
 800bf54:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	@ 0x38
 800bf58:	2b00      	cmp	r3, #0
 800bf5a:	da0b      	bge.n	800bf74 <tm_vsprintf+0x4a0>
				while (*cbe != '\0') cbe++;
 800bf5c:	e002      	b.n	800bf64 <tm_vsprintf+0x490>
 800bf5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bf60:	3301      	adds	r3, #1
 800bf62:	62bb      	str	r3, [r7, #40]	@ 0x28
 800bf64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bf66:	781b      	ldrb	r3, [r3, #0]
 800bf68:	2b00      	cmp	r3, #0
 800bf6a:	d1f8      	bne.n	800bf5e <tm_vsprintf+0x48a>
			} else {
				while (--prec >= 0 && *cbe != '\0') cbe++;
			}
			break;
 800bf6c:	e028      	b.n	800bfc0 <tm_vsprintf+0x4ec>
				while (--prec >= 0 && *cbe != '\0') cbe++;
 800bf6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bf70:	3301      	adds	r3, #1
 800bf72:	62bb      	str	r3, [r7, #40]	@ 0x28
 800bf74:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800bf76:	3b01      	subs	r3, #1
 800bf78:	b29b      	uxth	r3, r3
 800bf7a:	873b      	strh	r3, [r7, #56]	@ 0x38
 800bf7c:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	@ 0x38
 800bf80:	2b00      	cmp	r3, #0
 800bf82:	db1d      	blt.n	800bfc0 <tm_vsprintf+0x4ec>
 800bf84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bf86:	781b      	ldrb	r3, [r3, #0]
 800bf88:	2b00      	cmp	r3, #0
 800bf8a:	d1f0      	bne.n	800bf6e <tm_vsprintf+0x49a>
			break;
 800bf8c:	e018      	b.n	800bfc0 <tm_vsprintf+0x4ec>
		case 'c':
			cbs = cbe;
 800bf8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bf90:	62fb      	str	r3, [r7, #44]	@ 0x2c
			*--cbs = (UB)va_arg(ap, INT);
 800bf92:	683b      	ldr	r3, [r7, #0]
 800bf94:	1d1a      	adds	r2, r3, #4
 800bf96:	603a      	str	r2, [r7, #0]
 800bf98:	681a      	ldr	r2, [r3, #0]
 800bf9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bf9c:	3b01      	subs	r3, #1
 800bf9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800bfa0:	b2d2      	uxtb	r2, r2
 800bfa2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bfa4:	701a      	strb	r2, [r3, #0]
			prec = 0;
 800bfa6:	2300      	movs	r3, #0
 800bfa8:	873b      	strh	r3, [r7, #56]	@ 0x38
			break;
 800bfaa:	e00a      	b.n	800bfc2 <tm_vsprintf+0x4ee>
		case '\0':
			fmt--;
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	3b01      	subs	r3, #1
 800bfb0:	607b      	str	r3, [r7, #4]
			continue;
 800bfb2:	e08b      	b.n	800c0cc <tm_vsprintf+0x5f8>
		default:
			/* Output as fixed string */
			fms = (UB*)fmt - 1;
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	3b01      	subs	r3, #1
 800bfb8:	633b      	str	r3, [r7, #48]	@ 0x30
			continue;
 800bfba:	e087      	b.n	800c0cc <tm_vsprintf+0x5f8>
 800bfbc:	00120821 	.word	0x00120821
			break;
 800bfc0:	bf00      	nop
		}

		n = cbe - cbs;				/* item length */
 800bfc2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800bfc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bfc6:	1ad3      	subs	r3, r2, r3
 800bfc8:	86fb      	strh	r3, [r7, #54]	@ 0x36
		if ((prec -= n) > 0) n += prec;
 800bfca:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
 800bfcc:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800bfce:	1ad3      	subs	r3, r2, r3
 800bfd0:	b29b      	uxth	r3, r3
 800bfd2:	873b      	strh	r3, [r7, #56]	@ 0x38
 800bfd4:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	@ 0x38
 800bfd8:	2b00      	cmp	r3, #0
 800bfda:	dd04      	ble.n	800bfe6 <tm_vsprintf+0x512>
 800bfdc:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800bfde:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800bfe0:	4413      	add	r3, r2
 800bfe2:	b29b      	uxth	r3, r3
 800bfe4:	86fb      	strh	r3, [r7, #54]	@ 0x36
		wid -= n;				/* pad length */
 800bfe6:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800bfe8:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800bfea:	1ad3      	subs	r3, r2, r3
 800bfec:	b29b      	uxth	r3, r3
 800bfee:	877b      	strh	r3, [r7, #58]	@ 0x3a

		/* Output preceding spaces */
		if ((flg & (F_LEFT | F_ZERO)) == 0 ) {
 800bff0:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800bff4:	f003 0311 	and.w	r3, r3, #17
 800bff8:	2b00      	cmp	r3, #0
 800bffa:	d10d      	bne.n	800c018 <tm_vsprintf+0x544>
			while (--wid >= 0) (*ostr)((UB*)" ", 1, par);
 800bffc:	e004      	b.n	800c008 <tm_vsprintf+0x534>
 800bffe:	68fb      	ldr	r3, [r7, #12]
 800c000:	68ba      	ldr	r2, [r7, #8]
 800c002:	2101      	movs	r1, #1
 800c004:	483e      	ldr	r0, [pc, #248]	@ (800c100 <tm_vsprintf+0x62c>)
 800c006:	4798      	blx	r3
 800c008:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800c00a:	3b01      	subs	r3, #1
 800c00c:	b29b      	uxth	r3, r3
 800c00e:	877b      	strh	r3, [r7, #58]	@ 0x3a
 800c010:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	@ 0x3a
 800c014:	2b00      	cmp	r3, #0
 800c016:	daf2      	bge.n	800bffe <tm_vsprintf+0x52a>
		}

		/* Output sign */
		if (sign != 0) {
 800c018:	7cfb      	ldrb	r3, [r7, #19]
 800c01a:	2b00      	cmp	r3, #0
 800c01c:	d005      	beq.n	800c02a <tm_vsprintf+0x556>
			(*ostr)(&sign, 1, par);
 800c01e:	f107 0013 	add.w	r0, r7, #19
 800c022:	68fb      	ldr	r3, [r7, #12]
 800c024:	68ba      	ldr	r2, [r7, #8]
 800c026:	2101      	movs	r1, #1
 800c028:	4798      	blx	r3
		}

		/* Output prefix "0x", "0X" or "0" */
		if ((base & 0x80) != 0) {
 800c02a:	f997 3026 	ldrsb.w	r3, [r7, #38]	@ 0x26
 800c02e:	2b00      	cmp	r3, #0
 800c030:	da17      	bge.n	800c062 <tm_vsprintf+0x58e>
			(*ostr)((UB*)"0", 1, par);
 800c032:	68fb      	ldr	r3, [r7, #12]
 800c034:	68ba      	ldr	r2, [r7, #8]
 800c036:	2101      	movs	r1, #1
 800c038:	4832      	ldr	r0, [pc, #200]	@ (800c104 <tm_vsprintf+0x630>)
 800c03a:	4798      	blx	r3
			if ((base & 0x10) != 0) {
 800c03c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800c040:	f003 0310 	and.w	r3, r3, #16
 800c044:	2b00      	cmp	r3, #0
 800c046:	d00c      	beq.n	800c062 <tm_vsprintf+0x58e>
				(*ostr)((base & 0x40) ? (UB*)"X" : (UB*)"x", 1, par);
 800c048:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800c04c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c050:	2b00      	cmp	r3, #0
 800c052:	d001      	beq.n	800c058 <tm_vsprintf+0x584>
 800c054:	482c      	ldr	r0, [pc, #176]	@ (800c108 <tm_vsprintf+0x634>)
 800c056:	e000      	b.n	800c05a <tm_vsprintf+0x586>
 800c058:	482c      	ldr	r0, [pc, #176]	@ (800c10c <tm_vsprintf+0x638>)
 800c05a:	68fb      	ldr	r3, [r7, #12]
 800c05c:	68ba      	ldr	r2, [r7, #8]
 800c05e:	2101      	movs	r1, #1
 800c060:	4798      	blx	r3
			}
		}

		/* Output preceding zeros for precision or padding */
		if ((n = prec) <= 0) {
 800c062:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800c064:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800c066:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 800c06a:	2b00      	cmp	r3, #0
 800c06c:	dc0f      	bgt.n	800c08e <tm_vsprintf+0x5ba>
			if ((flg & (F_LEFT | F_ZERO)) == F_ZERO ) {
 800c06e:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800c072:	f003 0311 	and.w	r3, r3, #17
 800c076:	2b10      	cmp	r3, #16
 800c078:	d109      	bne.n	800c08e <tm_vsprintf+0x5ba>
				n = wid;
 800c07a:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800c07c:	86fb      	strh	r3, [r7, #54]	@ 0x36
				wid = 0;
 800c07e:	2300      	movs	r3, #0
 800c080:	877b      	strh	r3, [r7, #58]	@ 0x3a
			}
		}
		while (--n >= 0) (*ostr)((UB*)"0", 1, par);
 800c082:	e004      	b.n	800c08e <tm_vsprintf+0x5ba>
 800c084:	68fb      	ldr	r3, [r7, #12]
 800c086:	68ba      	ldr	r2, [r7, #8]
 800c088:	2101      	movs	r1, #1
 800c08a:	481e      	ldr	r0, [pc, #120]	@ (800c104 <tm_vsprintf+0x630>)
 800c08c:	4798      	blx	r3
 800c08e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800c090:	3b01      	subs	r3, #1
 800c092:	b29b      	uxth	r3, r3
 800c094:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800c096:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 800c09a:	2b00      	cmp	r3, #0
 800c09c:	daf2      	bge.n	800c084 <tm_vsprintf+0x5b0>

		/* Output item string */
		(*ostr)(cbs, cbe - cbs, par);
 800c09e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c0a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c0a2:	1ad1      	subs	r1, r2, r3
 800c0a4:	68fb      	ldr	r3, [r7, #12]
 800c0a6:	68ba      	ldr	r2, [r7, #8]
 800c0a8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800c0aa:	4798      	blx	r3

		/* Output tailing spaces */
		while (--wid >= 0) (*ostr)((UB*)" ", 1, par);
 800c0ac:	e004      	b.n	800c0b8 <tm_vsprintf+0x5e4>
 800c0ae:	68fb      	ldr	r3, [r7, #12]
 800c0b0:	68ba      	ldr	r2, [r7, #8]
 800c0b2:	2101      	movs	r1, #1
 800c0b4:	4812      	ldr	r0, [pc, #72]	@ (800c100 <tm_vsprintf+0x62c>)
 800c0b6:	4798      	blx	r3
 800c0b8:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800c0ba:	3b01      	subs	r3, #1
 800c0bc:	b29b      	uxth	r3, r3
 800c0be:	877b      	strh	r3, [r7, #58]	@ 0x3a
 800c0c0:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	@ 0x3a
 800c0c4:	2b00      	cmp	r3, #0
 800c0c6:	daf2      	bge.n	800c0ae <tm_vsprintf+0x5da>
 800c0c8:	e000      	b.n	800c0cc <tm_vsprintf+0x5f8>
			continue;
 800c0ca:	bf00      	nop
	for (fms = NULL; (c = *fmt++) != '\0'; ) {
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	1c5a      	adds	r2, r3, #1
 800c0d0:	607a      	str	r2, [r7, #4]
 800c0d2:	781b      	ldrb	r3, [r3, #0]
 800c0d4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800c0d8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c0dc:	2b00      	cmp	r3, #0
 800c0de:	f47f ad03 	bne.w	800bae8 <tm_vsprintf+0x14>
	}

	/* Output last fix string */
	if (fms != NULL) {
 800c0e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c0e4:	2b00      	cmp	r3, #0
 800c0e6:	d007      	beq.n	800c0f8 <tm_vsprintf+0x624>
		(*ostr)(fms, fmt - fms - 1, par);
 800c0e8:	687a      	ldr	r2, [r7, #4]
 800c0ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c0ec:	1ad3      	subs	r3, r2, r3
 800c0ee:	1e59      	subs	r1, r3, #1
 800c0f0:	68fb      	ldr	r3, [r7, #12]
 800c0f2:	68ba      	ldr	r2, [r7, #8]
 800c0f4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c0f6:	4798      	blx	r3
	}
#if	TM_OUTBUF_SZ > 0
	/* Flush output */
	(*ostr)(NULL, 0, par);
#endif
}
 800c0f8:	bf00      	nop
 800c0fa:	3740      	adds	r7, #64	@ 0x40
 800c0fc:	46bd      	mov	sp, r7
 800c0fe:	bd80      	pop	{r7, pc}
 800c100:	0800d124 	.word	0x0800d124
 800c104:	0800d128 	.word	0x0800d128
 800c108:	0800d12c 	.word	0x0800d12c
 800c10c:	0800d130 	.word	0x0800d130

0800c110 <out_cons>:

/*
 *	Output to console
 */
LOCAL	void	out_cons( UB *str, INT len,  OutPar *par )
{
 800c110:	b580      	push	{r7, lr}
 800c112:	b084      	sub	sp, #16
 800c114:	af00      	add	r7, sp, #0
 800c116:	60f8      	str	r0, [r7, #12]
 800c118:	60b9      	str	r1, [r7, #8]
 800c11a:	607a      	str	r2, [r7, #4]
#if	TM_OUTBUF_SZ == 0
	/* Direct output to console */
	par->len += len;
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c122:	b29a      	uxth	r2, r3
 800c124:	68bb      	ldr	r3, [r7, #8]
 800c126:	b29b      	uxth	r3, r3
 800c128:	4413      	add	r3, r2
 800c12a:	b29b      	uxth	r3, r3
 800c12c:	b21a      	sxth	r2, r3
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	801a      	strh	r2, [r3, #0]
	while (--len >= 0) tm_putchar(*str++);
 800c132:	e006      	b.n	800c142 <out_cons+0x32>
 800c134:	68fb      	ldr	r3, [r7, #12]
 800c136:	1c5a      	adds	r2, r3, #1
 800c138:	60fa      	str	r2, [r7, #12]
 800c13a:	781b      	ldrb	r3, [r3, #0]
 800c13c:	4618      	mov	r0, r3
 800c13e:	f7ff fc47 	bl	800b9d0 <tm_putchar>
 800c142:	68bb      	ldr	r3, [r7, #8]
 800c144:	3b01      	subs	r3, #1
 800c146:	60bb      	str	r3, [r7, #8]
 800c148:	68bb      	ldr	r3, [r7, #8]
 800c14a:	2b00      	cmp	r3, #0
 800c14c:	daf2      	bge.n	800c134 <out_cons+0x24>
			}
			par->bufp[par->cnt++] = *str++;
		}
	}
#endif
}
 800c14e:	bf00      	nop
 800c150:	bf00      	nop
 800c152:	3710      	adds	r7, #16
 800c154:	46bd      	mov	sp, r7
 800c156:	bd80      	pop	{r7, pc}

0800c158 <tm_printf>:

EXPORT INT	tm_printf( const UB *format, ... )
{
 800c158:	b40f      	push	{r0, r1, r2, r3}
 800c15a:	b580      	push	{r7, lr}
 800c15c:	b082      	sub	sp, #8
 800c15e:	af00      	add	r7, sp, #0
	va_list	ap;

#if	TM_OUTBUF_SZ == 0
	H	len = 0;
 800c160:	2300      	movs	r3, #0
 800c162:	807b      	strh	r3, [r7, #2]

	va_start(ap, format);
 800c164:	f107 0314 	add.w	r3, r7, #20
 800c168:	607b      	str	r3, [r7, #4]
	tm_vsprintf(out_cons, (OutPar*)&len, format, ap);
 800c16a:	1cb9      	adds	r1, r7, #2
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	693a      	ldr	r2, [r7, #16]
 800c170:	4805      	ldr	r0, [pc, #20]	@ (800c188 <tm_printf+0x30>)
 800c172:	f7ff fcaf 	bl	800bad4 <tm_vsprintf>
	va_end(ap);
	return len;
 800c176:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
	va_start(ap, format);
	tm_vsprintf(out_cons, (OutPar*)&par, format, ap);
	va_end(ap);
	return par.len;
#endif
}
 800c17a:	4618      	mov	r0, r3
 800c17c:	3708      	adds	r7, #8
 800c17e:	46bd      	mov	sp, r7
 800c180:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c184:	b004      	add	sp, #16
 800c186:	4770      	bx	lr
 800c188:	0800c111 	.word	0x0800c111

0800c18c <out_w>:
{
 800c18c:	b480      	push	{r7}
 800c18e:	b083      	sub	sp, #12
 800c190:	af00      	add	r7, sp, #0
 800c192:	6078      	str	r0, [r7, #4]
 800c194:	6039      	str	r1, [r7, #0]
	*(_UW*)port = data;
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	683a      	ldr	r2, [r7, #0]
 800c19a:	601a      	str	r2, [r3, #0]
}
 800c19c:	bf00      	nop
 800c19e:	370c      	adds	r7, #12
 800c1a0:	46bd      	mov	sp, r7
 800c1a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1a6:	4770      	bx	lr

0800c1a8 <knl_force_dispatch>:
/* ----------------------------------------------------------------------- */
/*
 *	Task dispatcher startup
 */
EXPORT void knl_force_dispatch( void )
{
 800c1a8:	b580      	push	{r7, lr}
 800c1aa:	af00      	add	r7, sp, #0
	knl_dispatch_disabled = DDS_DISABLE_IMPLICIT;
 800c1ac:	4b07      	ldr	r3, [pc, #28]	@ (800c1cc <knl_force_dispatch+0x24>)
 800c1ae:	2201      	movs	r2, #1
 800c1b0:	601a      	str	r2, [r3, #0]
	knl_ctxtsk = NULL;
 800c1b2:	4b07      	ldr	r3, [pc, #28]	@ (800c1d0 <knl_force_dispatch+0x28>)
 800c1b4:	2200      	movs	r2, #0
 800c1b6:	601a      	str	r2, [r3, #0]
	out_w(SCB_ICSR, ICSR_PENDSVSET);	/* pendsv exception */
 800c1b8:	f04f 5180 	mov.w	r1, #268435456	@ 0x10000000
 800c1bc:	4805      	ldr	r0, [pc, #20]	@ (800c1d4 <knl_force_dispatch+0x2c>)
 800c1be:	f7ff ffe5 	bl	800c18c <out_w>
	set_basepri(0);
 800c1c2:	2000      	movs	r0, #0
 800c1c4:	f000 f951 	bl	800c46a <set_basepri>
}
 800c1c8:	bf00      	nop
 800c1ca:	bd80      	pop	{r7, pc}
 800c1cc:	240025d4 	.word	0x240025d4
 800c1d0:	240025d8 	.word	0x240025d8
 800c1d4:	e000ed04 	.word	0xe000ed04

0800c1d8 <knl_dispatch>:

EXPORT void knl_dispatch( void )
{
 800c1d8:	b580      	push	{r7, lr}
 800c1da:	af00      	add	r7, sp, #0
	out_w(SCB_ICSR, ICSR_PENDSVSET);	/* pendsv exception */
 800c1dc:	f04f 5180 	mov.w	r1, #268435456	@ 0x10000000
 800c1e0:	4802      	ldr	r0, [pc, #8]	@ (800c1ec <knl_dispatch+0x14>)
 800c1e2:	f7ff ffd3 	bl	800c18c <out_w>
}
 800c1e6:	bf00      	nop
 800c1e8:	bd80      	pop	{r7, pc}
 800c1ea:	bf00      	nop
 800c1ec:	e000ed04 	.word	0xe000ed04

0800c1f0 <knl_EnterTaskIndependent>:
/*
 * Move to/Restore task independent part
 */
Inline void knl_EnterTaskIndependent( void )
{
 800c1f0:	b480      	push	{r7}
 800c1f2:	af00      	add	r7, sp, #0
	knl_taskindp++;
 800c1f4:	4b04      	ldr	r3, [pc, #16]	@ (800c208 <knl_EnterTaskIndependent+0x18>)
 800c1f6:	681b      	ldr	r3, [r3, #0]
 800c1f8:	3301      	adds	r3, #1
 800c1fa:	4a03      	ldr	r2, [pc, #12]	@ (800c208 <knl_EnterTaskIndependent+0x18>)
 800c1fc:	6013      	str	r3, [r2, #0]
}
 800c1fe:	bf00      	nop
 800c200:	46bd      	mov	sp, r7
 800c202:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c206:	4770      	bx	lr
 800c208:	240011a4 	.word	0x240011a4

0800c20c <knl_LeaveTaskIndependent>:
Inline void knl_LeaveTaskIndependent( void )
{
 800c20c:	b480      	push	{r7}
 800c20e:	af00      	add	r7, sp, #0
	knl_taskindp--;
 800c210:	4b04      	ldr	r3, [pc, #16]	@ (800c224 <knl_LeaveTaskIndependent+0x18>)
 800c212:	681b      	ldr	r3, [r3, #0]
 800c214:	3b01      	subs	r3, #1
 800c216:	4a03      	ldr	r2, [pc, #12]	@ (800c224 <knl_LeaveTaskIndependent+0x18>)
 800c218:	6013      	str	r3, [r2, #0]
}
 800c21a:	bf00      	nop
 800c21c:	46bd      	mov	sp, r7
 800c21e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c222:	4770      	bx	lr
 800c224:	240011a4 	.word	0x240011a4

0800c228 <knl_systim_inthdr>:
/* ------------------------------------------------------------------------ */
/*
 * System-timer Interrupt handler
 */
EXPORT void knl_systim_inthdr(void)
{
 800c228:	b580      	push	{r7, lr}
 800c22a:	af00      	add	r7, sp, #0
	ENTER_TASK_INDEPENDENT;
 800c22c:	f7ff ffe0 	bl	800c1f0 <knl_EnterTaskIndependent>

	knl_timer_handler();
 800c230:	f7fe fa82 	bl	800a738 <knl_timer_handler>

	LEAVE_TASK_INDEPENDENT;
 800c234:	f7ff ffea 	bl	800c20c <knl_LeaveTaskIndependent>
}
 800c238:	bf00      	nop
 800c23a:	bd80      	pop	{r7, pc}

0800c23c <knl_init_interrupt>:
/* ------------------------------------------------------------------------ */
/*
 * Interrupt initialize
 */
EXPORT ER knl_init_interrupt( void )
{
 800c23c:	b480      	push	{r7}
 800c23e:	af00      	add	r7, sp, #0
	/* Set Exception handler */
	knl_exctbl[14]	= (UW)knl_dispatch_entry;
 800c240:	4a05      	ldr	r2, [pc, #20]	@ (800c258 <knl_init_interrupt+0x1c>)
 800c242:	4b06      	ldr	r3, [pc, #24]	@ (800c25c <knl_init_interrupt+0x20>)
 800c244:	639a      	str	r2, [r3, #56]	@ 0x38
	knl_exctbl[15]	= (UW)knl_systim_inthdr;
 800c246:	4a06      	ldr	r2, [pc, #24]	@ (800c260 <knl_init_interrupt+0x24>)
 800c248:	4b04      	ldr	r3, [pc, #16]	@ (800c25c <knl_init_interrupt+0x20>)
 800c24a:	63da      	str	r2, [r3, #60]	@ 0x3c

	return E_OK;
 800c24c:	2300      	movs	r3, #0
}
 800c24e:	4618      	mov	r0, r3
 800c250:	46bd      	mov	sp, r7
 800c252:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c256:	4770      	bx	lr
 800c258:	08000311 	.word	0x08000311
 800c25c:	24000200 	.word	0x24000200
 800c260:	0800c229 	.word	0x0800c229

0800c264 <out_w>:
{
 800c264:	b480      	push	{r7}
 800c266:	b083      	sub	sp, #12
 800c268:	af00      	add	r7, sp, #0
 800c26a:	6078      	str	r0, [r7, #4]
 800c26c:	6039      	str	r1, [r7, #0]
	*(_UW*)port = data;
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	683a      	ldr	r2, [r7, #0]
 800c272:	601a      	str	r2, [r3, #0]
}
 800c274:	bf00      	nop
 800c276:	370c      	adds	r7, #12
 800c278:	46bd      	mov	sp, r7
 800c27a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c27e:	4770      	bx	lr

0800c280 <in_w>:
{
 800c280:	b480      	push	{r7}
 800c282:	b083      	sub	sp, #12
 800c284:	af00      	add	r7, sp, #0
 800c286:	6078      	str	r0, [r7, #4]
	return *(_UW*)port;
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	681b      	ldr	r3, [r3, #0]
}
 800c28c:	4618      	mov	r0, r3
 800c28e:	370c      	adds	r7, #12
 800c290:	46bd      	mov	sp, r7
 800c292:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c296:	4770      	bx	lr

0800c298 <halif_get_sysclk>:
uint32_t HAL_RCC_GetHCLKFreq(void);
uint32_t HAL_RCC_GetPCLK1Freq(void);
uint32_t HAL_RCC_GetPCLK2Freq(void);

Inline uint32_t halif_get_sysclk(void)
{
 800c298:	b580      	push	{r7, lr}
 800c29a:	af00      	add	r7, sp, #0
	return HAL_RCC_GetSysClockFreq();
 800c29c:	f7f7 faee 	bl	800387c <HAL_RCC_GetSysClockFreq>
 800c2a0:	4603      	mov	r3, r0
}
 800c2a2:	4618      	mov	r0, r3
 800c2a4:	bd80      	pop	{r7, pc}
	...

0800c2a8 <knl_start_mtkernel>:
EXPORT void		*knl_sysmem_top	= 0;
EXPORT void		*knl_sysmem_end	= 0;
#endif

EXPORT void knl_start_mtkernel(void)
{
 800c2a8:	b580      	push	{r7, lr}
 800c2aa:	b084      	sub	sp, #16
 800c2ac:	af00      	add	r7, sp, #0
	UW	*src, *top;
	UW	reg;
	INT	i;

	disint();		// Disable Interrupt
 800c2ae:	f000 f8f8 	bl	800c4a2 <disint>

	knl_startup_hw();
 800c2b2:	f000 f893 	bl	800c3dc <knl_startup_hw>

	/* Copy exception handler (ROM -> RAM) */
	src = knl_exctbl_o = (UW*)in_w(SCB_VTOR);
 800c2b6:	482c      	ldr	r0, [pc, #176]	@ (800c368 <knl_start_mtkernel+0xc0>)
 800c2b8:	f7ff ffe2 	bl	800c280 <in_w>
 800c2bc:	4603      	mov	r3, r0
 800c2be:	461a      	mov	r2, r3
 800c2c0:	4b2a      	ldr	r3, [pc, #168]	@ (800c36c <knl_start_mtkernel+0xc4>)
 800c2c2:	601a      	str	r2, [r3, #0]
 800c2c4:	4b29      	ldr	r3, [pc, #164]	@ (800c36c <knl_start_mtkernel+0xc4>)
 800c2c6:	681b      	ldr	r3, [r3, #0]
 800c2c8:	60fb      	str	r3, [r7, #12]
	top = (UW*)knl_exctbl;
 800c2ca:	4b29      	ldr	r3, [pc, #164]	@ (800c370 <knl_start_mtkernel+0xc8>)
 800c2cc:	60bb      	str	r3, [r7, #8]
	for(i=0; i < (N_SYSVEC + N_INTVEC); i++) {
 800c2ce:	2300      	movs	r3, #0
 800c2d0:	607b      	str	r3, [r7, #4]
 800c2d2:	e00a      	b.n	800c2ea <knl_start_mtkernel+0x42>
		*top++ = *src++;
 800c2d4:	68fa      	ldr	r2, [r7, #12]
 800c2d6:	1d13      	adds	r3, r2, #4
 800c2d8:	60fb      	str	r3, [r7, #12]
 800c2da:	68bb      	ldr	r3, [r7, #8]
 800c2dc:	1d19      	adds	r1, r3, #4
 800c2de:	60b9      	str	r1, [r7, #8]
 800c2e0:	6812      	ldr	r2, [r2, #0]
 800c2e2:	601a      	str	r2, [r3, #0]
	for(i=0; i < (N_SYSVEC + N_INTVEC); i++) {
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	3301      	adds	r3, #1
 800c2e8:	607b      	str	r3, [r7, #4]
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	2ba5      	cmp	r3, #165	@ 0xa5
 800c2ee:	ddf1      	ble.n	800c2d4 <knl_start_mtkernel+0x2c>
	}
	out_w(SCB_VTOR, (UW)knl_exctbl);
 800c2f0:	4b1f      	ldr	r3, [pc, #124]	@ (800c370 <knl_start_mtkernel+0xc8>)
 800c2f2:	4619      	mov	r1, r3
 800c2f4:	481c      	ldr	r0, [pc, #112]	@ (800c368 <knl_start_mtkernel+0xc0>)
 800c2f6:	f7ff ffb5 	bl	800c264 <out_w>

	/* Configure exception priorities */
	reg = *(_UW*)SCB_AIRCR;
 800c2fa:	4b1e      	ldr	r3, [pc, #120]	@ (800c374 <knl_start_mtkernel+0xcc>)
 800c2fc:	681b      	ldr	r3, [r3, #0]
 800c2fe:	603b      	str	r3, [r7, #0]
	reg = (reg & (~AIRCR_PRIGROUP3)) | AIRCR_PRIGROUP0;	// PRIGRP:SUBPRI = 4 : 4
 800c300:	683b      	ldr	r3, [r7, #0]
 800c302:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c306:	603b      	str	r3, [r7, #0]
	*(_UW*)SCB_AIRCR = (reg & 0x0000FFFF) | AIRCR_VECTKEY;
 800c308:	683b      	ldr	r3, [r7, #0]
 800c30a:	b29a      	uxth	r2, r3
 800c30c:	4919      	ldr	r1, [pc, #100]	@ (800c374 <knl_start_mtkernel+0xcc>)
 800c30e:	4b1a      	ldr	r3, [pc, #104]	@ (800c378 <knl_start_mtkernel+0xd0>)
 800c310:	4313      	orrs	r3, r2
 800c312:	600b      	str	r3, [r1, #0]

	out_w(SCB_SHPR2, SCB_SHPR2_VAL);			// SVC pri = 0
 800c314:	2100      	movs	r1, #0
 800c316:	4819      	ldr	r0, [pc, #100]	@ (800c37c <knl_start_mtkernel+0xd4>)
 800c318:	f7ff ffa4 	bl	800c264 <out_w>
	out_w(SCB_SHPR3, SCB_SHPR3_VAL);			// SysTick = 1 , PendSV = 7
 800c31c:	4918      	ldr	r1, [pc, #96]	@ (800c380 <knl_start_mtkernel+0xd8>)
 800c31e:	4819      	ldr	r0, [pc, #100]	@ (800c384 <knl_start_mtkernel+0xdc>)
 800c320:	f7ff ffa0 	bl	800c264 <out_w>

	knl_sysclk	= halif_get_sysclk();			// Get System clock frequency
 800c324:	f7ff ffb8 	bl	800c298 <halif_get_sysclk>
 800c328:	4603      	mov	r3, r0
 800c32a:	4a17      	ldr	r2, [pc, #92]	@ (800c388 <knl_start_mtkernel+0xe0>)
 800c32c:	6013      	str	r3, [r2, #0]
	knl_lowmem_top = knl_system_mem;
	knl_lowmem_limit = &knl_system_mem[SYSTEM_MEM_SIZE/sizeof(UW)];
#else
	/* Set System memory area */
	if(INTERNAL_RAM_START > SYSTEMAREA_TOP) {
		knl_lowmem_top = (UW*)INTERNAL_RAM_START;
 800c32e:	4b17      	ldr	r3, [pc, #92]	@ (800c38c <knl_start_mtkernel+0xe4>)
 800c330:	f04f 5210 	mov.w	r2, #603979776	@ 0x24000000
 800c334:	601a      	str	r2, [r3, #0]
	} else {
		knl_lowmem_top = (UW*)SYSTEMAREA_TOP;
	}
	if((UW)knl_lowmem_top < (UW)&_end) {
 800c336:	4b15      	ldr	r3, [pc, #84]	@ (800c38c <knl_start_mtkernel+0xe4>)
 800c338:	681b      	ldr	r3, [r3, #0]
 800c33a:	461a      	mov	r2, r3
 800c33c:	4b14      	ldr	r3, [pc, #80]	@ (800c390 <knl_start_mtkernel+0xe8>)
 800c33e:	429a      	cmp	r2, r3
 800c340:	d202      	bcs.n	800c348 <knl_start_mtkernel+0xa0>
		knl_lowmem_top = (UW*)&_end;
 800c342:	4b12      	ldr	r3, [pc, #72]	@ (800c38c <knl_start_mtkernel+0xe4>)
 800c344:	4a12      	ldr	r2, [pc, #72]	@ (800c390 <knl_start_mtkernel+0xe8>)
 800c346:	601a      	str	r2, [r3, #0]
	}

	if((SYSTEMAREA_END != 0) && (INTERNAL_RAM_END > CNF_SYSTEMAREA_END)) {
		knl_lowmem_limit = (UW*)(SYSTEMAREA_END - EXC_STACK_SIZE);
	} else {
		knl_lowmem_limit = (UW*)(INTERNAL_RAM_END - EXC_STACK_SIZE);
 800c348:	4b12      	ldr	r3, [pc, #72]	@ (800c394 <knl_start_mtkernel+0xec>)
 800c34a:	4a13      	ldr	r2, [pc, #76]	@ (800c398 <knl_start_mtkernel+0xf0>)
 800c34c:	601a      	str	r2, [r3, #0]
	}
#endif

#if USE_DEBUG_SYSMEMINFO
	knl_sysmem_top	= knl_lowmem_top;
 800c34e:	4b0f      	ldr	r3, [pc, #60]	@ (800c38c <knl_start_mtkernel+0xe4>)
 800c350:	681b      	ldr	r3, [r3, #0]
 800c352:	4a12      	ldr	r2, [pc, #72]	@ (800c39c <knl_start_mtkernel+0xf4>)
 800c354:	6013      	str	r3, [r2, #0]
	knl_sysmem_end	= knl_lowmem_limit;
 800c356:	4b0f      	ldr	r3, [pc, #60]	@ (800c394 <knl_start_mtkernel+0xec>)
 800c358:	681b      	ldr	r3, [r3, #0]
 800c35a:	4a11      	ldr	r2, [pc, #68]	@ (800c3a0 <knl_start_mtkernel+0xf8>)
 800c35c:	6013      	str	r3, [r2, #0]
#endif	// USE_DEBUG_MEMINFO
#endif	// USE_IMALLOC

	/* Startup Kernel */
	knl_main();		// *** No return ****/
 800c35e:	f7fb ff03 	bl	8008168 <knl_main>
	while(1);		// guard - infinite loops
 800c362:	bf00      	nop
 800c364:	e7fd      	b.n	800c362 <knl_start_mtkernel+0xba>
 800c366:	bf00      	nop
 800c368:	e000ed08 	.word	0xe000ed08
 800c36c:	240011ac 	.word	0x240011ac
 800c370:	24000200 	.word	0x24000200
 800c374:	e000ed0c 	.word	0xe000ed0c
 800c378:	05fa0000 	.word	0x05fa0000
 800c37c:	e000ed1c 	.word	0xe000ed1c
 800c380:	10f00000 	.word	0x10f00000
 800c384:	e000ed20 	.word	0xe000ed20
 800c388:	240011a8 	.word	0x240011a8
 800c38c:	240011b0 	.word	0x240011b0
 800c390:	240035e0 	.word	0x240035e0
 800c394:	240011b4 	.word	0x240011b4
 800c398:	24050000 	.word	0x24050000
 800c39c:	240011b8 	.word	0x240011b8
 800c3a0:	240011bc 	.word	0x240011bc

0800c3a4 <knl_init_device>:
/*
 * Initialization before micro T-Kernel starts
 */

EXPORT ER knl_init_device( void )
{
 800c3a4:	b480      	push	{r7}
 800c3a6:	af00      	add	r7, sp, #0
	return E_OK;
 800c3a8:	2300      	movs	r3, #0
}
 800c3aa:	4618      	mov	r0, r3
 800c3ac:	46bd      	mov	sp, r7
 800c3ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3b2:	4770      	bx	lr

0800c3b4 <knl_start_device>:
/*
 * Start processing after T-Kernel starts
 *	Called from the initial task contexts.
 */
EXPORT ER knl_start_device( void )
{
 800c3b4:	b480      	push	{r7}
 800c3b6:	b083      	sub	sp, #12
 800c3b8:	af00      	add	r7, sp, #0
	ER	err	= E_OK;
 800c3ba:	2300      	movs	r3, #0
 800c3bc:	607b      	str	r3, [r7, #4]
	if(err < E_OK) return err;

#endif
#endif	/* DEVCNF_USE_HAL_ADC */

	return err;
 800c3be:	687b      	ldr	r3, [r7, #4]
}
 800c3c0:	4618      	mov	r0, r3
 800c3c2:	370c      	adds	r7, #12
 800c3c4:	46bd      	mov	sp, r7
 800c3c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3ca:	4770      	bx	lr

0800c3cc <knl_finish_device>:
 * System finalization
 *	Called just before system shutdown.
 *	Execute finalization that must be done before system shutdown.
 */
EXPORT ER knl_finish_device( void )
{
 800c3cc:	b480      	push	{r7}
 800c3ce:	af00      	add	r7, sp, #0
	return E_OK;
 800c3d0:	2300      	movs	r3, #0
}
 800c3d2:	4618      	mov	r0, r3
 800c3d4:	46bd      	mov	sp, r7
 800c3d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3da:	4770      	bx	lr

0800c3dc <knl_startup_hw>:

/*
 * Startup Device
 */
EXPORT void knl_startup_hw(void)
{
 800c3dc:	b480      	push	{r7}
 800c3de:	af00      	add	r7, sp, #0
#if USE_PTMR
	void knl_init_ptmr(void);
	knl_init_ptmr();
#endif
}
 800c3e0:	bf00      	nop
 800c3e2:	46bd      	mov	sp, r7
 800c3e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3e8:	4770      	bx	lr

0800c3ea <knl_shutdown_hw>:
#if USE_SHUTDOWN
/*
 * Shutdown device
 */
EXPORT void knl_shutdown_hw( void )
{
 800c3ea:	b580      	push	{r7, lr}
 800c3ec:	af00      	add	r7, sp, #0
	disint();
 800c3ee:	f000 f858 	bl	800c4a2 <disint>
	while(1);
 800c3f2:	bf00      	nop
 800c3f4:	e7fd      	b.n	800c3f2 <knl_shutdown_hw+0x8>
	...

0800c3f8 <knl_restart_hw>:
 *	mode = -1		reset and re-start	(Reset -> Boot -> Start)
 *	mode = -2		fast re-start		(Start)
 *	mode = -3		Normal re-start		(Boot -> Start)
 */
EXPORT ER knl_restart_hw( W mode )
{
 800c3f8:	b580      	push	{r7, lr}
 800c3fa:	b082      	sub	sp, #8
 800c3fc:	af00      	add	r7, sp, #0
 800c3fe:	6078      	str	r0, [r7, #4]
	switch(mode) {
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c406:	d00b      	beq.n	800c420 <knl_restart_hw+0x28>
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	2b00      	cmp	r3, #0
 800c40c:	da1a      	bge.n	800c444 <knl_restart_hw+0x4c>
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	f113 0f03 	cmn.w	r3, #3
 800c414:	d010      	beq.n	800c438 <knl_restart_hw+0x40>
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	f113 0f02 	cmn.w	r3, #2
 800c41c:	d006      	beq.n	800c42c <knl_restart_hw+0x34>
 800c41e:	e011      	b.n	800c444 <knl_restart_hw+0x4c>
	case -1: /* Reset and re-start */
		SYSTEM_MESSAGE("\n<< SYSTEM RESET & RESTART >>\n");
 800c420:	480b      	ldr	r0, [pc, #44]	@ (800c450 <knl_restart_hw+0x58>)
 800c422:	f7ff faf9 	bl	800ba18 <tm_putstring>
		return E_NOSPT;
 800c426:	f06f 0308 	mvn.w	r3, #8
 800c42a:	e00d      	b.n	800c448 <knl_restart_hw+0x50>
	case -2: /* fast re-start */
		SYSTEM_MESSAGE("\n<< SYSTEM FAST RESTART >>\n");
 800c42c:	4809      	ldr	r0, [pc, #36]	@ (800c454 <knl_restart_hw+0x5c>)
 800c42e:	f7ff faf3 	bl	800ba18 <tm_putstring>
		return E_NOSPT;
 800c432:	f06f 0308 	mvn.w	r3, #8
 800c436:	e007      	b.n	800c448 <knl_restart_hw+0x50>
	case -3: /* Normal re-start */
		SYSTEM_MESSAGE("\n<< SYSTEM RESTART >>\n");
 800c438:	4807      	ldr	r0, [pc, #28]	@ (800c458 <knl_restart_hw+0x60>)
 800c43a:	f7ff faed 	bl	800ba18 <tm_putstring>
		return E_NOSPT;
 800c43e:	f06f 0308 	mvn.w	r3, #8
 800c442:	e001      	b.n	800c448 <knl_restart_hw+0x50>
	default:
		return E_PAR;
 800c444:	f06f 0310 	mvn.w	r3, #16
	}
}
 800c448:	4618      	mov	r0, r3
 800c44a:	3708      	adds	r7, #8
 800c44c:	46bd      	mov	sp, r7
 800c44e:	bd80      	pop	{r7, pc}
 800c450:	0800d134 	.word	0x0800d134
 800c454:	0800d154 	.word	0x0800d154
 800c458:	0800d170 	.word	0x0800d170

0800c45c <low_pow>:

/*
 * Switch to power-saving mode
 */
EXPORT void low_pow( void )
{
 800c45c:	b480      	push	{r7}
 800c45e:	af00      	add	r7, sp, #0
}
 800c460:	bf00      	nop
 800c462:	46bd      	mov	sp, r7
 800c464:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c468:	4770      	bx	lr

0800c46a <set_basepri>:

/*
 * Set Base Priority register
 */
EXPORT void set_basepri(UW intsts)
{	
 800c46a:	b480      	push	{r7}
 800c46c:	b083      	sub	sp, #12
 800c46e:	af00      	add	r7, sp, #0
 800c470:	6078      	str	r0, [r7, #4]
	Asm("msr basepri, %0":: "r"(intsts));
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	f383 8811 	msr	BASEPRI, r3
	Asm("isb");
 800c478:	f3bf 8f6f 	isb	sy
}
 800c47c:	bf00      	nop
 800c47e:	370c      	adds	r7, #12
 800c480:	46bd      	mov	sp, r7
 800c482:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c486:	4770      	bx	lr

0800c488 <get_basepri>:

/*
 * Get Base Priority register
 */
EXPORT UW get_basepri(void)
{
 800c488:	b480      	push	{r7}
 800c48a:	b083      	sub	sp, #12
 800c48c:	af00      	add	r7, sp, #0
	UW	basepri;

	Asm("mrs %0, basepri": "=r"(basepri));
 800c48e:	f3ef 8311 	mrs	r3, BASEPRI
 800c492:	607b      	str	r3, [r7, #4]
	return basepri;
 800c494:	687b      	ldr	r3, [r7, #4]
}
 800c496:	4618      	mov	r0, r3
 800c498:	370c      	adds	r7, #12
 800c49a:	46bd      	mov	sp, r7
 800c49c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4a0:	4770      	bx	lr

0800c4a2 <disint>:

/* 
 * Disable interrupt 
 */
EXPORT UW disint(void)
{
 800c4a2:	b480      	push	{r7}
 800c4a4:	b083      	sub	sp, #12
 800c4a6:	af00      	add	r7, sp, #0
	UW	intsts, maxint;

	maxint = INTPRI_VAL(INTPRI_MAX_EXTINT_PRI);
 800c4a8:	2310      	movs	r3, #16
 800c4aa:	607b      	str	r3, [r7, #4]
	Asm("mrs %0, basepri": "=r"(intsts));
 800c4ac:	f3ef 8311 	mrs	r3, BASEPRI
 800c4b0:	603b      	str	r3, [r7, #0]
	Asm("msr basepri, %0":: "r"(maxint));
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	f383 8811 	msr	BASEPRI, r3

	return intsts;
 800c4b8:	683b      	ldr	r3, [r7, #0]
}
 800c4ba:	4618      	mov	r0, r3
 800c4bc:	370c      	adds	r7, #12
 800c4be:	46bd      	mov	sp, r7
 800c4c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4c4:	4770      	bx	lr

0800c4c6 <halif_get_pclk1>:
{
	return HAL_RCC_GetHCLKFreq();
}

Inline uint32_t halif_get_pclk1(void)
{
 800c4c6:	b580      	push	{r7, lr}
 800c4c8:	af00      	add	r7, sp, #0
	return HAL_RCC_GetPCLK1Freq();
 800c4ca:	f7f7 fb81 	bl	8003bd0 <HAL_RCC_GetPCLK1Freq>
 800c4ce:	4603      	mov	r3, r0
}
 800c4d0:	4618      	mov	r0, r3
 800c4d2:	bd80      	pop	{r7, pc}

0800c4d4 <tm_snd_dat>:

/* Communication speed */
#define UART_BAUD	(115200)			/* 115200 bps */

EXPORT	void	tm_snd_dat( const UB* buf, INT size )
{
 800c4d4:	b480      	push	{r7}
 800c4d6:	b085      	sub	sp, #20
 800c4d8:	af00      	add	r7, sp, #0
 800c4da:	6078      	str	r0, [r7, #4]
 800c4dc:	6039      	str	r1, [r7, #0]
	UB	*b;

	for( b = (UB *)buf; size > 0; size--, b++ ){
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	60fb      	str	r3, [r7, #12]
 800c4e2:	e017      	b.n	800c514 <tm_snd_dat+0x40>
		while ((UART_ISR & ISR_TXE) == 0 );
 800c4e4:	bf00      	nop
 800c4e6:	4b10      	ldr	r3, [pc, #64]	@ (800c528 <tm_snd_dat+0x54>)
 800c4e8:	681b      	ldr	r3, [r3, #0]
 800c4ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c4ee:	2b00      	cmp	r3, #0
 800c4f0:	d0f9      	beq.n	800c4e6 <tm_snd_dat+0x12>
		UART_TDR = *b;
 800c4f2:	68fb      	ldr	r3, [r7, #12]
 800c4f4:	781a      	ldrb	r2, [r3, #0]
 800c4f6:	4b0d      	ldr	r3, [pc, #52]	@ (800c52c <tm_snd_dat+0x58>)
 800c4f8:	601a      	str	r2, [r3, #0]
		while ((UART_ISR & ISR_TC) == 0 );
 800c4fa:	bf00      	nop
 800c4fc:	4b0a      	ldr	r3, [pc, #40]	@ (800c528 <tm_snd_dat+0x54>)
 800c4fe:	681b      	ldr	r3, [r3, #0]
 800c500:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c504:	2b00      	cmp	r3, #0
 800c506:	d0f9      	beq.n	800c4fc <tm_snd_dat+0x28>
	for( b = (UB *)buf; size > 0; size--, b++ ){
 800c508:	683b      	ldr	r3, [r7, #0]
 800c50a:	3b01      	subs	r3, #1
 800c50c:	603b      	str	r3, [r7, #0]
 800c50e:	68fb      	ldr	r3, [r7, #12]
 800c510:	3301      	adds	r3, #1
 800c512:	60fb      	str	r3, [r7, #12]
 800c514:	683b      	ldr	r3, [r7, #0]
 800c516:	2b00      	cmp	r3, #0
 800c518:	dce4      	bgt.n	800c4e4 <tm_snd_dat+0x10>
	}
}
 800c51a:	bf00      	nop
 800c51c:	bf00      	nop
 800c51e:	3714      	adds	r7, #20
 800c520:	46bd      	mov	sp, r7
 800c522:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c526:	4770      	bx	lr
 800c528:	4000481c 	.word	0x4000481c
 800c52c:	40004828 	.word	0x40004828

0800c530 <tm_com_init>:
}

UW get_pclk1(void);

EXPORT	void	tm_com_init(void)
{
 800c530:	b580      	push	{r7, lr}
 800c532:	b082      	sub	sp, #8
 800c534:	af00      	add	r7, sp, #0
	UW	pclk1;

	/* Initialize serial communication. Disable all interrupt. */
	UART_CR1 = 0;		/* 8bit, Non parity (Reset value) */
 800c536:	4b0e      	ldr	r3, [pc, #56]	@ (800c570 <tm_com_init+0x40>)
 800c538:	2200      	movs	r2, #0
 800c53a:	601a      	str	r2, [r3, #0]
	UART_CR2 = 0;		/* Stop bit 1 (Reset value) */
 800c53c:	4b0d      	ldr	r3, [pc, #52]	@ (800c574 <tm_com_init+0x44>)
 800c53e:	2200      	movs	r2, #0
 800c540:	601a      	str	r2, [r3, #0]
	UART_CR3 = 0;		/* No hard flow control (Reset value) */
 800c542:	4b0d      	ldr	r3, [pc, #52]	@ (800c578 <tm_com_init+0x48>)
 800c544:	2200      	movs	r2, #0
 800c546:	601a      	str	r2, [r3, #0]

	/* Set baud rate */
	pclk1 = halif_get_pclk1();
 800c548:	f7ff ffbd 	bl	800c4c6 <halif_get_pclk1>
 800c54c:	6078      	str	r0, [r7, #4]
	UART_BRR = (pclk1 + UART_BAUD/2)/UART_BAUD;
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	f503 4361 	add.w	r3, r3, #57600	@ 0xe100
 800c554:	4a09      	ldr	r2, [pc, #36]	@ (800c57c <tm_com_init+0x4c>)
 800c556:	490a      	ldr	r1, [pc, #40]	@ (800c580 <tm_com_init+0x50>)
 800c558:	fba1 1303 	umull	r1, r3, r1, r3
 800c55c:	0c1b      	lsrs	r3, r3, #16
 800c55e:	6013      	str	r3, [r2, #0]

	UART_CR1 = CR1_UE | CR1_RE |CR1_TE;	/* Start UART */
 800c560:	4b03      	ldr	r3, [pc, #12]	@ (800c570 <tm_com_init+0x40>)
 800c562:	220d      	movs	r2, #13
 800c564:	601a      	str	r2, [r3, #0]
}
 800c566:	bf00      	nop
 800c568:	3708      	adds	r7, #8
 800c56a:	46bd      	mov	sp, r7
 800c56c:	bd80      	pop	{r7, pc}
 800c56e:	bf00      	nop
 800c570:	40004800 	.word	0x40004800
 800c574:	40004804 	.word	0x40004804
 800c578:	40004808 	.word	0x40004808
 800c57c:	4000480c 	.word	0x4000480c
 800c580:	91a2b3c5 	.word	0x91a2b3c5

0800c584 <siprintf>:
 800c584:	b40e      	push	{r1, r2, r3}
 800c586:	b500      	push	{lr}
 800c588:	b09c      	sub	sp, #112	@ 0x70
 800c58a:	ab1d      	add	r3, sp, #116	@ 0x74
 800c58c:	9002      	str	r0, [sp, #8]
 800c58e:	9006      	str	r0, [sp, #24]
 800c590:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800c594:	4809      	ldr	r0, [pc, #36]	@ (800c5bc <siprintf+0x38>)
 800c596:	9107      	str	r1, [sp, #28]
 800c598:	9104      	str	r1, [sp, #16]
 800c59a:	4909      	ldr	r1, [pc, #36]	@ (800c5c0 <siprintf+0x3c>)
 800c59c:	f853 2b04 	ldr.w	r2, [r3], #4
 800c5a0:	9105      	str	r1, [sp, #20]
 800c5a2:	6800      	ldr	r0, [r0, #0]
 800c5a4:	9301      	str	r3, [sp, #4]
 800c5a6:	a902      	add	r1, sp, #8
 800c5a8:	f000 f994 	bl	800c8d4 <_svfiprintf_r>
 800c5ac:	9b02      	ldr	r3, [sp, #8]
 800c5ae:	2200      	movs	r2, #0
 800c5b0:	701a      	strb	r2, [r3, #0]
 800c5b2:	b01c      	add	sp, #112	@ 0x70
 800c5b4:	f85d eb04 	ldr.w	lr, [sp], #4
 800c5b8:	b003      	add	sp, #12
 800c5ba:	4770      	bx	lr
 800c5bc:	24000040 	.word	0x24000040
 800c5c0:	ffff0208 	.word	0xffff0208

0800c5c4 <memset>:
 800c5c4:	4402      	add	r2, r0
 800c5c6:	4603      	mov	r3, r0
 800c5c8:	4293      	cmp	r3, r2
 800c5ca:	d100      	bne.n	800c5ce <memset+0xa>
 800c5cc:	4770      	bx	lr
 800c5ce:	f803 1b01 	strb.w	r1, [r3], #1
 800c5d2:	e7f9      	b.n	800c5c8 <memset+0x4>

0800c5d4 <__errno>:
 800c5d4:	4b01      	ldr	r3, [pc, #4]	@ (800c5dc <__errno+0x8>)
 800c5d6:	6818      	ldr	r0, [r3, #0]
 800c5d8:	4770      	bx	lr
 800c5da:	bf00      	nop
 800c5dc:	24000040 	.word	0x24000040

0800c5e0 <__libc_init_array>:
 800c5e0:	b570      	push	{r4, r5, r6, lr}
 800c5e2:	4d0d      	ldr	r5, [pc, #52]	@ (800c618 <__libc_init_array+0x38>)
 800c5e4:	4c0d      	ldr	r4, [pc, #52]	@ (800c61c <__libc_init_array+0x3c>)
 800c5e6:	1b64      	subs	r4, r4, r5
 800c5e8:	10a4      	asrs	r4, r4, #2
 800c5ea:	2600      	movs	r6, #0
 800c5ec:	42a6      	cmp	r6, r4
 800c5ee:	d109      	bne.n	800c604 <__libc_init_array+0x24>
 800c5f0:	4d0b      	ldr	r5, [pc, #44]	@ (800c620 <__libc_init_array+0x40>)
 800c5f2:	4c0c      	ldr	r4, [pc, #48]	@ (800c624 <__libc_init_array+0x44>)
 800c5f4:	f000 fc66 	bl	800cec4 <_init>
 800c5f8:	1b64      	subs	r4, r4, r5
 800c5fa:	10a4      	asrs	r4, r4, #2
 800c5fc:	2600      	movs	r6, #0
 800c5fe:	42a6      	cmp	r6, r4
 800c600:	d105      	bne.n	800c60e <__libc_init_array+0x2e>
 800c602:	bd70      	pop	{r4, r5, r6, pc}
 800c604:	f855 3b04 	ldr.w	r3, [r5], #4
 800c608:	4798      	blx	r3
 800c60a:	3601      	adds	r6, #1
 800c60c:	e7ee      	b.n	800c5ec <__libc_init_array+0xc>
 800c60e:	f855 3b04 	ldr.w	r3, [r5], #4
 800c612:	4798      	blx	r3
 800c614:	3601      	adds	r6, #1
 800c616:	e7f2      	b.n	800c5fe <__libc_init_array+0x1e>
 800c618:	0800d280 	.word	0x0800d280
 800c61c:	0800d280 	.word	0x0800d280
 800c620:	0800d280 	.word	0x0800d280
 800c624:	0800d284 	.word	0x0800d284

0800c628 <__retarget_lock_acquire_recursive>:
 800c628:	4770      	bx	lr

0800c62a <__retarget_lock_release_recursive>:
 800c62a:	4770      	bx	lr

0800c62c <_free_r>:
 800c62c:	b538      	push	{r3, r4, r5, lr}
 800c62e:	4605      	mov	r5, r0
 800c630:	2900      	cmp	r1, #0
 800c632:	d041      	beq.n	800c6b8 <_free_r+0x8c>
 800c634:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c638:	1f0c      	subs	r4, r1, #4
 800c63a:	2b00      	cmp	r3, #0
 800c63c:	bfb8      	it	lt
 800c63e:	18e4      	addlt	r4, r4, r3
 800c640:	f000 f8e0 	bl	800c804 <__malloc_lock>
 800c644:	4a1d      	ldr	r2, [pc, #116]	@ (800c6bc <_free_r+0x90>)
 800c646:	6813      	ldr	r3, [r2, #0]
 800c648:	b933      	cbnz	r3, 800c658 <_free_r+0x2c>
 800c64a:	6063      	str	r3, [r4, #4]
 800c64c:	6014      	str	r4, [r2, #0]
 800c64e:	4628      	mov	r0, r5
 800c650:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c654:	f000 b8dc 	b.w	800c810 <__malloc_unlock>
 800c658:	42a3      	cmp	r3, r4
 800c65a:	d908      	bls.n	800c66e <_free_r+0x42>
 800c65c:	6820      	ldr	r0, [r4, #0]
 800c65e:	1821      	adds	r1, r4, r0
 800c660:	428b      	cmp	r3, r1
 800c662:	bf01      	itttt	eq
 800c664:	6819      	ldreq	r1, [r3, #0]
 800c666:	685b      	ldreq	r3, [r3, #4]
 800c668:	1809      	addeq	r1, r1, r0
 800c66a:	6021      	streq	r1, [r4, #0]
 800c66c:	e7ed      	b.n	800c64a <_free_r+0x1e>
 800c66e:	461a      	mov	r2, r3
 800c670:	685b      	ldr	r3, [r3, #4]
 800c672:	b10b      	cbz	r3, 800c678 <_free_r+0x4c>
 800c674:	42a3      	cmp	r3, r4
 800c676:	d9fa      	bls.n	800c66e <_free_r+0x42>
 800c678:	6811      	ldr	r1, [r2, #0]
 800c67a:	1850      	adds	r0, r2, r1
 800c67c:	42a0      	cmp	r0, r4
 800c67e:	d10b      	bne.n	800c698 <_free_r+0x6c>
 800c680:	6820      	ldr	r0, [r4, #0]
 800c682:	4401      	add	r1, r0
 800c684:	1850      	adds	r0, r2, r1
 800c686:	4283      	cmp	r3, r0
 800c688:	6011      	str	r1, [r2, #0]
 800c68a:	d1e0      	bne.n	800c64e <_free_r+0x22>
 800c68c:	6818      	ldr	r0, [r3, #0]
 800c68e:	685b      	ldr	r3, [r3, #4]
 800c690:	6053      	str	r3, [r2, #4]
 800c692:	4408      	add	r0, r1
 800c694:	6010      	str	r0, [r2, #0]
 800c696:	e7da      	b.n	800c64e <_free_r+0x22>
 800c698:	d902      	bls.n	800c6a0 <_free_r+0x74>
 800c69a:	230c      	movs	r3, #12
 800c69c:	602b      	str	r3, [r5, #0]
 800c69e:	e7d6      	b.n	800c64e <_free_r+0x22>
 800c6a0:	6820      	ldr	r0, [r4, #0]
 800c6a2:	1821      	adds	r1, r4, r0
 800c6a4:	428b      	cmp	r3, r1
 800c6a6:	bf04      	itt	eq
 800c6a8:	6819      	ldreq	r1, [r3, #0]
 800c6aa:	685b      	ldreq	r3, [r3, #4]
 800c6ac:	6063      	str	r3, [r4, #4]
 800c6ae:	bf04      	itt	eq
 800c6b0:	1809      	addeq	r1, r1, r0
 800c6b2:	6021      	streq	r1, [r4, #0]
 800c6b4:	6054      	str	r4, [r2, #4]
 800c6b6:	e7ca      	b.n	800c64e <_free_r+0x22>
 800c6b8:	bd38      	pop	{r3, r4, r5, pc}
 800c6ba:	bf00      	nop
 800c6bc:	24001304 	.word	0x24001304

0800c6c0 <sbrk_aligned>:
 800c6c0:	b570      	push	{r4, r5, r6, lr}
 800c6c2:	4e0f      	ldr	r6, [pc, #60]	@ (800c700 <sbrk_aligned+0x40>)
 800c6c4:	460c      	mov	r4, r1
 800c6c6:	6831      	ldr	r1, [r6, #0]
 800c6c8:	4605      	mov	r5, r0
 800c6ca:	b911      	cbnz	r1, 800c6d2 <sbrk_aligned+0x12>
 800c6cc:	f000 fba6 	bl	800ce1c <_sbrk_r>
 800c6d0:	6030      	str	r0, [r6, #0]
 800c6d2:	4621      	mov	r1, r4
 800c6d4:	4628      	mov	r0, r5
 800c6d6:	f000 fba1 	bl	800ce1c <_sbrk_r>
 800c6da:	1c43      	adds	r3, r0, #1
 800c6dc:	d103      	bne.n	800c6e6 <sbrk_aligned+0x26>
 800c6de:	f04f 34ff 	mov.w	r4, #4294967295
 800c6e2:	4620      	mov	r0, r4
 800c6e4:	bd70      	pop	{r4, r5, r6, pc}
 800c6e6:	1cc4      	adds	r4, r0, #3
 800c6e8:	f024 0403 	bic.w	r4, r4, #3
 800c6ec:	42a0      	cmp	r0, r4
 800c6ee:	d0f8      	beq.n	800c6e2 <sbrk_aligned+0x22>
 800c6f0:	1a21      	subs	r1, r4, r0
 800c6f2:	4628      	mov	r0, r5
 800c6f4:	f000 fb92 	bl	800ce1c <_sbrk_r>
 800c6f8:	3001      	adds	r0, #1
 800c6fa:	d1f2      	bne.n	800c6e2 <sbrk_aligned+0x22>
 800c6fc:	e7ef      	b.n	800c6de <sbrk_aligned+0x1e>
 800c6fe:	bf00      	nop
 800c700:	24001300 	.word	0x24001300

0800c704 <_malloc_r>:
 800c704:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c708:	1ccd      	adds	r5, r1, #3
 800c70a:	f025 0503 	bic.w	r5, r5, #3
 800c70e:	3508      	adds	r5, #8
 800c710:	2d0c      	cmp	r5, #12
 800c712:	bf38      	it	cc
 800c714:	250c      	movcc	r5, #12
 800c716:	2d00      	cmp	r5, #0
 800c718:	4606      	mov	r6, r0
 800c71a:	db01      	blt.n	800c720 <_malloc_r+0x1c>
 800c71c:	42a9      	cmp	r1, r5
 800c71e:	d904      	bls.n	800c72a <_malloc_r+0x26>
 800c720:	230c      	movs	r3, #12
 800c722:	6033      	str	r3, [r6, #0]
 800c724:	2000      	movs	r0, #0
 800c726:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c72a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800c800 <_malloc_r+0xfc>
 800c72e:	f000 f869 	bl	800c804 <__malloc_lock>
 800c732:	f8d8 3000 	ldr.w	r3, [r8]
 800c736:	461c      	mov	r4, r3
 800c738:	bb44      	cbnz	r4, 800c78c <_malloc_r+0x88>
 800c73a:	4629      	mov	r1, r5
 800c73c:	4630      	mov	r0, r6
 800c73e:	f7ff ffbf 	bl	800c6c0 <sbrk_aligned>
 800c742:	1c43      	adds	r3, r0, #1
 800c744:	4604      	mov	r4, r0
 800c746:	d158      	bne.n	800c7fa <_malloc_r+0xf6>
 800c748:	f8d8 4000 	ldr.w	r4, [r8]
 800c74c:	4627      	mov	r7, r4
 800c74e:	2f00      	cmp	r7, #0
 800c750:	d143      	bne.n	800c7da <_malloc_r+0xd6>
 800c752:	2c00      	cmp	r4, #0
 800c754:	d04b      	beq.n	800c7ee <_malloc_r+0xea>
 800c756:	6823      	ldr	r3, [r4, #0]
 800c758:	4639      	mov	r1, r7
 800c75a:	4630      	mov	r0, r6
 800c75c:	eb04 0903 	add.w	r9, r4, r3
 800c760:	f000 fb5c 	bl	800ce1c <_sbrk_r>
 800c764:	4581      	cmp	r9, r0
 800c766:	d142      	bne.n	800c7ee <_malloc_r+0xea>
 800c768:	6821      	ldr	r1, [r4, #0]
 800c76a:	1a6d      	subs	r5, r5, r1
 800c76c:	4629      	mov	r1, r5
 800c76e:	4630      	mov	r0, r6
 800c770:	f7ff ffa6 	bl	800c6c0 <sbrk_aligned>
 800c774:	3001      	adds	r0, #1
 800c776:	d03a      	beq.n	800c7ee <_malloc_r+0xea>
 800c778:	6823      	ldr	r3, [r4, #0]
 800c77a:	442b      	add	r3, r5
 800c77c:	6023      	str	r3, [r4, #0]
 800c77e:	f8d8 3000 	ldr.w	r3, [r8]
 800c782:	685a      	ldr	r2, [r3, #4]
 800c784:	bb62      	cbnz	r2, 800c7e0 <_malloc_r+0xdc>
 800c786:	f8c8 7000 	str.w	r7, [r8]
 800c78a:	e00f      	b.n	800c7ac <_malloc_r+0xa8>
 800c78c:	6822      	ldr	r2, [r4, #0]
 800c78e:	1b52      	subs	r2, r2, r5
 800c790:	d420      	bmi.n	800c7d4 <_malloc_r+0xd0>
 800c792:	2a0b      	cmp	r2, #11
 800c794:	d917      	bls.n	800c7c6 <_malloc_r+0xc2>
 800c796:	1961      	adds	r1, r4, r5
 800c798:	42a3      	cmp	r3, r4
 800c79a:	6025      	str	r5, [r4, #0]
 800c79c:	bf18      	it	ne
 800c79e:	6059      	strne	r1, [r3, #4]
 800c7a0:	6863      	ldr	r3, [r4, #4]
 800c7a2:	bf08      	it	eq
 800c7a4:	f8c8 1000 	streq.w	r1, [r8]
 800c7a8:	5162      	str	r2, [r4, r5]
 800c7aa:	604b      	str	r3, [r1, #4]
 800c7ac:	4630      	mov	r0, r6
 800c7ae:	f000 f82f 	bl	800c810 <__malloc_unlock>
 800c7b2:	f104 000b 	add.w	r0, r4, #11
 800c7b6:	1d23      	adds	r3, r4, #4
 800c7b8:	f020 0007 	bic.w	r0, r0, #7
 800c7bc:	1ac2      	subs	r2, r0, r3
 800c7be:	bf1c      	itt	ne
 800c7c0:	1a1b      	subne	r3, r3, r0
 800c7c2:	50a3      	strne	r3, [r4, r2]
 800c7c4:	e7af      	b.n	800c726 <_malloc_r+0x22>
 800c7c6:	6862      	ldr	r2, [r4, #4]
 800c7c8:	42a3      	cmp	r3, r4
 800c7ca:	bf0c      	ite	eq
 800c7cc:	f8c8 2000 	streq.w	r2, [r8]
 800c7d0:	605a      	strne	r2, [r3, #4]
 800c7d2:	e7eb      	b.n	800c7ac <_malloc_r+0xa8>
 800c7d4:	4623      	mov	r3, r4
 800c7d6:	6864      	ldr	r4, [r4, #4]
 800c7d8:	e7ae      	b.n	800c738 <_malloc_r+0x34>
 800c7da:	463c      	mov	r4, r7
 800c7dc:	687f      	ldr	r7, [r7, #4]
 800c7de:	e7b6      	b.n	800c74e <_malloc_r+0x4a>
 800c7e0:	461a      	mov	r2, r3
 800c7e2:	685b      	ldr	r3, [r3, #4]
 800c7e4:	42a3      	cmp	r3, r4
 800c7e6:	d1fb      	bne.n	800c7e0 <_malloc_r+0xdc>
 800c7e8:	2300      	movs	r3, #0
 800c7ea:	6053      	str	r3, [r2, #4]
 800c7ec:	e7de      	b.n	800c7ac <_malloc_r+0xa8>
 800c7ee:	230c      	movs	r3, #12
 800c7f0:	6033      	str	r3, [r6, #0]
 800c7f2:	4630      	mov	r0, r6
 800c7f4:	f000 f80c 	bl	800c810 <__malloc_unlock>
 800c7f8:	e794      	b.n	800c724 <_malloc_r+0x20>
 800c7fa:	6005      	str	r5, [r0, #0]
 800c7fc:	e7d6      	b.n	800c7ac <_malloc_r+0xa8>
 800c7fe:	bf00      	nop
 800c800:	24001304 	.word	0x24001304

0800c804 <__malloc_lock>:
 800c804:	4801      	ldr	r0, [pc, #4]	@ (800c80c <__malloc_lock+0x8>)
 800c806:	f7ff bf0f 	b.w	800c628 <__retarget_lock_acquire_recursive>
 800c80a:	bf00      	nop
 800c80c:	240012fc 	.word	0x240012fc

0800c810 <__malloc_unlock>:
 800c810:	4801      	ldr	r0, [pc, #4]	@ (800c818 <__malloc_unlock+0x8>)
 800c812:	f7ff bf0a 	b.w	800c62a <__retarget_lock_release_recursive>
 800c816:	bf00      	nop
 800c818:	240012fc 	.word	0x240012fc

0800c81c <__ssputs_r>:
 800c81c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c820:	688e      	ldr	r6, [r1, #8]
 800c822:	461f      	mov	r7, r3
 800c824:	42be      	cmp	r6, r7
 800c826:	680b      	ldr	r3, [r1, #0]
 800c828:	4682      	mov	sl, r0
 800c82a:	460c      	mov	r4, r1
 800c82c:	4690      	mov	r8, r2
 800c82e:	d82d      	bhi.n	800c88c <__ssputs_r+0x70>
 800c830:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c834:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800c838:	d026      	beq.n	800c888 <__ssputs_r+0x6c>
 800c83a:	6965      	ldr	r5, [r4, #20]
 800c83c:	6909      	ldr	r1, [r1, #16]
 800c83e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c842:	eba3 0901 	sub.w	r9, r3, r1
 800c846:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c84a:	1c7b      	adds	r3, r7, #1
 800c84c:	444b      	add	r3, r9
 800c84e:	106d      	asrs	r5, r5, #1
 800c850:	429d      	cmp	r5, r3
 800c852:	bf38      	it	cc
 800c854:	461d      	movcc	r5, r3
 800c856:	0553      	lsls	r3, r2, #21
 800c858:	d527      	bpl.n	800c8aa <__ssputs_r+0x8e>
 800c85a:	4629      	mov	r1, r5
 800c85c:	f7ff ff52 	bl	800c704 <_malloc_r>
 800c860:	4606      	mov	r6, r0
 800c862:	b360      	cbz	r0, 800c8be <__ssputs_r+0xa2>
 800c864:	6921      	ldr	r1, [r4, #16]
 800c866:	464a      	mov	r2, r9
 800c868:	f000 fae8 	bl	800ce3c <memcpy>
 800c86c:	89a3      	ldrh	r3, [r4, #12]
 800c86e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800c872:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c876:	81a3      	strh	r3, [r4, #12]
 800c878:	6126      	str	r6, [r4, #16]
 800c87a:	6165      	str	r5, [r4, #20]
 800c87c:	444e      	add	r6, r9
 800c87e:	eba5 0509 	sub.w	r5, r5, r9
 800c882:	6026      	str	r6, [r4, #0]
 800c884:	60a5      	str	r5, [r4, #8]
 800c886:	463e      	mov	r6, r7
 800c888:	42be      	cmp	r6, r7
 800c88a:	d900      	bls.n	800c88e <__ssputs_r+0x72>
 800c88c:	463e      	mov	r6, r7
 800c88e:	6820      	ldr	r0, [r4, #0]
 800c890:	4632      	mov	r2, r6
 800c892:	4641      	mov	r1, r8
 800c894:	f000 faa8 	bl	800cde8 <memmove>
 800c898:	68a3      	ldr	r3, [r4, #8]
 800c89a:	1b9b      	subs	r3, r3, r6
 800c89c:	60a3      	str	r3, [r4, #8]
 800c89e:	6823      	ldr	r3, [r4, #0]
 800c8a0:	4433      	add	r3, r6
 800c8a2:	6023      	str	r3, [r4, #0]
 800c8a4:	2000      	movs	r0, #0
 800c8a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c8aa:	462a      	mov	r2, r5
 800c8ac:	f000 fad4 	bl	800ce58 <_realloc_r>
 800c8b0:	4606      	mov	r6, r0
 800c8b2:	2800      	cmp	r0, #0
 800c8b4:	d1e0      	bne.n	800c878 <__ssputs_r+0x5c>
 800c8b6:	6921      	ldr	r1, [r4, #16]
 800c8b8:	4650      	mov	r0, sl
 800c8ba:	f7ff feb7 	bl	800c62c <_free_r>
 800c8be:	230c      	movs	r3, #12
 800c8c0:	f8ca 3000 	str.w	r3, [sl]
 800c8c4:	89a3      	ldrh	r3, [r4, #12]
 800c8c6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c8ca:	81a3      	strh	r3, [r4, #12]
 800c8cc:	f04f 30ff 	mov.w	r0, #4294967295
 800c8d0:	e7e9      	b.n	800c8a6 <__ssputs_r+0x8a>
	...

0800c8d4 <_svfiprintf_r>:
 800c8d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c8d8:	4698      	mov	r8, r3
 800c8da:	898b      	ldrh	r3, [r1, #12]
 800c8dc:	061b      	lsls	r3, r3, #24
 800c8de:	b09d      	sub	sp, #116	@ 0x74
 800c8e0:	4607      	mov	r7, r0
 800c8e2:	460d      	mov	r5, r1
 800c8e4:	4614      	mov	r4, r2
 800c8e6:	d510      	bpl.n	800c90a <_svfiprintf_r+0x36>
 800c8e8:	690b      	ldr	r3, [r1, #16]
 800c8ea:	b973      	cbnz	r3, 800c90a <_svfiprintf_r+0x36>
 800c8ec:	2140      	movs	r1, #64	@ 0x40
 800c8ee:	f7ff ff09 	bl	800c704 <_malloc_r>
 800c8f2:	6028      	str	r0, [r5, #0]
 800c8f4:	6128      	str	r0, [r5, #16]
 800c8f6:	b930      	cbnz	r0, 800c906 <_svfiprintf_r+0x32>
 800c8f8:	230c      	movs	r3, #12
 800c8fa:	603b      	str	r3, [r7, #0]
 800c8fc:	f04f 30ff 	mov.w	r0, #4294967295
 800c900:	b01d      	add	sp, #116	@ 0x74
 800c902:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c906:	2340      	movs	r3, #64	@ 0x40
 800c908:	616b      	str	r3, [r5, #20]
 800c90a:	2300      	movs	r3, #0
 800c90c:	9309      	str	r3, [sp, #36]	@ 0x24
 800c90e:	2320      	movs	r3, #32
 800c910:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c914:	f8cd 800c 	str.w	r8, [sp, #12]
 800c918:	2330      	movs	r3, #48	@ 0x30
 800c91a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800cab8 <_svfiprintf_r+0x1e4>
 800c91e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c922:	f04f 0901 	mov.w	r9, #1
 800c926:	4623      	mov	r3, r4
 800c928:	469a      	mov	sl, r3
 800c92a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c92e:	b10a      	cbz	r2, 800c934 <_svfiprintf_r+0x60>
 800c930:	2a25      	cmp	r2, #37	@ 0x25
 800c932:	d1f9      	bne.n	800c928 <_svfiprintf_r+0x54>
 800c934:	ebba 0b04 	subs.w	fp, sl, r4
 800c938:	d00b      	beq.n	800c952 <_svfiprintf_r+0x7e>
 800c93a:	465b      	mov	r3, fp
 800c93c:	4622      	mov	r2, r4
 800c93e:	4629      	mov	r1, r5
 800c940:	4638      	mov	r0, r7
 800c942:	f7ff ff6b 	bl	800c81c <__ssputs_r>
 800c946:	3001      	adds	r0, #1
 800c948:	f000 80a7 	beq.w	800ca9a <_svfiprintf_r+0x1c6>
 800c94c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c94e:	445a      	add	r2, fp
 800c950:	9209      	str	r2, [sp, #36]	@ 0x24
 800c952:	f89a 3000 	ldrb.w	r3, [sl]
 800c956:	2b00      	cmp	r3, #0
 800c958:	f000 809f 	beq.w	800ca9a <_svfiprintf_r+0x1c6>
 800c95c:	2300      	movs	r3, #0
 800c95e:	f04f 32ff 	mov.w	r2, #4294967295
 800c962:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c966:	f10a 0a01 	add.w	sl, sl, #1
 800c96a:	9304      	str	r3, [sp, #16]
 800c96c:	9307      	str	r3, [sp, #28]
 800c96e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c972:	931a      	str	r3, [sp, #104]	@ 0x68
 800c974:	4654      	mov	r4, sl
 800c976:	2205      	movs	r2, #5
 800c978:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c97c:	484e      	ldr	r0, [pc, #312]	@ (800cab8 <_svfiprintf_r+0x1e4>)
 800c97e:	f7f3 fd2f 	bl	80003e0 <memchr>
 800c982:	9a04      	ldr	r2, [sp, #16]
 800c984:	b9d8      	cbnz	r0, 800c9be <_svfiprintf_r+0xea>
 800c986:	06d0      	lsls	r0, r2, #27
 800c988:	bf44      	itt	mi
 800c98a:	2320      	movmi	r3, #32
 800c98c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c990:	0711      	lsls	r1, r2, #28
 800c992:	bf44      	itt	mi
 800c994:	232b      	movmi	r3, #43	@ 0x2b
 800c996:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c99a:	f89a 3000 	ldrb.w	r3, [sl]
 800c99e:	2b2a      	cmp	r3, #42	@ 0x2a
 800c9a0:	d015      	beq.n	800c9ce <_svfiprintf_r+0xfa>
 800c9a2:	9a07      	ldr	r2, [sp, #28]
 800c9a4:	4654      	mov	r4, sl
 800c9a6:	2000      	movs	r0, #0
 800c9a8:	f04f 0c0a 	mov.w	ip, #10
 800c9ac:	4621      	mov	r1, r4
 800c9ae:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c9b2:	3b30      	subs	r3, #48	@ 0x30
 800c9b4:	2b09      	cmp	r3, #9
 800c9b6:	d94b      	bls.n	800ca50 <_svfiprintf_r+0x17c>
 800c9b8:	b1b0      	cbz	r0, 800c9e8 <_svfiprintf_r+0x114>
 800c9ba:	9207      	str	r2, [sp, #28]
 800c9bc:	e014      	b.n	800c9e8 <_svfiprintf_r+0x114>
 800c9be:	eba0 0308 	sub.w	r3, r0, r8
 800c9c2:	fa09 f303 	lsl.w	r3, r9, r3
 800c9c6:	4313      	orrs	r3, r2
 800c9c8:	9304      	str	r3, [sp, #16]
 800c9ca:	46a2      	mov	sl, r4
 800c9cc:	e7d2      	b.n	800c974 <_svfiprintf_r+0xa0>
 800c9ce:	9b03      	ldr	r3, [sp, #12]
 800c9d0:	1d19      	adds	r1, r3, #4
 800c9d2:	681b      	ldr	r3, [r3, #0]
 800c9d4:	9103      	str	r1, [sp, #12]
 800c9d6:	2b00      	cmp	r3, #0
 800c9d8:	bfbb      	ittet	lt
 800c9da:	425b      	neglt	r3, r3
 800c9dc:	f042 0202 	orrlt.w	r2, r2, #2
 800c9e0:	9307      	strge	r3, [sp, #28]
 800c9e2:	9307      	strlt	r3, [sp, #28]
 800c9e4:	bfb8      	it	lt
 800c9e6:	9204      	strlt	r2, [sp, #16]
 800c9e8:	7823      	ldrb	r3, [r4, #0]
 800c9ea:	2b2e      	cmp	r3, #46	@ 0x2e
 800c9ec:	d10a      	bne.n	800ca04 <_svfiprintf_r+0x130>
 800c9ee:	7863      	ldrb	r3, [r4, #1]
 800c9f0:	2b2a      	cmp	r3, #42	@ 0x2a
 800c9f2:	d132      	bne.n	800ca5a <_svfiprintf_r+0x186>
 800c9f4:	9b03      	ldr	r3, [sp, #12]
 800c9f6:	1d1a      	adds	r2, r3, #4
 800c9f8:	681b      	ldr	r3, [r3, #0]
 800c9fa:	9203      	str	r2, [sp, #12]
 800c9fc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ca00:	3402      	adds	r4, #2
 800ca02:	9305      	str	r3, [sp, #20]
 800ca04:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800cac8 <_svfiprintf_r+0x1f4>
 800ca08:	7821      	ldrb	r1, [r4, #0]
 800ca0a:	2203      	movs	r2, #3
 800ca0c:	4650      	mov	r0, sl
 800ca0e:	f7f3 fce7 	bl	80003e0 <memchr>
 800ca12:	b138      	cbz	r0, 800ca24 <_svfiprintf_r+0x150>
 800ca14:	9b04      	ldr	r3, [sp, #16]
 800ca16:	eba0 000a 	sub.w	r0, r0, sl
 800ca1a:	2240      	movs	r2, #64	@ 0x40
 800ca1c:	4082      	lsls	r2, r0
 800ca1e:	4313      	orrs	r3, r2
 800ca20:	3401      	adds	r4, #1
 800ca22:	9304      	str	r3, [sp, #16]
 800ca24:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ca28:	4824      	ldr	r0, [pc, #144]	@ (800cabc <_svfiprintf_r+0x1e8>)
 800ca2a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ca2e:	2206      	movs	r2, #6
 800ca30:	f7f3 fcd6 	bl	80003e0 <memchr>
 800ca34:	2800      	cmp	r0, #0
 800ca36:	d036      	beq.n	800caa6 <_svfiprintf_r+0x1d2>
 800ca38:	4b21      	ldr	r3, [pc, #132]	@ (800cac0 <_svfiprintf_r+0x1ec>)
 800ca3a:	bb1b      	cbnz	r3, 800ca84 <_svfiprintf_r+0x1b0>
 800ca3c:	9b03      	ldr	r3, [sp, #12]
 800ca3e:	3307      	adds	r3, #7
 800ca40:	f023 0307 	bic.w	r3, r3, #7
 800ca44:	3308      	adds	r3, #8
 800ca46:	9303      	str	r3, [sp, #12]
 800ca48:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ca4a:	4433      	add	r3, r6
 800ca4c:	9309      	str	r3, [sp, #36]	@ 0x24
 800ca4e:	e76a      	b.n	800c926 <_svfiprintf_r+0x52>
 800ca50:	fb0c 3202 	mla	r2, ip, r2, r3
 800ca54:	460c      	mov	r4, r1
 800ca56:	2001      	movs	r0, #1
 800ca58:	e7a8      	b.n	800c9ac <_svfiprintf_r+0xd8>
 800ca5a:	2300      	movs	r3, #0
 800ca5c:	3401      	adds	r4, #1
 800ca5e:	9305      	str	r3, [sp, #20]
 800ca60:	4619      	mov	r1, r3
 800ca62:	f04f 0c0a 	mov.w	ip, #10
 800ca66:	4620      	mov	r0, r4
 800ca68:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ca6c:	3a30      	subs	r2, #48	@ 0x30
 800ca6e:	2a09      	cmp	r2, #9
 800ca70:	d903      	bls.n	800ca7a <_svfiprintf_r+0x1a6>
 800ca72:	2b00      	cmp	r3, #0
 800ca74:	d0c6      	beq.n	800ca04 <_svfiprintf_r+0x130>
 800ca76:	9105      	str	r1, [sp, #20]
 800ca78:	e7c4      	b.n	800ca04 <_svfiprintf_r+0x130>
 800ca7a:	fb0c 2101 	mla	r1, ip, r1, r2
 800ca7e:	4604      	mov	r4, r0
 800ca80:	2301      	movs	r3, #1
 800ca82:	e7f0      	b.n	800ca66 <_svfiprintf_r+0x192>
 800ca84:	ab03      	add	r3, sp, #12
 800ca86:	9300      	str	r3, [sp, #0]
 800ca88:	462a      	mov	r2, r5
 800ca8a:	4b0e      	ldr	r3, [pc, #56]	@ (800cac4 <_svfiprintf_r+0x1f0>)
 800ca8c:	a904      	add	r1, sp, #16
 800ca8e:	4638      	mov	r0, r7
 800ca90:	f3af 8000 	nop.w
 800ca94:	1c42      	adds	r2, r0, #1
 800ca96:	4606      	mov	r6, r0
 800ca98:	d1d6      	bne.n	800ca48 <_svfiprintf_r+0x174>
 800ca9a:	89ab      	ldrh	r3, [r5, #12]
 800ca9c:	065b      	lsls	r3, r3, #25
 800ca9e:	f53f af2d 	bmi.w	800c8fc <_svfiprintf_r+0x28>
 800caa2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800caa4:	e72c      	b.n	800c900 <_svfiprintf_r+0x2c>
 800caa6:	ab03      	add	r3, sp, #12
 800caa8:	9300      	str	r3, [sp, #0]
 800caaa:	462a      	mov	r2, r5
 800caac:	4b05      	ldr	r3, [pc, #20]	@ (800cac4 <_svfiprintf_r+0x1f0>)
 800caae:	a904      	add	r1, sp, #16
 800cab0:	4638      	mov	r0, r7
 800cab2:	f000 f879 	bl	800cba8 <_printf_i>
 800cab6:	e7ed      	b.n	800ca94 <_svfiprintf_r+0x1c0>
 800cab8:	0800d244 	.word	0x0800d244
 800cabc:	0800d24e 	.word	0x0800d24e
 800cac0:	00000000 	.word	0x00000000
 800cac4:	0800c81d 	.word	0x0800c81d
 800cac8:	0800d24a 	.word	0x0800d24a

0800cacc <_printf_common>:
 800cacc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cad0:	4616      	mov	r6, r2
 800cad2:	4698      	mov	r8, r3
 800cad4:	688a      	ldr	r2, [r1, #8]
 800cad6:	690b      	ldr	r3, [r1, #16]
 800cad8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800cadc:	4293      	cmp	r3, r2
 800cade:	bfb8      	it	lt
 800cae0:	4613      	movlt	r3, r2
 800cae2:	6033      	str	r3, [r6, #0]
 800cae4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800cae8:	4607      	mov	r7, r0
 800caea:	460c      	mov	r4, r1
 800caec:	b10a      	cbz	r2, 800caf2 <_printf_common+0x26>
 800caee:	3301      	adds	r3, #1
 800caf0:	6033      	str	r3, [r6, #0]
 800caf2:	6823      	ldr	r3, [r4, #0]
 800caf4:	0699      	lsls	r1, r3, #26
 800caf6:	bf42      	ittt	mi
 800caf8:	6833      	ldrmi	r3, [r6, #0]
 800cafa:	3302      	addmi	r3, #2
 800cafc:	6033      	strmi	r3, [r6, #0]
 800cafe:	6825      	ldr	r5, [r4, #0]
 800cb00:	f015 0506 	ands.w	r5, r5, #6
 800cb04:	d106      	bne.n	800cb14 <_printf_common+0x48>
 800cb06:	f104 0a19 	add.w	sl, r4, #25
 800cb0a:	68e3      	ldr	r3, [r4, #12]
 800cb0c:	6832      	ldr	r2, [r6, #0]
 800cb0e:	1a9b      	subs	r3, r3, r2
 800cb10:	42ab      	cmp	r3, r5
 800cb12:	dc26      	bgt.n	800cb62 <_printf_common+0x96>
 800cb14:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800cb18:	6822      	ldr	r2, [r4, #0]
 800cb1a:	3b00      	subs	r3, #0
 800cb1c:	bf18      	it	ne
 800cb1e:	2301      	movne	r3, #1
 800cb20:	0692      	lsls	r2, r2, #26
 800cb22:	d42b      	bmi.n	800cb7c <_printf_common+0xb0>
 800cb24:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800cb28:	4641      	mov	r1, r8
 800cb2a:	4638      	mov	r0, r7
 800cb2c:	47c8      	blx	r9
 800cb2e:	3001      	adds	r0, #1
 800cb30:	d01e      	beq.n	800cb70 <_printf_common+0xa4>
 800cb32:	6823      	ldr	r3, [r4, #0]
 800cb34:	6922      	ldr	r2, [r4, #16]
 800cb36:	f003 0306 	and.w	r3, r3, #6
 800cb3a:	2b04      	cmp	r3, #4
 800cb3c:	bf02      	ittt	eq
 800cb3e:	68e5      	ldreq	r5, [r4, #12]
 800cb40:	6833      	ldreq	r3, [r6, #0]
 800cb42:	1aed      	subeq	r5, r5, r3
 800cb44:	68a3      	ldr	r3, [r4, #8]
 800cb46:	bf0c      	ite	eq
 800cb48:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800cb4c:	2500      	movne	r5, #0
 800cb4e:	4293      	cmp	r3, r2
 800cb50:	bfc4      	itt	gt
 800cb52:	1a9b      	subgt	r3, r3, r2
 800cb54:	18ed      	addgt	r5, r5, r3
 800cb56:	2600      	movs	r6, #0
 800cb58:	341a      	adds	r4, #26
 800cb5a:	42b5      	cmp	r5, r6
 800cb5c:	d11a      	bne.n	800cb94 <_printf_common+0xc8>
 800cb5e:	2000      	movs	r0, #0
 800cb60:	e008      	b.n	800cb74 <_printf_common+0xa8>
 800cb62:	2301      	movs	r3, #1
 800cb64:	4652      	mov	r2, sl
 800cb66:	4641      	mov	r1, r8
 800cb68:	4638      	mov	r0, r7
 800cb6a:	47c8      	blx	r9
 800cb6c:	3001      	adds	r0, #1
 800cb6e:	d103      	bne.n	800cb78 <_printf_common+0xac>
 800cb70:	f04f 30ff 	mov.w	r0, #4294967295
 800cb74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cb78:	3501      	adds	r5, #1
 800cb7a:	e7c6      	b.n	800cb0a <_printf_common+0x3e>
 800cb7c:	18e1      	adds	r1, r4, r3
 800cb7e:	1c5a      	adds	r2, r3, #1
 800cb80:	2030      	movs	r0, #48	@ 0x30
 800cb82:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800cb86:	4422      	add	r2, r4
 800cb88:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800cb8c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800cb90:	3302      	adds	r3, #2
 800cb92:	e7c7      	b.n	800cb24 <_printf_common+0x58>
 800cb94:	2301      	movs	r3, #1
 800cb96:	4622      	mov	r2, r4
 800cb98:	4641      	mov	r1, r8
 800cb9a:	4638      	mov	r0, r7
 800cb9c:	47c8      	blx	r9
 800cb9e:	3001      	adds	r0, #1
 800cba0:	d0e6      	beq.n	800cb70 <_printf_common+0xa4>
 800cba2:	3601      	adds	r6, #1
 800cba4:	e7d9      	b.n	800cb5a <_printf_common+0x8e>
	...

0800cba8 <_printf_i>:
 800cba8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cbac:	7e0f      	ldrb	r7, [r1, #24]
 800cbae:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800cbb0:	2f78      	cmp	r7, #120	@ 0x78
 800cbb2:	4691      	mov	r9, r2
 800cbb4:	4680      	mov	r8, r0
 800cbb6:	460c      	mov	r4, r1
 800cbb8:	469a      	mov	sl, r3
 800cbba:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800cbbe:	d807      	bhi.n	800cbd0 <_printf_i+0x28>
 800cbc0:	2f62      	cmp	r7, #98	@ 0x62
 800cbc2:	d80a      	bhi.n	800cbda <_printf_i+0x32>
 800cbc4:	2f00      	cmp	r7, #0
 800cbc6:	f000 80d2 	beq.w	800cd6e <_printf_i+0x1c6>
 800cbca:	2f58      	cmp	r7, #88	@ 0x58
 800cbcc:	f000 80b9 	beq.w	800cd42 <_printf_i+0x19a>
 800cbd0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800cbd4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800cbd8:	e03a      	b.n	800cc50 <_printf_i+0xa8>
 800cbda:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800cbde:	2b15      	cmp	r3, #21
 800cbe0:	d8f6      	bhi.n	800cbd0 <_printf_i+0x28>
 800cbe2:	a101      	add	r1, pc, #4	@ (adr r1, 800cbe8 <_printf_i+0x40>)
 800cbe4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800cbe8:	0800cc41 	.word	0x0800cc41
 800cbec:	0800cc55 	.word	0x0800cc55
 800cbf0:	0800cbd1 	.word	0x0800cbd1
 800cbf4:	0800cbd1 	.word	0x0800cbd1
 800cbf8:	0800cbd1 	.word	0x0800cbd1
 800cbfc:	0800cbd1 	.word	0x0800cbd1
 800cc00:	0800cc55 	.word	0x0800cc55
 800cc04:	0800cbd1 	.word	0x0800cbd1
 800cc08:	0800cbd1 	.word	0x0800cbd1
 800cc0c:	0800cbd1 	.word	0x0800cbd1
 800cc10:	0800cbd1 	.word	0x0800cbd1
 800cc14:	0800cd55 	.word	0x0800cd55
 800cc18:	0800cc7f 	.word	0x0800cc7f
 800cc1c:	0800cd0f 	.word	0x0800cd0f
 800cc20:	0800cbd1 	.word	0x0800cbd1
 800cc24:	0800cbd1 	.word	0x0800cbd1
 800cc28:	0800cd77 	.word	0x0800cd77
 800cc2c:	0800cbd1 	.word	0x0800cbd1
 800cc30:	0800cc7f 	.word	0x0800cc7f
 800cc34:	0800cbd1 	.word	0x0800cbd1
 800cc38:	0800cbd1 	.word	0x0800cbd1
 800cc3c:	0800cd17 	.word	0x0800cd17
 800cc40:	6833      	ldr	r3, [r6, #0]
 800cc42:	1d1a      	adds	r2, r3, #4
 800cc44:	681b      	ldr	r3, [r3, #0]
 800cc46:	6032      	str	r2, [r6, #0]
 800cc48:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800cc4c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800cc50:	2301      	movs	r3, #1
 800cc52:	e09d      	b.n	800cd90 <_printf_i+0x1e8>
 800cc54:	6833      	ldr	r3, [r6, #0]
 800cc56:	6820      	ldr	r0, [r4, #0]
 800cc58:	1d19      	adds	r1, r3, #4
 800cc5a:	6031      	str	r1, [r6, #0]
 800cc5c:	0606      	lsls	r6, r0, #24
 800cc5e:	d501      	bpl.n	800cc64 <_printf_i+0xbc>
 800cc60:	681d      	ldr	r5, [r3, #0]
 800cc62:	e003      	b.n	800cc6c <_printf_i+0xc4>
 800cc64:	0645      	lsls	r5, r0, #25
 800cc66:	d5fb      	bpl.n	800cc60 <_printf_i+0xb8>
 800cc68:	f9b3 5000 	ldrsh.w	r5, [r3]
 800cc6c:	2d00      	cmp	r5, #0
 800cc6e:	da03      	bge.n	800cc78 <_printf_i+0xd0>
 800cc70:	232d      	movs	r3, #45	@ 0x2d
 800cc72:	426d      	negs	r5, r5
 800cc74:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800cc78:	4859      	ldr	r0, [pc, #356]	@ (800cde0 <_printf_i+0x238>)
 800cc7a:	230a      	movs	r3, #10
 800cc7c:	e011      	b.n	800cca2 <_printf_i+0xfa>
 800cc7e:	6821      	ldr	r1, [r4, #0]
 800cc80:	6833      	ldr	r3, [r6, #0]
 800cc82:	0608      	lsls	r0, r1, #24
 800cc84:	f853 5b04 	ldr.w	r5, [r3], #4
 800cc88:	d402      	bmi.n	800cc90 <_printf_i+0xe8>
 800cc8a:	0649      	lsls	r1, r1, #25
 800cc8c:	bf48      	it	mi
 800cc8e:	b2ad      	uxthmi	r5, r5
 800cc90:	2f6f      	cmp	r7, #111	@ 0x6f
 800cc92:	4853      	ldr	r0, [pc, #332]	@ (800cde0 <_printf_i+0x238>)
 800cc94:	6033      	str	r3, [r6, #0]
 800cc96:	bf14      	ite	ne
 800cc98:	230a      	movne	r3, #10
 800cc9a:	2308      	moveq	r3, #8
 800cc9c:	2100      	movs	r1, #0
 800cc9e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800cca2:	6866      	ldr	r6, [r4, #4]
 800cca4:	60a6      	str	r6, [r4, #8]
 800cca6:	2e00      	cmp	r6, #0
 800cca8:	bfa2      	ittt	ge
 800ccaa:	6821      	ldrge	r1, [r4, #0]
 800ccac:	f021 0104 	bicge.w	r1, r1, #4
 800ccb0:	6021      	strge	r1, [r4, #0]
 800ccb2:	b90d      	cbnz	r5, 800ccb8 <_printf_i+0x110>
 800ccb4:	2e00      	cmp	r6, #0
 800ccb6:	d04b      	beq.n	800cd50 <_printf_i+0x1a8>
 800ccb8:	4616      	mov	r6, r2
 800ccba:	fbb5 f1f3 	udiv	r1, r5, r3
 800ccbe:	fb03 5711 	mls	r7, r3, r1, r5
 800ccc2:	5dc7      	ldrb	r7, [r0, r7]
 800ccc4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ccc8:	462f      	mov	r7, r5
 800ccca:	42bb      	cmp	r3, r7
 800cccc:	460d      	mov	r5, r1
 800ccce:	d9f4      	bls.n	800ccba <_printf_i+0x112>
 800ccd0:	2b08      	cmp	r3, #8
 800ccd2:	d10b      	bne.n	800ccec <_printf_i+0x144>
 800ccd4:	6823      	ldr	r3, [r4, #0]
 800ccd6:	07df      	lsls	r7, r3, #31
 800ccd8:	d508      	bpl.n	800ccec <_printf_i+0x144>
 800ccda:	6923      	ldr	r3, [r4, #16]
 800ccdc:	6861      	ldr	r1, [r4, #4]
 800ccde:	4299      	cmp	r1, r3
 800cce0:	bfde      	ittt	le
 800cce2:	2330      	movle	r3, #48	@ 0x30
 800cce4:	f806 3c01 	strble.w	r3, [r6, #-1]
 800cce8:	f106 36ff 	addle.w	r6, r6, #4294967295
 800ccec:	1b92      	subs	r2, r2, r6
 800ccee:	6122      	str	r2, [r4, #16]
 800ccf0:	f8cd a000 	str.w	sl, [sp]
 800ccf4:	464b      	mov	r3, r9
 800ccf6:	aa03      	add	r2, sp, #12
 800ccf8:	4621      	mov	r1, r4
 800ccfa:	4640      	mov	r0, r8
 800ccfc:	f7ff fee6 	bl	800cacc <_printf_common>
 800cd00:	3001      	adds	r0, #1
 800cd02:	d14a      	bne.n	800cd9a <_printf_i+0x1f2>
 800cd04:	f04f 30ff 	mov.w	r0, #4294967295
 800cd08:	b004      	add	sp, #16
 800cd0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cd0e:	6823      	ldr	r3, [r4, #0]
 800cd10:	f043 0320 	orr.w	r3, r3, #32
 800cd14:	6023      	str	r3, [r4, #0]
 800cd16:	4833      	ldr	r0, [pc, #204]	@ (800cde4 <_printf_i+0x23c>)
 800cd18:	2778      	movs	r7, #120	@ 0x78
 800cd1a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800cd1e:	6823      	ldr	r3, [r4, #0]
 800cd20:	6831      	ldr	r1, [r6, #0]
 800cd22:	061f      	lsls	r7, r3, #24
 800cd24:	f851 5b04 	ldr.w	r5, [r1], #4
 800cd28:	d402      	bmi.n	800cd30 <_printf_i+0x188>
 800cd2a:	065f      	lsls	r7, r3, #25
 800cd2c:	bf48      	it	mi
 800cd2e:	b2ad      	uxthmi	r5, r5
 800cd30:	6031      	str	r1, [r6, #0]
 800cd32:	07d9      	lsls	r1, r3, #31
 800cd34:	bf44      	itt	mi
 800cd36:	f043 0320 	orrmi.w	r3, r3, #32
 800cd3a:	6023      	strmi	r3, [r4, #0]
 800cd3c:	b11d      	cbz	r5, 800cd46 <_printf_i+0x19e>
 800cd3e:	2310      	movs	r3, #16
 800cd40:	e7ac      	b.n	800cc9c <_printf_i+0xf4>
 800cd42:	4827      	ldr	r0, [pc, #156]	@ (800cde0 <_printf_i+0x238>)
 800cd44:	e7e9      	b.n	800cd1a <_printf_i+0x172>
 800cd46:	6823      	ldr	r3, [r4, #0]
 800cd48:	f023 0320 	bic.w	r3, r3, #32
 800cd4c:	6023      	str	r3, [r4, #0]
 800cd4e:	e7f6      	b.n	800cd3e <_printf_i+0x196>
 800cd50:	4616      	mov	r6, r2
 800cd52:	e7bd      	b.n	800ccd0 <_printf_i+0x128>
 800cd54:	6833      	ldr	r3, [r6, #0]
 800cd56:	6825      	ldr	r5, [r4, #0]
 800cd58:	6961      	ldr	r1, [r4, #20]
 800cd5a:	1d18      	adds	r0, r3, #4
 800cd5c:	6030      	str	r0, [r6, #0]
 800cd5e:	062e      	lsls	r6, r5, #24
 800cd60:	681b      	ldr	r3, [r3, #0]
 800cd62:	d501      	bpl.n	800cd68 <_printf_i+0x1c0>
 800cd64:	6019      	str	r1, [r3, #0]
 800cd66:	e002      	b.n	800cd6e <_printf_i+0x1c6>
 800cd68:	0668      	lsls	r0, r5, #25
 800cd6a:	d5fb      	bpl.n	800cd64 <_printf_i+0x1bc>
 800cd6c:	8019      	strh	r1, [r3, #0]
 800cd6e:	2300      	movs	r3, #0
 800cd70:	6123      	str	r3, [r4, #16]
 800cd72:	4616      	mov	r6, r2
 800cd74:	e7bc      	b.n	800ccf0 <_printf_i+0x148>
 800cd76:	6833      	ldr	r3, [r6, #0]
 800cd78:	1d1a      	adds	r2, r3, #4
 800cd7a:	6032      	str	r2, [r6, #0]
 800cd7c:	681e      	ldr	r6, [r3, #0]
 800cd7e:	6862      	ldr	r2, [r4, #4]
 800cd80:	2100      	movs	r1, #0
 800cd82:	4630      	mov	r0, r6
 800cd84:	f7f3 fb2c 	bl	80003e0 <memchr>
 800cd88:	b108      	cbz	r0, 800cd8e <_printf_i+0x1e6>
 800cd8a:	1b80      	subs	r0, r0, r6
 800cd8c:	6060      	str	r0, [r4, #4]
 800cd8e:	6863      	ldr	r3, [r4, #4]
 800cd90:	6123      	str	r3, [r4, #16]
 800cd92:	2300      	movs	r3, #0
 800cd94:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800cd98:	e7aa      	b.n	800ccf0 <_printf_i+0x148>
 800cd9a:	6923      	ldr	r3, [r4, #16]
 800cd9c:	4632      	mov	r2, r6
 800cd9e:	4649      	mov	r1, r9
 800cda0:	4640      	mov	r0, r8
 800cda2:	47d0      	blx	sl
 800cda4:	3001      	adds	r0, #1
 800cda6:	d0ad      	beq.n	800cd04 <_printf_i+0x15c>
 800cda8:	6823      	ldr	r3, [r4, #0]
 800cdaa:	079b      	lsls	r3, r3, #30
 800cdac:	d413      	bmi.n	800cdd6 <_printf_i+0x22e>
 800cdae:	68e0      	ldr	r0, [r4, #12]
 800cdb0:	9b03      	ldr	r3, [sp, #12]
 800cdb2:	4298      	cmp	r0, r3
 800cdb4:	bfb8      	it	lt
 800cdb6:	4618      	movlt	r0, r3
 800cdb8:	e7a6      	b.n	800cd08 <_printf_i+0x160>
 800cdba:	2301      	movs	r3, #1
 800cdbc:	4632      	mov	r2, r6
 800cdbe:	4649      	mov	r1, r9
 800cdc0:	4640      	mov	r0, r8
 800cdc2:	47d0      	blx	sl
 800cdc4:	3001      	adds	r0, #1
 800cdc6:	d09d      	beq.n	800cd04 <_printf_i+0x15c>
 800cdc8:	3501      	adds	r5, #1
 800cdca:	68e3      	ldr	r3, [r4, #12]
 800cdcc:	9903      	ldr	r1, [sp, #12]
 800cdce:	1a5b      	subs	r3, r3, r1
 800cdd0:	42ab      	cmp	r3, r5
 800cdd2:	dcf2      	bgt.n	800cdba <_printf_i+0x212>
 800cdd4:	e7eb      	b.n	800cdae <_printf_i+0x206>
 800cdd6:	2500      	movs	r5, #0
 800cdd8:	f104 0619 	add.w	r6, r4, #25
 800cddc:	e7f5      	b.n	800cdca <_printf_i+0x222>
 800cdde:	bf00      	nop
 800cde0:	0800d255 	.word	0x0800d255
 800cde4:	0800d266 	.word	0x0800d266

0800cde8 <memmove>:
 800cde8:	4288      	cmp	r0, r1
 800cdea:	b510      	push	{r4, lr}
 800cdec:	eb01 0402 	add.w	r4, r1, r2
 800cdf0:	d902      	bls.n	800cdf8 <memmove+0x10>
 800cdf2:	4284      	cmp	r4, r0
 800cdf4:	4623      	mov	r3, r4
 800cdf6:	d807      	bhi.n	800ce08 <memmove+0x20>
 800cdf8:	1e43      	subs	r3, r0, #1
 800cdfa:	42a1      	cmp	r1, r4
 800cdfc:	d008      	beq.n	800ce10 <memmove+0x28>
 800cdfe:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ce02:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ce06:	e7f8      	b.n	800cdfa <memmove+0x12>
 800ce08:	4402      	add	r2, r0
 800ce0a:	4601      	mov	r1, r0
 800ce0c:	428a      	cmp	r2, r1
 800ce0e:	d100      	bne.n	800ce12 <memmove+0x2a>
 800ce10:	bd10      	pop	{r4, pc}
 800ce12:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ce16:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ce1a:	e7f7      	b.n	800ce0c <memmove+0x24>

0800ce1c <_sbrk_r>:
 800ce1c:	b538      	push	{r3, r4, r5, lr}
 800ce1e:	4d06      	ldr	r5, [pc, #24]	@ (800ce38 <_sbrk_r+0x1c>)
 800ce20:	2300      	movs	r3, #0
 800ce22:	4604      	mov	r4, r0
 800ce24:	4608      	mov	r0, r1
 800ce26:	602b      	str	r3, [r5, #0]
 800ce28:	f7f4 ff06 	bl	8001c38 <_sbrk>
 800ce2c:	1c43      	adds	r3, r0, #1
 800ce2e:	d102      	bne.n	800ce36 <_sbrk_r+0x1a>
 800ce30:	682b      	ldr	r3, [r5, #0]
 800ce32:	b103      	cbz	r3, 800ce36 <_sbrk_r+0x1a>
 800ce34:	6023      	str	r3, [r4, #0]
 800ce36:	bd38      	pop	{r3, r4, r5, pc}
 800ce38:	240012f8 	.word	0x240012f8

0800ce3c <memcpy>:
 800ce3c:	440a      	add	r2, r1
 800ce3e:	4291      	cmp	r1, r2
 800ce40:	f100 33ff 	add.w	r3, r0, #4294967295
 800ce44:	d100      	bne.n	800ce48 <memcpy+0xc>
 800ce46:	4770      	bx	lr
 800ce48:	b510      	push	{r4, lr}
 800ce4a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ce4e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ce52:	4291      	cmp	r1, r2
 800ce54:	d1f9      	bne.n	800ce4a <memcpy+0xe>
 800ce56:	bd10      	pop	{r4, pc}

0800ce58 <_realloc_r>:
 800ce58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ce5c:	4680      	mov	r8, r0
 800ce5e:	4615      	mov	r5, r2
 800ce60:	460c      	mov	r4, r1
 800ce62:	b921      	cbnz	r1, 800ce6e <_realloc_r+0x16>
 800ce64:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ce68:	4611      	mov	r1, r2
 800ce6a:	f7ff bc4b 	b.w	800c704 <_malloc_r>
 800ce6e:	b92a      	cbnz	r2, 800ce7c <_realloc_r+0x24>
 800ce70:	f7ff fbdc 	bl	800c62c <_free_r>
 800ce74:	2400      	movs	r4, #0
 800ce76:	4620      	mov	r0, r4
 800ce78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ce7c:	f000 f81a 	bl	800ceb4 <_malloc_usable_size_r>
 800ce80:	4285      	cmp	r5, r0
 800ce82:	4606      	mov	r6, r0
 800ce84:	d802      	bhi.n	800ce8c <_realloc_r+0x34>
 800ce86:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800ce8a:	d8f4      	bhi.n	800ce76 <_realloc_r+0x1e>
 800ce8c:	4629      	mov	r1, r5
 800ce8e:	4640      	mov	r0, r8
 800ce90:	f7ff fc38 	bl	800c704 <_malloc_r>
 800ce94:	4607      	mov	r7, r0
 800ce96:	2800      	cmp	r0, #0
 800ce98:	d0ec      	beq.n	800ce74 <_realloc_r+0x1c>
 800ce9a:	42b5      	cmp	r5, r6
 800ce9c:	462a      	mov	r2, r5
 800ce9e:	4621      	mov	r1, r4
 800cea0:	bf28      	it	cs
 800cea2:	4632      	movcs	r2, r6
 800cea4:	f7ff ffca 	bl	800ce3c <memcpy>
 800cea8:	4621      	mov	r1, r4
 800ceaa:	4640      	mov	r0, r8
 800ceac:	f7ff fbbe 	bl	800c62c <_free_r>
 800ceb0:	463c      	mov	r4, r7
 800ceb2:	e7e0      	b.n	800ce76 <_realloc_r+0x1e>

0800ceb4 <_malloc_usable_size_r>:
 800ceb4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ceb8:	1f18      	subs	r0, r3, #4
 800ceba:	2b00      	cmp	r3, #0
 800cebc:	bfbc      	itt	lt
 800cebe:	580b      	ldrlt	r3, [r1, r0]
 800cec0:	18c0      	addlt	r0, r0, r3
 800cec2:	4770      	bx	lr

0800cec4 <_init>:
 800cec4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cec6:	bf00      	nop
 800cec8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ceca:	bc08      	pop	{r3}
 800cecc:	469e      	mov	lr, r3
 800cece:	4770      	bx	lr

0800ced0 <_fini>:
 800ced0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ced2:	bf00      	nop
 800ced4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ced6:	bc08      	pop	{r3}
 800ced8:	469e      	mov	lr, r3
 800ceda:	4770      	bx	lr
